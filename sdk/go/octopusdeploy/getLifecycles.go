// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about existing lifecycles.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.GetLifecycles(ctx, &octopusdeploy.GetLifecyclesArgs{
//				Ids: []string{
//					"Lifecycles-123",
//					"Lifecycles-321",
//				},
//				PartialName: pulumi.StringRef("Defau"),
//				Skip:        pulumi.IntRef(5),
//				Take:        pulumi.IntRef(100),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLifecycles(ctx *pulumi.Context, args *GetLifecyclesArgs, opts ...pulumi.InvokeOption) (*GetLifecyclesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLifecyclesResult
	err := ctx.Invoke("octopusdeploy:index/getLifecycles:getLifecycles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLifecycles.
type GetLifecyclesArgs struct {
	// A list of lifecycle IDs to filter by.
	Ids []string `pulumi:"ids"`
	// A partial name to filter lifecycles by.
	PartialName *string `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this lifecycle.
	SpaceId *string `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

// A collection of values returned by getLifecycles.
type GetLifecyclesResult struct {
	// The ID of the lifecycle.
	Id string `pulumi:"id"`
	// A list of lifecycle IDs to filter by.
	Ids        []string                 `pulumi:"ids"`
	Lifecycles []GetLifecyclesLifecycle `pulumi:"lifecycles"`
	// A partial name to filter lifecycles by.
	PartialName *string `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this lifecycle.
	SpaceId *string `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

func GetLifecyclesOutput(ctx *pulumi.Context, args GetLifecyclesOutputArgs, opts ...pulumi.InvokeOption) GetLifecyclesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLifecyclesResultOutput, error) {
			args := v.(GetLifecyclesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetLifecyclesResult
			secret, err := ctx.InvokePackageRaw("octopusdeploy:index/getLifecycles:getLifecycles", args, &rv, "", opts...)
			if err != nil {
				return GetLifecyclesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetLifecyclesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetLifecyclesResultOutput), nil
			}
			return output, nil
		}).(GetLifecyclesResultOutput)
}

// A collection of arguments for invoking getLifecycles.
type GetLifecyclesOutputArgs struct {
	// A list of lifecycle IDs to filter by.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A partial name to filter lifecycles by.
	PartialName pulumi.StringPtrInput `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip pulumi.IntPtrInput `pulumi:"skip"`
	// The space ID associated with this lifecycle.
	SpaceId pulumi.StringPtrInput `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take pulumi.IntPtrInput `pulumi:"take"`
}

func (GetLifecyclesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLifecyclesArgs)(nil)).Elem()
}

// A collection of values returned by getLifecycles.
type GetLifecyclesResultOutput struct{ *pulumi.OutputState }

func (GetLifecyclesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLifecyclesResult)(nil)).Elem()
}

func (o GetLifecyclesResultOutput) ToGetLifecyclesResultOutput() GetLifecyclesResultOutput {
	return o
}

func (o GetLifecyclesResultOutput) ToGetLifecyclesResultOutputWithContext(ctx context.Context) GetLifecyclesResultOutput {
	return o
}

// The ID of the lifecycle.
func (o GetLifecyclesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLifecyclesResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of lifecycle IDs to filter by.
func (o GetLifecyclesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLifecyclesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetLifecyclesResultOutput) Lifecycles() GetLifecyclesLifecycleArrayOutput {
	return o.ApplyT(func(v GetLifecyclesResult) []GetLifecyclesLifecycle { return v.Lifecycles }).(GetLifecyclesLifecycleArrayOutput)
}

// A partial name to filter lifecycles by.
func (o GetLifecyclesResultOutput) PartialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLifecyclesResult) *string { return v.PartialName }).(pulumi.StringPtrOutput)
}

// A filter to specify the number of items to skip in the response.
func (o GetLifecyclesResultOutput) Skip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetLifecyclesResult) *int { return v.Skip }).(pulumi.IntPtrOutput)
}

// The space ID associated with this lifecycle.
func (o GetLifecyclesResultOutput) SpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLifecyclesResult) *string { return v.SpaceId }).(pulumi.StringPtrOutput)
}

// A filter to specify the number of items to take (or return) in the response.
func (o GetLifecyclesResultOutput) Take() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetLifecyclesResult) *int { return v.Take }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLifecyclesResultOutput{})
}
