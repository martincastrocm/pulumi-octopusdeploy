// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about existing tenants.
func GetTenants(ctx *pulumi.Context, args *GetTenantsArgs, opts ...pulumi.InvokeOption) (*GetTenantsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTenantsResult
	err := ctx.Invoke("octopusdeploy:index/getTenants:getTenants", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTenants.
type GetTenantsArgs struct {
	// A filter to search for a cloned tenant by its ID.
	ClonedFromTenantId *string `pulumi:"clonedFromTenantId"`
	// A filter to search by a list of IDs.
	Ids []string `pulumi:"ids"`
	// A filter to search for cloned resources.
	IsClone *bool `pulumi:"isClone"`
	// A filter to search by name.
	Name *string `pulumi:"name"`
	// A filter to search by a partial name.
	PartialName *string `pulumi:"partialName"`
	// A filter to search by a project ID.
	ProjectId *string `pulumi:"projectId"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this tenants.
	SpaceId *string `pulumi:"spaceId"`
	// A filter to search by a list of tags.
	Tags []string `pulumi:"tags"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

// A collection of values returned by getTenants.
type GetTenantsResult struct {
	// A filter to search for a cloned tenant by its ID.
	ClonedFromTenantId *string `pulumi:"clonedFromTenantId"`
	// The unique ID for this resource.
	Id string `pulumi:"id"`
	// A filter to search by a list of IDs.
	Ids []string `pulumi:"ids"`
	// A filter to search for cloned resources.
	IsClone *bool `pulumi:"isClone"`
	// A filter to search by name.
	Name *string `pulumi:"name"`
	// A filter to search by a partial name.
	PartialName *string `pulumi:"partialName"`
	// A filter to search by a project ID.
	ProjectId *string `pulumi:"projectId"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this tenants.
	SpaceId string `pulumi:"spaceId"`
	// A filter to search by a list of tags.
	Tags []string `pulumi:"tags"`
	// A filter to specify the number of items to take (or return) in the response.
	Take    *int               `pulumi:"take"`
	Tenants []GetTenantsTenant `pulumi:"tenants"`
}

func GetTenantsOutput(ctx *pulumi.Context, args GetTenantsOutputArgs, opts ...pulumi.InvokeOption) GetTenantsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTenantsResultOutput, error) {
			args := v.(GetTenantsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetTenantsResult
			secret, err := ctx.InvokePackageRaw("octopusdeploy:index/getTenants:getTenants", args, &rv, "", opts...)
			if err != nil {
				return GetTenantsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetTenantsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetTenantsResultOutput), nil
			}
			return output, nil
		}).(GetTenantsResultOutput)
}

// A collection of arguments for invoking getTenants.
type GetTenantsOutputArgs struct {
	// A filter to search for a cloned tenant by its ID.
	ClonedFromTenantId pulumi.StringPtrInput `pulumi:"clonedFromTenantId"`
	// A filter to search by a list of IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A filter to search for cloned resources.
	IsClone pulumi.BoolPtrInput `pulumi:"isClone"`
	// A filter to search by name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to search by a partial name.
	PartialName pulumi.StringPtrInput `pulumi:"partialName"`
	// A filter to search by a project ID.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// A filter to specify the number of items to skip in the response.
	Skip pulumi.IntPtrInput `pulumi:"skip"`
	// The space ID associated with this tenants.
	SpaceId pulumi.StringPtrInput `pulumi:"spaceId"`
	// A filter to search by a list of tags.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// A filter to specify the number of items to take (or return) in the response.
	Take pulumi.IntPtrInput `pulumi:"take"`
}

func (GetTenantsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTenantsArgs)(nil)).Elem()
}

// A collection of values returned by getTenants.
type GetTenantsResultOutput struct{ *pulumi.OutputState }

func (GetTenantsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTenantsResult)(nil)).Elem()
}

func (o GetTenantsResultOutput) ToGetTenantsResultOutput() GetTenantsResultOutput {
	return o
}

func (o GetTenantsResultOutput) ToGetTenantsResultOutputWithContext(ctx context.Context) GetTenantsResultOutput {
	return o
}

// A filter to search for a cloned tenant by its ID.
func (o GetTenantsResultOutput) ClonedFromTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTenantsResult) *string { return v.ClonedFromTenantId }).(pulumi.StringPtrOutput)
}

// The unique ID for this resource.
func (o GetTenantsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTenantsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A filter to search by a list of IDs.
func (o GetTenantsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTenantsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// A filter to search for cloned resources.
func (o GetTenantsResultOutput) IsClone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTenantsResult) *bool { return v.IsClone }).(pulumi.BoolPtrOutput)
}

// A filter to search by name.
func (o GetTenantsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTenantsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A filter to search by a partial name.
func (o GetTenantsResultOutput) PartialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTenantsResult) *string { return v.PartialName }).(pulumi.StringPtrOutput)
}

// A filter to search by a project ID.
func (o GetTenantsResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTenantsResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// A filter to specify the number of items to skip in the response.
func (o GetTenantsResultOutput) Skip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTenantsResult) *int { return v.Skip }).(pulumi.IntPtrOutput)
}

// The space ID associated with this tenants.
func (o GetTenantsResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTenantsResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// A filter to search by a list of tags.
func (o GetTenantsResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTenantsResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// A filter to specify the number of items to take (or return) in the response.
func (o GetTenantsResultOutput) Take() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTenantsResult) *int { return v.Take }).(pulumi.IntPtrOutput)
}

func (o GetTenantsResultOutput) Tenants() GetTenantsTenantArrayOutput {
	return o.ApplyT(func(v GetTenantsResult) []GetTenantsTenant { return v.Tenants }).(GetTenantsTenantArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTenantsResultOutput{})
}
