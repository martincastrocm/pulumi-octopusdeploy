// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TenantProject struct {
	pulumi.CustomResourceState

	// The environment IDs associated with this tenant.
	EnvironmentIds pulumi.StringArrayOutput `pulumi:"environmentIds"`
	// The project ID associated with this tenant.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The space ID associated with this project tenant.
	SpaceId pulumi.StringOutput `pulumi:"spaceId"`
	// The tenant ID associated with this tenant.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewTenantProject registers a new resource with the given unique name, arguments, and options.
func NewTenantProject(ctx *pulumi.Context,
	name string, args *TenantProjectArgs, opts ...pulumi.ResourceOption) (*TenantProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TenantProject
	err := ctx.RegisterResource("octopusdeploy:index/tenantProject:TenantProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenantProject gets an existing TenantProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenantProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantProjectState, opts ...pulumi.ResourceOption) (*TenantProject, error) {
	var resource TenantProject
	err := ctx.ReadResource("octopusdeploy:index/tenantProject:TenantProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TenantProject resources.
type tenantProjectState struct {
	// The environment IDs associated with this tenant.
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The project ID associated with this tenant.
	ProjectId *string `pulumi:"projectId"`
	// The space ID associated with this project tenant.
	SpaceId *string `pulumi:"spaceId"`
	// The tenant ID associated with this tenant.
	TenantId *string `pulumi:"tenantId"`
}

type TenantProjectState struct {
	// The environment IDs associated with this tenant.
	EnvironmentIds pulumi.StringArrayInput
	// The project ID associated with this tenant.
	ProjectId pulumi.StringPtrInput
	// The space ID associated with this project tenant.
	SpaceId pulumi.StringPtrInput
	// The tenant ID associated with this tenant.
	TenantId pulumi.StringPtrInput
}

func (TenantProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantProjectState)(nil)).Elem()
}

type tenantProjectArgs struct {
	// The environment IDs associated with this tenant.
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The project ID associated with this tenant.
	ProjectId string `pulumi:"projectId"`
	// The space ID associated with this project tenant.
	SpaceId *string `pulumi:"spaceId"`
	// The tenant ID associated with this tenant.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a TenantProject resource.
type TenantProjectArgs struct {
	// The environment IDs associated with this tenant.
	EnvironmentIds pulumi.StringArrayInput
	// The project ID associated with this tenant.
	ProjectId pulumi.StringInput
	// The space ID associated with this project tenant.
	SpaceId pulumi.StringPtrInput
	// The tenant ID associated with this tenant.
	TenantId pulumi.StringInput
}

func (TenantProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantProjectArgs)(nil)).Elem()
}

type TenantProjectInput interface {
	pulumi.Input

	ToTenantProjectOutput() TenantProjectOutput
	ToTenantProjectOutputWithContext(ctx context.Context) TenantProjectOutput
}

func (*TenantProject) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantProject)(nil)).Elem()
}

func (i *TenantProject) ToTenantProjectOutput() TenantProjectOutput {
	return i.ToTenantProjectOutputWithContext(context.Background())
}

func (i *TenantProject) ToTenantProjectOutputWithContext(ctx context.Context) TenantProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantProjectOutput)
}

// TenantProjectArrayInput is an input type that accepts TenantProjectArray and TenantProjectArrayOutput values.
// You can construct a concrete instance of `TenantProjectArrayInput` via:
//
//	TenantProjectArray{ TenantProjectArgs{...} }
type TenantProjectArrayInput interface {
	pulumi.Input

	ToTenantProjectArrayOutput() TenantProjectArrayOutput
	ToTenantProjectArrayOutputWithContext(context.Context) TenantProjectArrayOutput
}

type TenantProjectArray []TenantProjectInput

func (TenantProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantProject)(nil)).Elem()
}

func (i TenantProjectArray) ToTenantProjectArrayOutput() TenantProjectArrayOutput {
	return i.ToTenantProjectArrayOutputWithContext(context.Background())
}

func (i TenantProjectArray) ToTenantProjectArrayOutputWithContext(ctx context.Context) TenantProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantProjectArrayOutput)
}

// TenantProjectMapInput is an input type that accepts TenantProjectMap and TenantProjectMapOutput values.
// You can construct a concrete instance of `TenantProjectMapInput` via:
//
//	TenantProjectMap{ "key": TenantProjectArgs{...} }
type TenantProjectMapInput interface {
	pulumi.Input

	ToTenantProjectMapOutput() TenantProjectMapOutput
	ToTenantProjectMapOutputWithContext(context.Context) TenantProjectMapOutput
}

type TenantProjectMap map[string]TenantProjectInput

func (TenantProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantProject)(nil)).Elem()
}

func (i TenantProjectMap) ToTenantProjectMapOutput() TenantProjectMapOutput {
	return i.ToTenantProjectMapOutputWithContext(context.Background())
}

func (i TenantProjectMap) ToTenantProjectMapOutputWithContext(ctx context.Context) TenantProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantProjectMapOutput)
}

type TenantProjectOutput struct{ *pulumi.OutputState }

func (TenantProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantProject)(nil)).Elem()
}

func (o TenantProjectOutput) ToTenantProjectOutput() TenantProjectOutput {
	return o
}

func (o TenantProjectOutput) ToTenantProjectOutputWithContext(ctx context.Context) TenantProjectOutput {
	return o
}

// The environment IDs associated with this tenant.
func (o TenantProjectOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TenantProject) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

// The project ID associated with this tenant.
func (o TenantProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantProject) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The space ID associated with this project tenant.
func (o TenantProjectOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantProject) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

// The tenant ID associated with this tenant.
func (o TenantProjectOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *TenantProject) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type TenantProjectArrayOutput struct{ *pulumi.OutputState }

func (TenantProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TenantProject)(nil)).Elem()
}

func (o TenantProjectArrayOutput) ToTenantProjectArrayOutput() TenantProjectArrayOutput {
	return o
}

func (o TenantProjectArrayOutput) ToTenantProjectArrayOutputWithContext(ctx context.Context) TenantProjectArrayOutput {
	return o
}

func (o TenantProjectArrayOutput) Index(i pulumi.IntInput) TenantProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TenantProject {
		return vs[0].([]*TenantProject)[vs[1].(int)]
	}).(TenantProjectOutput)
}

type TenantProjectMapOutput struct{ *pulumi.OutputState }

func (TenantProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TenantProject)(nil)).Elem()
}

func (o TenantProjectMapOutput) ToTenantProjectMapOutput() TenantProjectMapOutput {
	return o
}

func (o TenantProjectMapOutput) ToTenantProjectMapOutputWithContext(ctx context.Context) TenantProjectMapOutput {
	return o
}

func (o TenantProjectMapOutput) MapIndex(k pulumi.StringInput) TenantProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TenantProject {
		return vs[0].(map[string]*TenantProject)[vs[1].(string)]
	}).(TenantProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantProjectInput)(nil)).Elem(), &TenantProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantProjectArrayInput)(nil)).Elem(), TenantProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantProjectMapInput)(nil)).Elem(), TenantProjectMap{})
	pulumi.RegisterOutputType(TenantProjectOutput{})
	pulumi.RegisterOutputType(TenantProjectArrayOutput{})
	pulumi.RegisterOutputType(TenantProjectMapOutput{})
}
