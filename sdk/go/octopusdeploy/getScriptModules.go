// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about existing script modules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.GetScriptModules(ctx, &octopusdeploy.GetScriptModulesArgs{
//				Ids: []string{
//					"LibraryVariableSets-123",
//					"LibraryVariableSets-321",
//				},
//				PartialName: pulumi.StringRef("Defau"),
//				Skip:        pulumi.IntRef(5),
//				Take:        pulumi.IntRef(100),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetScriptModules(ctx *pulumi.Context, args *GetScriptModulesArgs, opts ...pulumi.InvokeOption) (*GetScriptModulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetScriptModulesResult
	err := ctx.Invoke("octopusdeploy:index/getScriptModules:getScriptModules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScriptModules.
type GetScriptModulesArgs struct {
	// A filter to search by a list of IDs.
	Ids []string `pulumi:"ids"`
	// A filter to search by a partial name.
	PartialName *string `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this script module.
	SpaceId *string `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

// A collection of values returned by getScriptModules.
type GetScriptModulesResult struct {
	// The unique ID for this resource.
	Id string `pulumi:"id"`
	// A filter to search by a list of IDs.
	Ids []string `pulumi:"ids"`
	// A filter to search by a partial name.
	PartialName   *string                        `pulumi:"partialName"`
	ScriptModules []GetScriptModulesScriptModule `pulumi:"scriptModules"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this script module.
	SpaceId string `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

func GetScriptModulesOutput(ctx *pulumi.Context, args GetScriptModulesOutputArgs, opts ...pulumi.InvokeOption) GetScriptModulesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetScriptModulesResultOutput, error) {
			args := v.(GetScriptModulesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetScriptModulesResult
			secret, err := ctx.InvokePackageRaw("octopusdeploy:index/getScriptModules:getScriptModules", args, &rv, "", opts...)
			if err != nil {
				return GetScriptModulesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetScriptModulesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetScriptModulesResultOutput), nil
			}
			return output, nil
		}).(GetScriptModulesResultOutput)
}

// A collection of arguments for invoking getScriptModules.
type GetScriptModulesOutputArgs struct {
	// A filter to search by a list of IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A filter to search by a partial name.
	PartialName pulumi.StringPtrInput `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip pulumi.IntPtrInput `pulumi:"skip"`
	// The space ID associated with this script module.
	SpaceId pulumi.StringPtrInput `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take pulumi.IntPtrInput `pulumi:"take"`
}

func (GetScriptModulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptModulesArgs)(nil)).Elem()
}

// A collection of values returned by getScriptModules.
type GetScriptModulesResultOutput struct{ *pulumi.OutputState }

func (GetScriptModulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScriptModulesResult)(nil)).Elem()
}

func (o GetScriptModulesResultOutput) ToGetScriptModulesResultOutput() GetScriptModulesResultOutput {
	return o
}

func (o GetScriptModulesResultOutput) ToGetScriptModulesResultOutputWithContext(ctx context.Context) GetScriptModulesResultOutput {
	return o
}

// The unique ID for this resource.
func (o GetScriptModulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptModulesResult) string { return v.Id }).(pulumi.StringOutput)
}

// A filter to search by a list of IDs.
func (o GetScriptModulesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetScriptModulesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// A filter to search by a partial name.
func (o GetScriptModulesResultOutput) PartialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScriptModulesResult) *string { return v.PartialName }).(pulumi.StringPtrOutput)
}

func (o GetScriptModulesResultOutput) ScriptModules() GetScriptModulesScriptModuleArrayOutput {
	return o.ApplyT(func(v GetScriptModulesResult) []GetScriptModulesScriptModule { return v.ScriptModules }).(GetScriptModulesScriptModuleArrayOutput)
}

// A filter to specify the number of items to skip in the response.
func (o GetScriptModulesResultOutput) Skip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetScriptModulesResult) *int { return v.Skip }).(pulumi.IntPtrOutput)
}

// The space ID associated with this script module.
func (o GetScriptModulesResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetScriptModulesResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// A filter to specify the number of items to take (or return) in the response.
func (o GetScriptModulesResultOutput) Take() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetScriptModulesResult) *int { return v.Take }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetScriptModulesResultOutput{})
}
