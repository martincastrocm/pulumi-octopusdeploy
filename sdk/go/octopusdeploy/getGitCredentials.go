// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about Git credentials in Octopus Deploy.
func GetGitCredentials(ctx *pulumi.Context, args *GetGitCredentialsArgs, opts ...pulumi.InvokeOption) (*GetGitCredentialsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGitCredentialsResult
	err := ctx.Invoke("octopusdeploy:index/getGitCredentials:getGitCredentials", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitCredentials.
type GetGitCredentialsArgs struct {
	// The name of the Git Credential to filter by.
	Name *string `pulumi:"name"`
	// The number of records to skip.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this Git Credential.
	SpaceId *string `pulumi:"spaceId"`
	// The number of records to take.
	Take *int `pulumi:"take"`
}

// A collection of values returned by getGitCredentials.
type GetGitCredentialsResult struct {
	// Provides information about existing GitCredentials.
	GitCredentials []GetGitCredentialsGitCredential `pulumi:"gitCredentials"`
	// The unique ID for this resource.
	Id string `pulumi:"id"`
	// The name of the Git Credential to filter by.
	Name *string `pulumi:"name"`
	// The number of records to skip.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this Git Credential.
	SpaceId *string `pulumi:"spaceId"`
	// The number of records to take.
	Take *int `pulumi:"take"`
}

func GetGitCredentialsOutput(ctx *pulumi.Context, args GetGitCredentialsOutputArgs, opts ...pulumi.InvokeOption) GetGitCredentialsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGitCredentialsResultOutput, error) {
			args := v.(GetGitCredentialsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetGitCredentialsResult
			secret, err := ctx.InvokePackageRaw("octopusdeploy:index/getGitCredentials:getGitCredentials", args, &rv, "", opts...)
			if err != nil {
				return GetGitCredentialsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetGitCredentialsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetGitCredentialsResultOutput), nil
			}
			return output, nil
		}).(GetGitCredentialsResultOutput)
}

// A collection of arguments for invoking getGitCredentials.
type GetGitCredentialsOutputArgs struct {
	// The name of the Git Credential to filter by.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The number of records to skip.
	Skip pulumi.IntPtrInput `pulumi:"skip"`
	// The space ID associated with this Git Credential.
	SpaceId pulumi.StringPtrInput `pulumi:"spaceId"`
	// The number of records to take.
	Take pulumi.IntPtrInput `pulumi:"take"`
}

func (GetGitCredentialsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitCredentialsArgs)(nil)).Elem()
}

// A collection of values returned by getGitCredentials.
type GetGitCredentialsResultOutput struct{ *pulumi.OutputState }

func (GetGitCredentialsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGitCredentialsResult)(nil)).Elem()
}

func (o GetGitCredentialsResultOutput) ToGetGitCredentialsResultOutput() GetGitCredentialsResultOutput {
	return o
}

func (o GetGitCredentialsResultOutput) ToGetGitCredentialsResultOutputWithContext(ctx context.Context) GetGitCredentialsResultOutput {
	return o
}

// Provides information about existing GitCredentials.
func (o GetGitCredentialsResultOutput) GitCredentials() GetGitCredentialsGitCredentialArrayOutput {
	return o.ApplyT(func(v GetGitCredentialsResult) []GetGitCredentialsGitCredential { return v.GitCredentials }).(GetGitCredentialsGitCredentialArrayOutput)
}

// The unique ID for this resource.
func (o GetGitCredentialsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGitCredentialsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Git Credential to filter by.
func (o GetGitCredentialsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitCredentialsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of records to skip.
func (o GetGitCredentialsResultOutput) Skip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetGitCredentialsResult) *int { return v.Skip }).(pulumi.IntPtrOutput)
}

// The space ID associated with this Git Credential.
func (o GetGitCredentialsResultOutput) SpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGitCredentialsResult) *string { return v.SpaceId }).(pulumi.StringPtrOutput)
}

// The number of records to take.
func (o GetGitCredentialsResultOutput) Take() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetGitCredentialsResult) *int { return v.Take }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGitCredentialsResultOutput{})
}
