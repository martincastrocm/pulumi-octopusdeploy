// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generates a X.509 self-signed certificate for use with a Octopus Deploy Tentacle.
//
// ## Octopus certificates
//
// The X.509 certificates generated are self-signed, 2048-bit private keys and intended for use [only between Octopus Server and Tentacle](https://octopus.com/docs/security/octopus-tentacle-communication#Octopus-Tentaclecommunication-Octopuscertificates) communications. There is an insightful discussion of [why Octopus uses self-signed certificates](https://octopus.com/blog/why-self-signed-certificates) by default.
//
// Instead of generating a new certificate through this resource you can use an existing certificate and simply reference the appropriate thumbprint when registering the target.
//
// ### State Persistence
// This resource that is generated will be stored in the state file and cannot be retrieved later from the external Octopus Server or Tentacle.
type TentacleCertificate struct {
	pulumi.CustomResourceState

	// The base64 encoded pfx certificate.
	Base64 pulumi.StringOutput `pulumi:"base64"`
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies pulumi.StringMapOutput `pulumi:"dependencies"`
	// The SHA1 sum of the certificate represented in hexadecimal.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewTentacleCertificate registers a new resource with the given unique name, arguments, and options.
func NewTentacleCertificate(ctx *pulumi.Context,
	name string, args *TentacleCertificateArgs, opts ...pulumi.ResourceOption) (*TentacleCertificate, error) {
	if args == nil {
		args = &TentacleCertificateArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"base64",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TentacleCertificate
	err := ctx.RegisterResource("octopusdeploy:index/tentacleCertificate:TentacleCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTentacleCertificate gets an existing TentacleCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTentacleCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TentacleCertificateState, opts ...pulumi.ResourceOption) (*TentacleCertificate, error) {
	var resource TentacleCertificate
	err := ctx.ReadResource("octopusdeploy:index/tentacleCertificate:TentacleCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TentacleCertificate resources.
type tentacleCertificateState struct {
	// The base64 encoded pfx certificate.
	Base64 *string `pulumi:"base64"`
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies map[string]string `pulumi:"dependencies"`
	// The SHA1 sum of the certificate represented in hexadecimal.
	Thumbprint *string `pulumi:"thumbprint"`
}

type TentacleCertificateState struct {
	// The base64 encoded pfx certificate.
	Base64 pulumi.StringPtrInput
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies pulumi.StringMapInput
	// The SHA1 sum of the certificate represented in hexadecimal.
	Thumbprint pulumi.StringPtrInput
}

func (TentacleCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*tentacleCertificateState)(nil)).Elem()
}

type tentacleCertificateArgs struct {
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies map[string]string `pulumi:"dependencies"`
}

// The set of arguments for constructing a TentacleCertificate resource.
type TentacleCertificateArgs struct {
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies pulumi.StringMapInput
}

func (TentacleCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tentacleCertificateArgs)(nil)).Elem()
}

type TentacleCertificateInput interface {
	pulumi.Input

	ToTentacleCertificateOutput() TentacleCertificateOutput
	ToTentacleCertificateOutputWithContext(ctx context.Context) TentacleCertificateOutput
}

func (*TentacleCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**TentacleCertificate)(nil)).Elem()
}

func (i *TentacleCertificate) ToTentacleCertificateOutput() TentacleCertificateOutput {
	return i.ToTentacleCertificateOutputWithContext(context.Background())
}

func (i *TentacleCertificate) ToTentacleCertificateOutputWithContext(ctx context.Context) TentacleCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TentacleCertificateOutput)
}

// TentacleCertificateArrayInput is an input type that accepts TentacleCertificateArray and TentacleCertificateArrayOutput values.
// You can construct a concrete instance of `TentacleCertificateArrayInput` via:
//
//	TentacleCertificateArray{ TentacleCertificateArgs{...} }
type TentacleCertificateArrayInput interface {
	pulumi.Input

	ToTentacleCertificateArrayOutput() TentacleCertificateArrayOutput
	ToTentacleCertificateArrayOutputWithContext(context.Context) TentacleCertificateArrayOutput
}

type TentacleCertificateArray []TentacleCertificateInput

func (TentacleCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TentacleCertificate)(nil)).Elem()
}

func (i TentacleCertificateArray) ToTentacleCertificateArrayOutput() TentacleCertificateArrayOutput {
	return i.ToTentacleCertificateArrayOutputWithContext(context.Background())
}

func (i TentacleCertificateArray) ToTentacleCertificateArrayOutputWithContext(ctx context.Context) TentacleCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TentacleCertificateArrayOutput)
}

// TentacleCertificateMapInput is an input type that accepts TentacleCertificateMap and TentacleCertificateMapOutput values.
// You can construct a concrete instance of `TentacleCertificateMapInput` via:
//
//	TentacleCertificateMap{ "key": TentacleCertificateArgs{...} }
type TentacleCertificateMapInput interface {
	pulumi.Input

	ToTentacleCertificateMapOutput() TentacleCertificateMapOutput
	ToTentacleCertificateMapOutputWithContext(context.Context) TentacleCertificateMapOutput
}

type TentacleCertificateMap map[string]TentacleCertificateInput

func (TentacleCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TentacleCertificate)(nil)).Elem()
}

func (i TentacleCertificateMap) ToTentacleCertificateMapOutput() TentacleCertificateMapOutput {
	return i.ToTentacleCertificateMapOutputWithContext(context.Background())
}

func (i TentacleCertificateMap) ToTentacleCertificateMapOutputWithContext(ctx context.Context) TentacleCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TentacleCertificateMapOutput)
}

type TentacleCertificateOutput struct{ *pulumi.OutputState }

func (TentacleCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TentacleCertificate)(nil)).Elem()
}

func (o TentacleCertificateOutput) ToTentacleCertificateOutput() TentacleCertificateOutput {
	return o
}

func (o TentacleCertificateOutput) ToTentacleCertificateOutputWithContext(ctx context.Context) TentacleCertificateOutput {
	return o
}

// The base64 encoded pfx certificate.
func (o TentacleCertificateOutput) Base64() pulumi.StringOutput {
	return o.ApplyT(func(v *TentacleCertificate) pulumi.StringOutput { return v.Base64 }).(pulumi.StringOutput)
}

// Optional map of dependencies that when modified will trigger a re-creation of this resource.
func (o TentacleCertificateOutput) Dependencies() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TentacleCertificate) pulumi.StringMapOutput { return v.Dependencies }).(pulumi.StringMapOutput)
}

// The SHA1 sum of the certificate represented in hexadecimal.
func (o TentacleCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *TentacleCertificate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

type TentacleCertificateArrayOutput struct{ *pulumi.OutputState }

func (TentacleCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TentacleCertificate)(nil)).Elem()
}

func (o TentacleCertificateArrayOutput) ToTentacleCertificateArrayOutput() TentacleCertificateArrayOutput {
	return o
}

func (o TentacleCertificateArrayOutput) ToTentacleCertificateArrayOutputWithContext(ctx context.Context) TentacleCertificateArrayOutput {
	return o
}

func (o TentacleCertificateArrayOutput) Index(i pulumi.IntInput) TentacleCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TentacleCertificate {
		return vs[0].([]*TentacleCertificate)[vs[1].(int)]
	}).(TentacleCertificateOutput)
}

type TentacleCertificateMapOutput struct{ *pulumi.OutputState }

func (TentacleCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TentacleCertificate)(nil)).Elem()
}

func (o TentacleCertificateMapOutput) ToTentacleCertificateMapOutput() TentacleCertificateMapOutput {
	return o
}

func (o TentacleCertificateMapOutput) ToTentacleCertificateMapOutputWithContext(ctx context.Context) TentacleCertificateMapOutput {
	return o
}

func (o TentacleCertificateMapOutput) MapIndex(k pulumi.StringInput) TentacleCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TentacleCertificate {
		return vs[0].(map[string]*TentacleCertificate)[vs[1].(string)]
	}).(TentacleCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TentacleCertificateInput)(nil)).Elem(), &TentacleCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*TentacleCertificateArrayInput)(nil)).Elem(), TentacleCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TentacleCertificateMapInput)(nil)).Elem(), TentacleCertificateMap{})
	pulumi.RegisterOutputType(TentacleCertificateOutput{})
	pulumi.RegisterOutputType(TentacleCertificateArrayOutput{})
	pulumi.RegisterOutputType(TentacleCertificateMapOutput{})
}
