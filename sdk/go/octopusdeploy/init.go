// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "octopusdeploy:index/awsAccount:AwsAccount":
		r = &AwsAccount{}
	case "octopusdeploy:index/awsOpenidConnectAccount:AwsOpenidConnectAccount":
		r = &AwsOpenidConnectAccount{}
	case "octopusdeploy:index/azureCloudServiceDeploymentTarget:AzureCloudServiceDeploymentTarget":
		r = &AzureCloudServiceDeploymentTarget{}
	case "octopusdeploy:index/azureOpenidConnect:AzureOpenidConnect":
		r = &AzureOpenidConnect{}
	case "octopusdeploy:index/azureServiceFabricClusterDeploymentTarget:AzureServiceFabricClusterDeploymentTarget":
		r = &AzureServiceFabricClusterDeploymentTarget{}
	case "octopusdeploy:index/azureServicePrincipal:AzureServicePrincipal":
		r = &AzureServicePrincipal{}
	case "octopusdeploy:index/azureSubscriptionAccount:AzureSubscriptionAccount":
		r = &AzureSubscriptionAccount{}
	case "octopusdeploy:index/azureWebAppDeploymentTarget:AzureWebAppDeploymentTarget":
		r = &AzureWebAppDeploymentTarget{}
	case "octopusdeploy:index/certificate:Certificate":
		r = &Certificate{}
	case "octopusdeploy:index/channel:Channel":
		r = &Channel{}
	case "octopusdeploy:index/cloudRegionDeploymentTarget:CloudRegionDeploymentTarget":
		r = &CloudRegionDeploymentTarget{}
	case "octopusdeploy:index/deploymentProcess:DeploymentProcess":
		r = &DeploymentProcess{}
	case "octopusdeploy:index/dynamicWorkerPool:DynamicWorkerPool":
		r = &DynamicWorkerPool{}
	case "octopusdeploy:index/externalFeedCreateReleaseTrigger:ExternalFeedCreateReleaseTrigger":
		r = &ExternalFeedCreateReleaseTrigger{}
	case "octopusdeploy:index/gcpAccount:GcpAccount":
		r = &GcpAccount{}
	case "octopusdeploy:index/kubernetesAgentDeploymentTarget:KubernetesAgentDeploymentTarget":
		r = &KubernetesAgentDeploymentTarget{}
	case "octopusdeploy:index/kubernetesAgentWorker:KubernetesAgentWorker":
		r = &KubernetesAgentWorker{}
	case "octopusdeploy:index/kubernetesClusterDeploymentTarget:KubernetesClusterDeploymentTarget":
		r = &KubernetesClusterDeploymentTarget{}
	case "octopusdeploy:index/listeningTentacleDeploymentTarget:ListeningTentacleDeploymentTarget":
		r = &ListeningTentacleDeploymentTarget{}
	case "octopusdeploy:index/machinePolicy:MachinePolicy":
		r = &MachinePolicy{}
	case "octopusdeploy:index/offlinePackageDropDeploymentTarget:OfflinePackageDropDeploymentTarget":
		r = &OfflinePackageDropDeploymentTarget{}
	case "octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId":
		r = &PollingSubscriptionId{}
	case "octopusdeploy:index/pollingTentacleDeploymentTarget:PollingTentacleDeploymentTarget":
		r = &PollingTentacleDeploymentTarget{}
	case "octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger":
		r = &ProjectDeploymentTargetTrigger{}
	case "octopusdeploy:index/projectScheduledTrigger:ProjectScheduledTrigger":
		r = &ProjectScheduledTrigger{}
	case "octopusdeploy:index/runbookProcess:RunbookProcess":
		r = &RunbookProcess{}
	case "octopusdeploy:index/scopedUserRole:ScopedUserRole":
		r = &ScopedUserRole{}
	case "octopusdeploy:index/sshConnectionDeploymentTarget:SshConnectionDeploymentTarget":
		r = &SshConnectionDeploymentTarget{}
	case "octopusdeploy:index/sshKeyAccount:SshKeyAccount":
		r = &SshKeyAccount{}
	case "octopusdeploy:index/staticWorkerPool:StaticWorkerPool":
		r = &StaticWorkerPool{}
	case "octopusdeploy:index/team:Team":
		r = &Team{}
	case "octopusdeploy:index/tokenAccount:TokenAccount":
		r = &TokenAccount{}
	case "octopusdeploy:index/user:User":
		r = &User{}
	case "octopusdeploy:index/userRole:UserRole":
		r = &UserRole{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:octopusdeploy" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/awsAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/awsOpenidConnectAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/azureCloudServiceDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/azureOpenidConnect",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/azureServiceFabricClusterDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/azureServicePrincipal",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/azureSubscriptionAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/azureWebAppDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/certificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/channel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/cloudRegionDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/deploymentProcess",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/dynamicWorkerPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/externalFeedCreateReleaseTrigger",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/gcpAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/kubernetesAgentDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/kubernetesAgentWorker",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/kubernetesClusterDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/listeningTentacleDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/machinePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/offlinePackageDropDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/pollingSubscriptionId",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/pollingTentacleDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/projectDeploymentTargetTrigger",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/projectScheduledTrigger",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/runbookProcess",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/scopedUserRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/sshConnectionDeploymentTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/sshKeyAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/staticWorkerPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/team",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/tokenAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"octopusdeploy",
		"index/userRole",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"octopusdeploy",
		&pkg{version},
	)
}
