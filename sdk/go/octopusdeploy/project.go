// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages projects in Octopus Deploy.
//
// > Credentials are stored in state as plaintext. Read more about sensitive data in state.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewProject(ctx, "example", &octopusdeploy.ProjectArgs{
//				AutoCreateRelease:               pulumi.Bool(false),
//				DefaultGuidedFailureMode:        pulumi.String("EnvironmentDefault"),
//				DefaultToSkipIfAlreadyInstalled: pulumi.Bool(false),
//				Description:                     pulumi.String("The development project."),
//				DiscreteChannelRelease:          pulumi.Bool(false),
//				IsDisabled:                      pulumi.Bool(false),
//				IsDiscreteChannelRelease:        pulumi.Bool(false),
//				IsVersionControlled:             pulumi.Bool(false),
//				LifecycleId:                     pulumi.String("Lifecycles-123"),
//				ProjectGroupId:                  pulumi.String("ProjectGroups-123"),
//				TenantedDeploymentParticipation: pulumi.String("TenantedOrUntenanted"),
//				IncludedLibraryVariableSets: pulumi.StringArray{
//					pulumi.String("LibraryVariablesSets-456"),
//					pulumi.String("LibraryVariablesSets-789"),
//				},
//				ConnectivityPolicies: octopusdeploy.ProjectConnectivityPolicyArray{
//					&octopusdeploy.ProjectConnectivityPolicyArgs{
//						AllowDeploymentsToNoTargets: pulumi.Bool(false),
//						ExcludeUnhealthyTargets:     pulumi.Bool(false),
//						SkipMachineBehavior:         pulumi.String("SkipUnavailableMachines"),
//					},
//				},
//				JiraServiceManagementExtensionSettings: octopusdeploy.ProjectJiraServiceManagementExtensionSettingArray{
//					&octopusdeploy.ProjectJiraServiceManagementExtensionSettingArgs{
//						ConnectionId:           pulumi.String("133d7fe602514060a48bc42ee9870f99"),
//						IsEnabled:              pulumi.Bool(false),
//						ServiceDeskProjectName: pulumi.String("Test Service Desk Project (OK to Delete)"),
//					},
//				},
//				ServicenowExtensionSettings: octopusdeploy.ProjectServicenowExtensionSettingArray{
//					&octopusdeploy.ProjectServicenowExtensionSettingArgs{
//						ConnectionId:                     pulumi.String("989034685e2c48c4b06a29286c9ef5cc"),
//						IsEnabled:                        pulumi.Bool(false),
//						IsStateAutomaticallyTransitioned: pulumi.Bool(false),
//						StandardChangeTemplateName:       pulumi.String("Standard Change Template Name (OK to Delete)"),
//					},
//				},
//				Templates: octopusdeploy.ProjectTemplateArray{
//					&octopusdeploy.ProjectTemplateArgs{
//						DefaultValue: pulumi.String("example-default-value"),
//						HelpText:     pulumi.String("example-help-test"),
//						Label:        pulumi.String("example-label"),
//						Name:         pulumi.String("example-template-value"),
//						DisplaySettings: pulumi.StringMap{
//							"Octopus.ControlType": pulumi.String("SingleLineText"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import octopusdeploy:index/project:Project [options] octopusdeploy_project.<name> <project-id>
// ```
type Project struct {
	pulumi.CustomResourceState

	// Deprecated: This value is only valid for an associated connectivity policy and should not be specified here.
	AllowDeploymentsToNoTargets pulumi.BoolPtrOutput                        `pulumi:"allowDeploymentsToNoTargets"`
	AutoCreateRelease           pulumi.BoolOutput                           `pulumi:"autoCreateRelease"`
	AutoDeployReleaseOverrides  ProjectAutoDeployReleaseOverrideArrayOutput `pulumi:"autoDeployReleaseOverrides"`
	// The ID of the project this project was cloned from.
	ClonedFromProjectId             pulumi.StringPtrOutput               `pulumi:"clonedFromProjectId"`
	ConnectivityPolicies            ProjectConnectivityPolicyArrayOutput `pulumi:"connectivityPolicies"`
	DefaultGuidedFailureMode        pulumi.StringOutput                  `pulumi:"defaultGuidedFailureMode"`
	DefaultToSkipIfAlreadyInstalled pulumi.BoolOutput                    `pulumi:"defaultToSkipIfAlreadyInstalled"`
	DeploymentChangesTemplate       pulumi.StringOutput                  `pulumi:"deploymentChangesTemplate"`
	DeploymentProcessId             pulumi.StringOutput                  `pulumi:"deploymentProcessId"`
	// The description of this project.
	Description pulumi.StringOutput `pulumi:"description"`
	// Treats releases of different channels to the same environment as a separate deployment dimension
	DiscreteChannelRelease pulumi.BoolOutput `pulumi:"discreteChannelRelease"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitAnonymousPersistenceSettings ProjectGitAnonymousPersistenceSettingArrayOutput `pulumi:"gitAnonymousPersistenceSettings"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitLibraryPersistenceSettings ProjectGitLibraryPersistenceSettingArrayOutput `pulumi:"gitLibraryPersistenceSettings"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitUsernamePasswordPersistenceSettings ProjectGitUsernamePasswordPersistenceSettingArrayOutput `pulumi:"gitUsernamePasswordPersistenceSettings"`
	// The list of included library variable set IDs.
	IncludedLibraryVariableSets pulumi.StringArrayOutput `pulumi:"includedLibraryVariableSets"`
	IsDisabled                  pulumi.BoolOutput        `pulumi:"isDisabled"`
	// Treats releases of different channels to the same environment as a separate deployment dimension
	IsDiscreteChannelRelease pulumi.BoolOutput `pulumi:"isDiscreteChannelRelease"`
	IsVersionControlled      pulumi.BoolOutput `pulumi:"isVersionControlled"`
	// Provides extension settings for the Jira Service Management (JSM) integration for this project.
	JiraServiceManagementExtensionSettings ProjectJiraServiceManagementExtensionSettingArrayOutput `pulumi:"jiraServiceManagementExtensionSettings"`
	// The lifecycle ID associated with this project.
	LifecycleId pulumi.StringOutput `pulumi:"lifecycleId"`
	// The name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project group ID associated with this project.
	ProjectGroupId            pulumi.StringOutput                       `pulumi:"projectGroupId"`
	ReleaseCreationStrategies ProjectReleaseCreationStrategyArrayOutput `pulumi:"releaseCreationStrategies"`
	ReleaseNotesTemplate      pulumi.StringOutput                       `pulumi:"releaseNotesTemplate"`
	// Provides extension settings for the ServiceNow integration for this project.
	ServicenowExtensionSettings ProjectServicenowExtensionSettingArrayOutput `pulumi:"servicenowExtensionSettings"`
	// A human-readable, unique identifier, used to identify a project.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The space ID associated with this project.
	SpaceId   pulumi.StringOutput        `pulumi:"spaceId"`
	Templates ProjectTemplateArrayOutput `pulumi:"templates"`
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation pulumi.StringOutput                  `pulumi:"tenantedDeploymentParticipation"`
	VariableSetId                   pulumi.StringOutput                  `pulumi:"variableSetId"`
	VersioningStrategies            ProjectVersioningStrategyArrayOutput `pulumi:"versioningStrategies"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LifecycleId == nil {
		return nil, errors.New("invalid value for required argument 'LifecycleId'")
	}
	if args.ProjectGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("octopusdeploy:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("octopusdeploy:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Deprecated: This value is only valid for an associated connectivity policy and should not be specified here.
	AllowDeploymentsToNoTargets *bool                              `pulumi:"allowDeploymentsToNoTargets"`
	AutoCreateRelease           *bool                              `pulumi:"autoCreateRelease"`
	AutoDeployReleaseOverrides  []ProjectAutoDeployReleaseOverride `pulumi:"autoDeployReleaseOverrides"`
	// The ID of the project this project was cloned from.
	ClonedFromProjectId             *string                     `pulumi:"clonedFromProjectId"`
	ConnectivityPolicies            []ProjectConnectivityPolicy `pulumi:"connectivityPolicies"`
	DefaultGuidedFailureMode        *string                     `pulumi:"defaultGuidedFailureMode"`
	DefaultToSkipIfAlreadyInstalled *bool                       `pulumi:"defaultToSkipIfAlreadyInstalled"`
	DeploymentChangesTemplate       *string                     `pulumi:"deploymentChangesTemplate"`
	DeploymentProcessId             *string                     `pulumi:"deploymentProcessId"`
	// The description of this project.
	Description *string `pulumi:"description"`
	// Treats releases of different channels to the same environment as a separate deployment dimension
	DiscreteChannelRelease *bool `pulumi:"discreteChannelRelease"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitAnonymousPersistenceSettings []ProjectGitAnonymousPersistenceSetting `pulumi:"gitAnonymousPersistenceSettings"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitLibraryPersistenceSettings []ProjectGitLibraryPersistenceSetting `pulumi:"gitLibraryPersistenceSettings"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitUsernamePasswordPersistenceSettings []ProjectGitUsernamePasswordPersistenceSetting `pulumi:"gitUsernamePasswordPersistenceSettings"`
	// The list of included library variable set IDs.
	IncludedLibraryVariableSets []string `pulumi:"includedLibraryVariableSets"`
	IsDisabled                  *bool    `pulumi:"isDisabled"`
	// Treats releases of different channels to the same environment as a separate deployment dimension
	IsDiscreteChannelRelease *bool `pulumi:"isDiscreteChannelRelease"`
	IsVersionControlled      *bool `pulumi:"isVersionControlled"`
	// Provides extension settings for the Jira Service Management (JSM) integration for this project.
	JiraServiceManagementExtensionSettings []ProjectJiraServiceManagementExtensionSetting `pulumi:"jiraServiceManagementExtensionSettings"`
	// The lifecycle ID associated with this project.
	LifecycleId *string `pulumi:"lifecycleId"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The project group ID associated with this project.
	ProjectGroupId            *string                          `pulumi:"projectGroupId"`
	ReleaseCreationStrategies []ProjectReleaseCreationStrategy `pulumi:"releaseCreationStrategies"`
	ReleaseNotesTemplate      *string                          `pulumi:"releaseNotesTemplate"`
	// Provides extension settings for the ServiceNow integration for this project.
	ServicenowExtensionSettings []ProjectServicenowExtensionSetting `pulumi:"servicenowExtensionSettings"`
	// A human-readable, unique identifier, used to identify a project.
	Slug *string `pulumi:"slug"`
	// The space ID associated with this project.
	SpaceId   *string           `pulumi:"spaceId"`
	Templates []ProjectTemplate `pulumi:"templates"`
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation *string                     `pulumi:"tenantedDeploymentParticipation"`
	VariableSetId                   *string                     `pulumi:"variableSetId"`
	VersioningStrategies            []ProjectVersioningStrategy `pulumi:"versioningStrategies"`
}

type ProjectState struct {
	// Deprecated: This value is only valid for an associated connectivity policy and should not be specified here.
	AllowDeploymentsToNoTargets pulumi.BoolPtrInput
	AutoCreateRelease           pulumi.BoolPtrInput
	AutoDeployReleaseOverrides  ProjectAutoDeployReleaseOverrideArrayInput
	// The ID of the project this project was cloned from.
	ClonedFromProjectId             pulumi.StringPtrInput
	ConnectivityPolicies            ProjectConnectivityPolicyArrayInput
	DefaultGuidedFailureMode        pulumi.StringPtrInput
	DefaultToSkipIfAlreadyInstalled pulumi.BoolPtrInput
	DeploymentChangesTemplate       pulumi.StringPtrInput
	DeploymentProcessId             pulumi.StringPtrInput
	// The description of this project.
	Description pulumi.StringPtrInput
	// Treats releases of different channels to the same environment as a separate deployment dimension
	DiscreteChannelRelease pulumi.BoolPtrInput
	// Provides Git-related persistence settings for a version-controlled project.
	GitAnonymousPersistenceSettings ProjectGitAnonymousPersistenceSettingArrayInput
	// Provides Git-related persistence settings for a version-controlled project.
	GitLibraryPersistenceSettings ProjectGitLibraryPersistenceSettingArrayInput
	// Provides Git-related persistence settings for a version-controlled project.
	GitUsernamePasswordPersistenceSettings ProjectGitUsernamePasswordPersistenceSettingArrayInput
	// The list of included library variable set IDs.
	IncludedLibraryVariableSets pulumi.StringArrayInput
	IsDisabled                  pulumi.BoolPtrInput
	// Treats releases of different channels to the same environment as a separate deployment dimension
	IsDiscreteChannelRelease pulumi.BoolPtrInput
	IsVersionControlled      pulumi.BoolPtrInput
	// Provides extension settings for the Jira Service Management (JSM) integration for this project.
	JiraServiceManagementExtensionSettings ProjectJiraServiceManagementExtensionSettingArrayInput
	// The lifecycle ID associated with this project.
	LifecycleId pulumi.StringPtrInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The project group ID associated with this project.
	ProjectGroupId            pulumi.StringPtrInput
	ReleaseCreationStrategies ProjectReleaseCreationStrategyArrayInput
	ReleaseNotesTemplate      pulumi.StringPtrInput
	// Provides extension settings for the ServiceNow integration for this project.
	ServicenowExtensionSettings ProjectServicenowExtensionSettingArrayInput
	// A human-readable, unique identifier, used to identify a project.
	Slug pulumi.StringPtrInput
	// The space ID associated with this project.
	SpaceId   pulumi.StringPtrInput
	Templates ProjectTemplateArrayInput
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation pulumi.StringPtrInput
	VariableSetId                   pulumi.StringPtrInput
	VersioningStrategies            ProjectVersioningStrategyArrayInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Deprecated: This value is only valid for an associated connectivity policy and should not be specified here.
	AllowDeploymentsToNoTargets *bool                              `pulumi:"allowDeploymentsToNoTargets"`
	AutoCreateRelease           *bool                              `pulumi:"autoCreateRelease"`
	AutoDeployReleaseOverrides  []ProjectAutoDeployReleaseOverride `pulumi:"autoDeployReleaseOverrides"`
	// The ID of the project this project was cloned from.
	ClonedFromProjectId             *string                     `pulumi:"clonedFromProjectId"`
	ConnectivityPolicies            []ProjectConnectivityPolicy `pulumi:"connectivityPolicies"`
	DefaultGuidedFailureMode        *string                     `pulumi:"defaultGuidedFailureMode"`
	DefaultToSkipIfAlreadyInstalled *bool                       `pulumi:"defaultToSkipIfAlreadyInstalled"`
	DeploymentChangesTemplate       *string                     `pulumi:"deploymentChangesTemplate"`
	// The description of this project.
	Description *string `pulumi:"description"`
	// Treats releases of different channels to the same environment as a separate deployment dimension
	DiscreteChannelRelease *bool `pulumi:"discreteChannelRelease"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitAnonymousPersistenceSettings []ProjectGitAnonymousPersistenceSetting `pulumi:"gitAnonymousPersistenceSettings"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitLibraryPersistenceSettings []ProjectGitLibraryPersistenceSetting `pulumi:"gitLibraryPersistenceSettings"`
	// Provides Git-related persistence settings for a version-controlled project.
	GitUsernamePasswordPersistenceSettings []ProjectGitUsernamePasswordPersistenceSetting `pulumi:"gitUsernamePasswordPersistenceSettings"`
	// The list of included library variable set IDs.
	IncludedLibraryVariableSets []string `pulumi:"includedLibraryVariableSets"`
	IsDisabled                  *bool    `pulumi:"isDisabled"`
	// Treats releases of different channels to the same environment as a separate deployment dimension
	IsDiscreteChannelRelease *bool `pulumi:"isDiscreteChannelRelease"`
	IsVersionControlled      *bool `pulumi:"isVersionControlled"`
	// Provides extension settings for the Jira Service Management (JSM) integration for this project.
	JiraServiceManagementExtensionSettings []ProjectJiraServiceManagementExtensionSetting `pulumi:"jiraServiceManagementExtensionSettings"`
	// The lifecycle ID associated with this project.
	LifecycleId string `pulumi:"lifecycleId"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// The project group ID associated with this project.
	ProjectGroupId            string                           `pulumi:"projectGroupId"`
	ReleaseCreationStrategies []ProjectReleaseCreationStrategy `pulumi:"releaseCreationStrategies"`
	ReleaseNotesTemplate      *string                          `pulumi:"releaseNotesTemplate"`
	// Provides extension settings for the ServiceNow integration for this project.
	ServicenowExtensionSettings []ProjectServicenowExtensionSetting `pulumi:"servicenowExtensionSettings"`
	// A human-readable, unique identifier, used to identify a project.
	Slug *string `pulumi:"slug"`
	// The space ID associated with this project.
	SpaceId   *string           `pulumi:"spaceId"`
	Templates []ProjectTemplate `pulumi:"templates"`
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation *string                     `pulumi:"tenantedDeploymentParticipation"`
	VersioningStrategies            []ProjectVersioningStrategy `pulumi:"versioningStrategies"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Deprecated: This value is only valid for an associated connectivity policy and should not be specified here.
	AllowDeploymentsToNoTargets pulumi.BoolPtrInput
	AutoCreateRelease           pulumi.BoolPtrInput
	AutoDeployReleaseOverrides  ProjectAutoDeployReleaseOverrideArrayInput
	// The ID of the project this project was cloned from.
	ClonedFromProjectId             pulumi.StringPtrInput
	ConnectivityPolicies            ProjectConnectivityPolicyArrayInput
	DefaultGuidedFailureMode        pulumi.StringPtrInput
	DefaultToSkipIfAlreadyInstalled pulumi.BoolPtrInput
	DeploymentChangesTemplate       pulumi.StringPtrInput
	// The description of this project.
	Description pulumi.StringPtrInput
	// Treats releases of different channels to the same environment as a separate deployment dimension
	DiscreteChannelRelease pulumi.BoolPtrInput
	// Provides Git-related persistence settings for a version-controlled project.
	GitAnonymousPersistenceSettings ProjectGitAnonymousPersistenceSettingArrayInput
	// Provides Git-related persistence settings for a version-controlled project.
	GitLibraryPersistenceSettings ProjectGitLibraryPersistenceSettingArrayInput
	// Provides Git-related persistence settings for a version-controlled project.
	GitUsernamePasswordPersistenceSettings ProjectGitUsernamePasswordPersistenceSettingArrayInput
	// The list of included library variable set IDs.
	IncludedLibraryVariableSets pulumi.StringArrayInput
	IsDisabled                  pulumi.BoolPtrInput
	// Treats releases of different channels to the same environment as a separate deployment dimension
	IsDiscreteChannelRelease pulumi.BoolPtrInput
	IsVersionControlled      pulumi.BoolPtrInput
	// Provides extension settings for the Jira Service Management (JSM) integration for this project.
	JiraServiceManagementExtensionSettings ProjectJiraServiceManagementExtensionSettingArrayInput
	// The lifecycle ID associated with this project.
	LifecycleId pulumi.StringInput
	// The name of this resource.
	Name pulumi.StringPtrInput
	// The project group ID associated with this project.
	ProjectGroupId            pulumi.StringInput
	ReleaseCreationStrategies ProjectReleaseCreationStrategyArrayInput
	ReleaseNotesTemplate      pulumi.StringPtrInput
	// Provides extension settings for the ServiceNow integration for this project.
	ServicenowExtensionSettings ProjectServicenowExtensionSettingArrayInput
	// A human-readable, unique identifier, used to identify a project.
	Slug pulumi.StringPtrInput
	// The space ID associated with this project.
	SpaceId   pulumi.StringPtrInput
	Templates ProjectTemplateArrayInput
	// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
	TenantedDeploymentParticipation pulumi.StringPtrInput
	VersioningStrategies            ProjectVersioningStrategyArrayInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Deprecated: This value is only valid for an associated connectivity policy and should not be specified here.
func (o ProjectOutput) AllowDeploymentsToNoTargets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.AllowDeploymentsToNoTargets }).(pulumi.BoolPtrOutput)
}

func (o ProjectOutput) AutoCreateRelease() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.AutoCreateRelease }).(pulumi.BoolOutput)
}

func (o ProjectOutput) AutoDeployReleaseOverrides() ProjectAutoDeployReleaseOverrideArrayOutput {
	return o.ApplyT(func(v *Project) ProjectAutoDeployReleaseOverrideArrayOutput { return v.AutoDeployReleaseOverrides }).(ProjectAutoDeployReleaseOverrideArrayOutput)
}

// The ID of the project this project was cloned from.
func (o ProjectOutput) ClonedFromProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.ClonedFromProjectId }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) ConnectivityPolicies() ProjectConnectivityPolicyArrayOutput {
	return o.ApplyT(func(v *Project) ProjectConnectivityPolicyArrayOutput { return v.ConnectivityPolicies }).(ProjectConnectivityPolicyArrayOutput)
}

func (o ProjectOutput) DefaultGuidedFailureMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DefaultGuidedFailureMode }).(pulumi.StringOutput)
}

func (o ProjectOutput) DefaultToSkipIfAlreadyInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.DefaultToSkipIfAlreadyInstalled }).(pulumi.BoolOutput)
}

func (o ProjectOutput) DeploymentChangesTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DeploymentChangesTemplate }).(pulumi.StringOutput)
}

func (o ProjectOutput) DeploymentProcessId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.DeploymentProcessId }).(pulumi.StringOutput)
}

// The description of this project.
func (o ProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Treats releases of different channels to the same environment as a separate deployment dimension
func (o ProjectOutput) DiscreteChannelRelease() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.DiscreteChannelRelease }).(pulumi.BoolOutput)
}

// Provides Git-related persistence settings for a version-controlled project.
func (o ProjectOutput) GitAnonymousPersistenceSettings() ProjectGitAnonymousPersistenceSettingArrayOutput {
	return o.ApplyT(func(v *Project) ProjectGitAnonymousPersistenceSettingArrayOutput {
		return v.GitAnonymousPersistenceSettings
	}).(ProjectGitAnonymousPersistenceSettingArrayOutput)
}

// Provides Git-related persistence settings for a version-controlled project.
func (o ProjectOutput) GitLibraryPersistenceSettings() ProjectGitLibraryPersistenceSettingArrayOutput {
	return o.ApplyT(func(v *Project) ProjectGitLibraryPersistenceSettingArrayOutput {
		return v.GitLibraryPersistenceSettings
	}).(ProjectGitLibraryPersistenceSettingArrayOutput)
}

// Provides Git-related persistence settings for a version-controlled project.
func (o ProjectOutput) GitUsernamePasswordPersistenceSettings() ProjectGitUsernamePasswordPersistenceSettingArrayOutput {
	return o.ApplyT(func(v *Project) ProjectGitUsernamePasswordPersistenceSettingArrayOutput {
		return v.GitUsernamePasswordPersistenceSettings
	}).(ProjectGitUsernamePasswordPersistenceSettingArrayOutput)
}

// The list of included library variable set IDs.
func (o ProjectOutput) IncludedLibraryVariableSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.IncludedLibraryVariableSets }).(pulumi.StringArrayOutput)
}

func (o ProjectOutput) IsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.IsDisabled }).(pulumi.BoolOutput)
}

// Treats releases of different channels to the same environment as a separate deployment dimension
func (o ProjectOutput) IsDiscreteChannelRelease() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.IsDiscreteChannelRelease }).(pulumi.BoolOutput)
}

func (o ProjectOutput) IsVersionControlled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolOutput { return v.IsVersionControlled }).(pulumi.BoolOutput)
}

// Provides extension settings for the Jira Service Management (JSM) integration for this project.
func (o ProjectOutput) JiraServiceManagementExtensionSettings() ProjectJiraServiceManagementExtensionSettingArrayOutput {
	return o.ApplyT(func(v *Project) ProjectJiraServiceManagementExtensionSettingArrayOutput {
		return v.JiraServiceManagementExtensionSettings
	}).(ProjectJiraServiceManagementExtensionSettingArrayOutput)
}

// The lifecycle ID associated with this project.
func (o ProjectOutput) LifecycleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.LifecycleId }).(pulumi.StringOutput)
}

// The name of this resource.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project group ID associated with this project.
func (o ProjectOutput) ProjectGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProjectGroupId }).(pulumi.StringOutput)
}

func (o ProjectOutput) ReleaseCreationStrategies() ProjectReleaseCreationStrategyArrayOutput {
	return o.ApplyT(func(v *Project) ProjectReleaseCreationStrategyArrayOutput { return v.ReleaseCreationStrategies }).(ProjectReleaseCreationStrategyArrayOutput)
}

func (o ProjectOutput) ReleaseNotesTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ReleaseNotesTemplate }).(pulumi.StringOutput)
}

// Provides extension settings for the ServiceNow integration for this project.
func (o ProjectOutput) ServicenowExtensionSettings() ProjectServicenowExtensionSettingArrayOutput {
	return o.ApplyT(func(v *Project) ProjectServicenowExtensionSettingArrayOutput { return v.ServicenowExtensionSettings }).(ProjectServicenowExtensionSettingArrayOutput)
}

// A human-readable, unique identifier, used to identify a project.
func (o ProjectOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The space ID associated with this project.
func (o ProjectOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.SpaceId }).(pulumi.StringOutput)
}

func (o ProjectOutput) Templates() ProjectTemplateArrayOutput {
	return o.ApplyT(func(v *Project) ProjectTemplateArrayOutput { return v.Templates }).(ProjectTemplateArrayOutput)
}

// The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
func (o ProjectOutput) TenantedDeploymentParticipation() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.TenantedDeploymentParticipation }).(pulumi.StringOutput)
}

func (o ProjectOutput) VariableSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.VariableSetId }).(pulumi.StringOutput)
}

func (o ProjectOutput) VersioningStrategies() ProjectVersioningStrategyArrayOutput {
	return o.ApplyT(func(v *Project) ProjectVersioningStrategyArrayOutput { return v.VersioningStrategies }).(ProjectVersioningStrategyArrayOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
