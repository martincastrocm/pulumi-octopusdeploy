// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A unique polling subscription ID that can be used by polling tentacles.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.NewPollingSubscriptionId(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			exampleWithDependencies, err := octopusdeploy.NewPollingSubscriptionId(ctx, "exampleWithDependencies", &octopusdeploy.PollingSubscriptionIdArgs{
//				Dependencies: pulumi.Map{
//					"target": pulumi.Any(octopusdeploy_kubernetes_agent_deployment_target.Example.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Usage
//			_, err = octopusdeploy.NewKubernetesAgentDeploymentTarget(ctx, "agent", &octopusdeploy.KubernetesAgentDeploymentTargetArgs{
//				Environments: pulumi.StringArray{
//					pulumi.String("environments-1"),
//				},
//				Roles: pulumi.StringArray{
//					pulumi.String("role-1"),
//					pulumi.String("role-2"),
//				},
//				Thumbprint: pulumi.String("96203ED84246201C26A2F4360D7CBC36AC1D232D"),
//				Uri:        exampleWithDependencies.PollingUri,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type PollingSubscriptionId struct {
	pulumi.CustomResourceState

	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies pulumi.MapOutput `pulumi:"dependencies"`
	// The URI of the polling subscription ID.
	PollingUri pulumi.StringOutput `pulumi:"pollingUri"`
}

// NewPollingSubscriptionId registers a new resource with the given unique name, arguments, and options.
func NewPollingSubscriptionId(ctx *pulumi.Context,
	name string, args *PollingSubscriptionIdArgs, opts ...pulumi.ResourceOption) (*PollingSubscriptionId, error) {
	if args == nil {
		args = &PollingSubscriptionIdArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PollingSubscriptionId
	err := ctx.RegisterResource("octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPollingSubscriptionId gets an existing PollingSubscriptionId resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPollingSubscriptionId(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PollingSubscriptionIdState, opts ...pulumi.ResourceOption) (*PollingSubscriptionId, error) {
	var resource PollingSubscriptionId
	err := ctx.ReadResource("octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PollingSubscriptionId resources.
type pollingSubscriptionIdState struct {
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies map[string]interface{} `pulumi:"dependencies"`
	// The URI of the polling subscription ID.
	PollingUri *string `pulumi:"pollingUri"`
}

type PollingSubscriptionIdState struct {
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies pulumi.MapInput
	// The URI of the polling subscription ID.
	PollingUri pulumi.StringPtrInput
}

func (PollingSubscriptionIdState) ElementType() reflect.Type {
	return reflect.TypeOf((*pollingSubscriptionIdState)(nil)).Elem()
}

type pollingSubscriptionIdArgs struct {
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies map[string]interface{} `pulumi:"dependencies"`
}

// The set of arguments for constructing a PollingSubscriptionId resource.
type PollingSubscriptionIdArgs struct {
	// Optional map of dependencies that when modified will trigger a re-creation of this resource.
	Dependencies pulumi.MapInput
}

func (PollingSubscriptionIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pollingSubscriptionIdArgs)(nil)).Elem()
}

type PollingSubscriptionIdInput interface {
	pulumi.Input

	ToPollingSubscriptionIdOutput() PollingSubscriptionIdOutput
	ToPollingSubscriptionIdOutputWithContext(ctx context.Context) PollingSubscriptionIdOutput
}

func (*PollingSubscriptionId) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSubscriptionId)(nil)).Elem()
}

func (i *PollingSubscriptionId) ToPollingSubscriptionIdOutput() PollingSubscriptionIdOutput {
	return i.ToPollingSubscriptionIdOutputWithContext(context.Background())
}

func (i *PollingSubscriptionId) ToPollingSubscriptionIdOutputWithContext(ctx context.Context) PollingSubscriptionIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSubscriptionIdOutput)
}

// PollingSubscriptionIdArrayInput is an input type that accepts PollingSubscriptionIdArray and PollingSubscriptionIdArrayOutput values.
// You can construct a concrete instance of `PollingSubscriptionIdArrayInput` via:
//
//	PollingSubscriptionIdArray{ PollingSubscriptionIdArgs{...} }
type PollingSubscriptionIdArrayInput interface {
	pulumi.Input

	ToPollingSubscriptionIdArrayOutput() PollingSubscriptionIdArrayOutput
	ToPollingSubscriptionIdArrayOutputWithContext(context.Context) PollingSubscriptionIdArrayOutput
}

type PollingSubscriptionIdArray []PollingSubscriptionIdInput

func (PollingSubscriptionIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PollingSubscriptionId)(nil)).Elem()
}

func (i PollingSubscriptionIdArray) ToPollingSubscriptionIdArrayOutput() PollingSubscriptionIdArrayOutput {
	return i.ToPollingSubscriptionIdArrayOutputWithContext(context.Background())
}

func (i PollingSubscriptionIdArray) ToPollingSubscriptionIdArrayOutputWithContext(ctx context.Context) PollingSubscriptionIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSubscriptionIdArrayOutput)
}

// PollingSubscriptionIdMapInput is an input type that accepts PollingSubscriptionIdMap and PollingSubscriptionIdMapOutput values.
// You can construct a concrete instance of `PollingSubscriptionIdMapInput` via:
//
//	PollingSubscriptionIdMap{ "key": PollingSubscriptionIdArgs{...} }
type PollingSubscriptionIdMapInput interface {
	pulumi.Input

	ToPollingSubscriptionIdMapOutput() PollingSubscriptionIdMapOutput
	ToPollingSubscriptionIdMapOutputWithContext(context.Context) PollingSubscriptionIdMapOutput
}

type PollingSubscriptionIdMap map[string]PollingSubscriptionIdInput

func (PollingSubscriptionIdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PollingSubscriptionId)(nil)).Elem()
}

func (i PollingSubscriptionIdMap) ToPollingSubscriptionIdMapOutput() PollingSubscriptionIdMapOutput {
	return i.ToPollingSubscriptionIdMapOutputWithContext(context.Background())
}

func (i PollingSubscriptionIdMap) ToPollingSubscriptionIdMapOutputWithContext(ctx context.Context) PollingSubscriptionIdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSubscriptionIdMapOutput)
}

type PollingSubscriptionIdOutput struct{ *pulumi.OutputState }

func (PollingSubscriptionIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSubscriptionId)(nil)).Elem()
}

func (o PollingSubscriptionIdOutput) ToPollingSubscriptionIdOutput() PollingSubscriptionIdOutput {
	return o
}

func (o PollingSubscriptionIdOutput) ToPollingSubscriptionIdOutputWithContext(ctx context.Context) PollingSubscriptionIdOutput {
	return o
}

// Optional map of dependencies that when modified will trigger a re-creation of this resource.
func (o PollingSubscriptionIdOutput) Dependencies() pulumi.MapOutput {
	return o.ApplyT(func(v *PollingSubscriptionId) pulumi.MapOutput { return v.Dependencies }).(pulumi.MapOutput)
}

// The URI of the polling subscription ID.
func (o PollingSubscriptionIdOutput) PollingUri() pulumi.StringOutput {
	return o.ApplyT(func(v *PollingSubscriptionId) pulumi.StringOutput { return v.PollingUri }).(pulumi.StringOutput)
}

type PollingSubscriptionIdArrayOutput struct{ *pulumi.OutputState }

func (PollingSubscriptionIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PollingSubscriptionId)(nil)).Elem()
}

func (o PollingSubscriptionIdArrayOutput) ToPollingSubscriptionIdArrayOutput() PollingSubscriptionIdArrayOutput {
	return o
}

func (o PollingSubscriptionIdArrayOutput) ToPollingSubscriptionIdArrayOutputWithContext(ctx context.Context) PollingSubscriptionIdArrayOutput {
	return o
}

func (o PollingSubscriptionIdArrayOutput) Index(i pulumi.IntInput) PollingSubscriptionIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PollingSubscriptionId {
		return vs[0].([]*PollingSubscriptionId)[vs[1].(int)]
	}).(PollingSubscriptionIdOutput)
}

type PollingSubscriptionIdMapOutput struct{ *pulumi.OutputState }

func (PollingSubscriptionIdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PollingSubscriptionId)(nil)).Elem()
}

func (o PollingSubscriptionIdMapOutput) ToPollingSubscriptionIdMapOutput() PollingSubscriptionIdMapOutput {
	return o
}

func (o PollingSubscriptionIdMapOutput) ToPollingSubscriptionIdMapOutputWithContext(ctx context.Context) PollingSubscriptionIdMapOutput {
	return o
}

func (o PollingSubscriptionIdMapOutput) MapIndex(k pulumi.StringInput) PollingSubscriptionIdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PollingSubscriptionId {
		return vs[0].(map[string]*PollingSubscriptionId)[vs[1].(string)]
	}).(PollingSubscriptionIdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSubscriptionIdInput)(nil)).Elem(), &PollingSubscriptionId{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSubscriptionIdArrayInput)(nil)).Elem(), PollingSubscriptionIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSubscriptionIdMapInput)(nil)).Elem(), PollingSubscriptionIdMap{})
	pulumi.RegisterOutputType(PollingSubscriptionIdOutput{})
	pulumi.RegisterOutputType(PollingSubscriptionIdArrayOutput{})
	pulumi.RegisterOutputType(PollingSubscriptionIdMapOutput{})
}
