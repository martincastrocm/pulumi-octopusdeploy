// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about existing variables.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.GetVariables(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVariables(ctx *pulumi.Context, args *GetVariablesArgs, opts ...pulumi.InvokeOption) (*GetVariablesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVariablesResult
	err := ctx.Invoke("octopusdeploy:index/getVariables:getVariables", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVariables.
type GetVariablesArgs struct {
	// The name of variable to find.
	Name string `pulumi:"name"`
	// Owner ID for the variable to find.
	OwnerId string `pulumi:"ownerId"`
	// As variable names can appear more than once under different scopes, a VariableScope must also be provided
	Scopes []GetVariablesScope `pulumi:"scopes"`
	// The space ID associated with this variable.
	SpaceId *string `pulumi:"spaceId"`
}

// A collection of values returned by getVariables.
type GetVariablesResult struct {
	// The description of this variable.
	Description string `pulumi:"description"`
	// The identifier of the variable to find.
	Id string `pulumi:"id"`
	// Indicates whether or not this variable is considered editable.
	IsEditable bool `pulumi:"isEditable"`
	// Indicates whether or not this resource is considered sensitive and should be kept secret.
	IsSensitive bool `pulumi:"isSensitive"`
	// The name of variable to find.
	Name string `pulumi:"name"`
	// Owner ID for the variable to find.
	OwnerId string               `pulumi:"ownerId"`
	Prompts []GetVariablesPrompt `pulumi:"prompts"`
	// As variable names can appear more than once under different scopes, a VariableScope must also be provided
	Scopes         []GetVariablesScope `pulumi:"scopes"`
	SensitiveValue string              `pulumi:"sensitiveValue"`
	// The space ID associated with this variable.
	SpaceId string `pulumi:"spaceId"`
	// The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `UsernamePasswordAccount`, `Certificate`, `Sensitive`, `String`, `WorkerPool`.
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

func GetVariablesOutput(ctx *pulumi.Context, args GetVariablesOutputArgs, opts ...pulumi.InvokeOption) GetVariablesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVariablesResultOutput, error) {
			args := v.(GetVariablesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetVariablesResult
			secret, err := ctx.InvokePackageRaw("octopusdeploy:index/getVariables:getVariables", args, &rv, "", opts...)
			if err != nil {
				return GetVariablesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetVariablesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetVariablesResultOutput), nil
			}
			return output, nil
		}).(GetVariablesResultOutput)
}

// A collection of arguments for invoking getVariables.
type GetVariablesOutputArgs struct {
	// The name of variable to find.
	Name pulumi.StringInput `pulumi:"name"`
	// Owner ID for the variable to find.
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
	// As variable names can appear more than once under different scopes, a VariableScope must also be provided
	Scopes GetVariablesScopeArrayInput `pulumi:"scopes"`
	// The space ID associated with this variable.
	SpaceId pulumi.StringPtrInput `pulumi:"spaceId"`
}

func (GetVariablesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVariablesArgs)(nil)).Elem()
}

// A collection of values returned by getVariables.
type GetVariablesResultOutput struct{ *pulumi.OutputState }

func (GetVariablesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVariablesResult)(nil)).Elem()
}

func (o GetVariablesResultOutput) ToGetVariablesResultOutput() GetVariablesResultOutput {
	return o
}

func (o GetVariablesResultOutput) ToGetVariablesResultOutputWithContext(ctx context.Context) GetVariablesResultOutput {
	return o
}

// The description of this variable.
func (o GetVariablesResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.Description }).(pulumi.StringOutput)
}

// The identifier of the variable to find.
func (o GetVariablesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates whether or not this variable is considered editable.
func (o GetVariablesResultOutput) IsEditable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVariablesResult) bool { return v.IsEditable }).(pulumi.BoolOutput)
}

// Indicates whether or not this resource is considered sensitive and should be kept secret.
func (o GetVariablesResultOutput) IsSensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVariablesResult) bool { return v.IsSensitive }).(pulumi.BoolOutput)
}

// The name of variable to find.
func (o GetVariablesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.Name }).(pulumi.StringOutput)
}

// Owner ID for the variable to find.
func (o GetVariablesResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

func (o GetVariablesResultOutput) Prompts() GetVariablesPromptArrayOutput {
	return o.ApplyT(func(v GetVariablesResult) []GetVariablesPrompt { return v.Prompts }).(GetVariablesPromptArrayOutput)
}

// As variable names can appear more than once under different scopes, a VariableScope must also be provided
func (o GetVariablesResultOutput) Scopes() GetVariablesScopeArrayOutput {
	return o.ApplyT(func(v GetVariablesResult) []GetVariablesScope { return v.Scopes }).(GetVariablesScopeArrayOutput)
}

func (o GetVariablesResultOutput) SensitiveValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.SensitiveValue }).(pulumi.StringOutput)
}

// The space ID associated with this variable.
func (o GetVariablesResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `UsernamePasswordAccount`, `Certificate`, `Sensitive`, `String`, `WorkerPool`.
func (o GetVariablesResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetVariablesResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVariablesResult) string { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVariablesResultOutput{})
}
