// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package octopusdeploy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about existing feeds.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-octopus/sdk/go/octopusdeploy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := octopusdeploy.GetFeeds(ctx, &octopusdeploy.GetFeedsArgs{
//				FeedType: pulumi.StringRef("NuGet"),
//				Ids: []string{
//					"Feeds-123",
//					"Feeds-321",
//				},
//				PartialName: pulumi.StringRef("Develop"),
//				Skip:        pulumi.IntRef(5),
//				Take:        pulumi.IntRef(100),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFeeds(ctx *pulumi.Context, args *GetFeedsArgs, opts ...pulumi.InvokeOption) (*GetFeedsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFeedsResult
	err := ctx.Invoke("octopusdeploy:index/getFeeds:getFeeds", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFeeds.
type GetFeedsArgs struct {
	// A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
	FeedType *string `pulumi:"feedType"`
	// A filter to search by a list of IDs.
	Ids []string `pulumi:"ids"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// A filter to search by a partial name.
	PartialName *string `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this feeds.
	SpaceId *string `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

// A collection of values returned by getFeeds.
type GetFeedsResult struct {
	// A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
	FeedType *string        `pulumi:"feedType"`
	Feeds    []GetFeedsFeed `pulumi:"feeds"`
	// The unique ID for this resource.
	Id string `pulumi:"id"`
	// A filter to search by a list of IDs.
	Ids []string `pulumi:"ids"`
	// The name of this resource.
	Name *string `pulumi:"name"`
	// A filter to search by a partial name.
	PartialName *string `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip *int `pulumi:"skip"`
	// The space ID associated with this feeds.
	SpaceId string `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take *int `pulumi:"take"`
}

func GetFeedsOutput(ctx *pulumi.Context, args GetFeedsOutputArgs, opts ...pulumi.InvokeOption) GetFeedsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFeedsResultOutput, error) {
			args := v.(GetFeedsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetFeedsResult
			secret, err := ctx.InvokePackageRaw("octopusdeploy:index/getFeeds:getFeeds", args, &rv, "", opts...)
			if err != nil {
				return GetFeedsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetFeedsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetFeedsResultOutput), nil
			}
			return output, nil
		}).(GetFeedsResultOutput)
}

// A collection of arguments for invoking getFeeds.
type GetFeedsOutputArgs struct {
	// A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
	FeedType pulumi.StringPtrInput `pulumi:"feedType"`
	// A filter to search by a list of IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of this resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A filter to search by a partial name.
	PartialName pulumi.StringPtrInput `pulumi:"partialName"`
	// A filter to specify the number of items to skip in the response.
	Skip pulumi.IntPtrInput `pulumi:"skip"`
	// The space ID associated with this feeds.
	SpaceId pulumi.StringPtrInput `pulumi:"spaceId"`
	// A filter to specify the number of items to take (or return) in the response.
	Take pulumi.IntPtrInput `pulumi:"take"`
}

func (GetFeedsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeedsArgs)(nil)).Elem()
}

// A collection of values returned by getFeeds.
type GetFeedsResultOutput struct{ *pulumi.OutputState }

func (GetFeedsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeedsResult)(nil)).Elem()
}

func (o GetFeedsResultOutput) ToGetFeedsResultOutput() GetFeedsResultOutput {
	return o
}

func (o GetFeedsResultOutput) ToGetFeedsResultOutputWithContext(ctx context.Context) GetFeedsResultOutput {
	return o
}

// A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
func (o GetFeedsResultOutput) FeedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeedsResult) *string { return v.FeedType }).(pulumi.StringPtrOutput)
}

func (o GetFeedsResultOutput) Feeds() GetFeedsFeedArrayOutput {
	return o.ApplyT(func(v GetFeedsResult) []GetFeedsFeed { return v.Feeds }).(GetFeedsFeedArrayOutput)
}

// The unique ID for this resource.
func (o GetFeedsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeedsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A filter to search by a list of IDs.
func (o GetFeedsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFeedsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of this resource.
func (o GetFeedsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeedsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A filter to search by a partial name.
func (o GetFeedsResultOutput) PartialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeedsResult) *string { return v.PartialName }).(pulumi.StringPtrOutput)
}

// A filter to specify the number of items to skip in the response.
func (o GetFeedsResultOutput) Skip() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFeedsResult) *int { return v.Skip }).(pulumi.IntPtrOutput)
}

// The space ID associated with this feeds.
func (o GetFeedsResultOutput) SpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeedsResult) string { return v.SpaceId }).(pulumi.StringOutput)
}

// A filter to specify the number of items to take (or return) in the response.
func (o GetFeedsResultOutput) Take() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFeedsResult) *int { return v.Take }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFeedsResultOutput{})
}
