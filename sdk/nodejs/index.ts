// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsAccountArgs, AwsAccountState } from "./awsAccount";
export type AwsAccount = import("./awsAccount").AwsAccount;
export const AwsAccount: typeof import("./awsAccount").AwsAccount = null as any;
utilities.lazyLoad(exports, ["AwsAccount"], () => require("./awsAccount"));

export { AwsOpenidConnectAccountArgs, AwsOpenidConnectAccountState } from "./awsOpenidConnectAccount";
export type AwsOpenidConnectAccount = import("./awsOpenidConnectAccount").AwsOpenidConnectAccount;
export const AwsOpenidConnectAccount: typeof import("./awsOpenidConnectAccount").AwsOpenidConnectAccount = null as any;
utilities.lazyLoad(exports, ["AwsOpenidConnectAccount"], () => require("./awsOpenidConnectAccount"));

export { AzureCloudServiceDeploymentTargetArgs, AzureCloudServiceDeploymentTargetState } from "./azureCloudServiceDeploymentTarget";
export type AzureCloudServiceDeploymentTarget = import("./azureCloudServiceDeploymentTarget").AzureCloudServiceDeploymentTarget;
export const AzureCloudServiceDeploymentTarget: typeof import("./azureCloudServiceDeploymentTarget").AzureCloudServiceDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["AzureCloudServiceDeploymentTarget"], () => require("./azureCloudServiceDeploymentTarget"));

export { AzureOpenidConnectArgs, AzureOpenidConnectState } from "./azureOpenidConnect";
export type AzureOpenidConnect = import("./azureOpenidConnect").AzureOpenidConnect;
export const AzureOpenidConnect: typeof import("./azureOpenidConnect").AzureOpenidConnect = null as any;
utilities.lazyLoad(exports, ["AzureOpenidConnect"], () => require("./azureOpenidConnect"));

export { AzureServiceFabricClusterDeploymentTargetArgs, AzureServiceFabricClusterDeploymentTargetState } from "./azureServiceFabricClusterDeploymentTarget";
export type AzureServiceFabricClusterDeploymentTarget = import("./azureServiceFabricClusterDeploymentTarget").AzureServiceFabricClusterDeploymentTarget;
export const AzureServiceFabricClusterDeploymentTarget: typeof import("./azureServiceFabricClusterDeploymentTarget").AzureServiceFabricClusterDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["AzureServiceFabricClusterDeploymentTarget"], () => require("./azureServiceFabricClusterDeploymentTarget"));

export { AzureServicePrincipalArgs, AzureServicePrincipalState } from "./azureServicePrincipal";
export type AzureServicePrincipal = import("./azureServicePrincipal").AzureServicePrincipal;
export const AzureServicePrincipal: typeof import("./azureServicePrincipal").AzureServicePrincipal = null as any;
utilities.lazyLoad(exports, ["AzureServicePrincipal"], () => require("./azureServicePrincipal"));

export { AzureSubscriptionAccountArgs, AzureSubscriptionAccountState } from "./azureSubscriptionAccount";
export type AzureSubscriptionAccount = import("./azureSubscriptionAccount").AzureSubscriptionAccount;
export const AzureSubscriptionAccount: typeof import("./azureSubscriptionAccount").AzureSubscriptionAccount = null as any;
utilities.lazyLoad(exports, ["AzureSubscriptionAccount"], () => require("./azureSubscriptionAccount"));

export { AzureWebAppDeploymentTargetArgs, AzureWebAppDeploymentTargetState } from "./azureWebAppDeploymentTarget";
export type AzureWebAppDeploymentTarget = import("./azureWebAppDeploymentTarget").AzureWebAppDeploymentTarget;
export const AzureWebAppDeploymentTarget: typeof import("./azureWebAppDeploymentTarget").AzureWebAppDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["AzureWebAppDeploymentTarget"], () => require("./azureWebAppDeploymentTarget"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { ChannelArgs, ChannelState } from "./channel";
export type Channel = import("./channel").Channel;
export const Channel: typeof import("./channel").Channel = null as any;
utilities.lazyLoad(exports, ["Channel"], () => require("./channel"));

export { CloudRegionDeploymentTargetArgs, CloudRegionDeploymentTargetState } from "./cloudRegionDeploymentTarget";
export type CloudRegionDeploymentTarget = import("./cloudRegionDeploymentTarget").CloudRegionDeploymentTarget;
export const CloudRegionDeploymentTarget: typeof import("./cloudRegionDeploymentTarget").CloudRegionDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["CloudRegionDeploymentTarget"], () => require("./cloudRegionDeploymentTarget"));

export { DeploymentProcessArgs, DeploymentProcessState } from "./deploymentProcess";
export type DeploymentProcess = import("./deploymentProcess").DeploymentProcess;
export const DeploymentProcess: typeof import("./deploymentProcess").DeploymentProcess = null as any;
utilities.lazyLoad(exports, ["DeploymentProcess"], () => require("./deploymentProcess"));

export { DynamicWorkerPoolArgs, DynamicWorkerPoolState } from "./dynamicWorkerPool";
export type DynamicWorkerPool = import("./dynamicWorkerPool").DynamicWorkerPool;
export const DynamicWorkerPool: typeof import("./dynamicWorkerPool").DynamicWorkerPool = null as any;
utilities.lazyLoad(exports, ["DynamicWorkerPool"], () => require("./dynamicWorkerPool"));

export { ExternalFeedCreateReleaseTriggerArgs, ExternalFeedCreateReleaseTriggerState } from "./externalFeedCreateReleaseTrigger";
export type ExternalFeedCreateReleaseTrigger = import("./externalFeedCreateReleaseTrigger").ExternalFeedCreateReleaseTrigger;
export const ExternalFeedCreateReleaseTrigger: typeof import("./externalFeedCreateReleaseTrigger").ExternalFeedCreateReleaseTrigger = null as any;
utilities.lazyLoad(exports, ["ExternalFeedCreateReleaseTrigger"], () => require("./externalFeedCreateReleaseTrigger"));

export { GcpAccountArgs, GcpAccountState } from "./gcpAccount";
export type GcpAccount = import("./gcpAccount").GcpAccount;
export const GcpAccount: typeof import("./gcpAccount").GcpAccount = null as any;
utilities.lazyLoad(exports, ["GcpAccount"], () => require("./gcpAccount"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetAzureCloudServiceDeploymentTargetsArgs, GetAzureCloudServiceDeploymentTargetsResult, GetAzureCloudServiceDeploymentTargetsOutputArgs } from "./getAzureCloudServiceDeploymentTargets";
export const getAzureCloudServiceDeploymentTargets: typeof import("./getAzureCloudServiceDeploymentTargets").getAzureCloudServiceDeploymentTargets = null as any;
export const getAzureCloudServiceDeploymentTargetsOutput: typeof import("./getAzureCloudServiceDeploymentTargets").getAzureCloudServiceDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getAzureCloudServiceDeploymentTargets","getAzureCloudServiceDeploymentTargetsOutput"], () => require("./getAzureCloudServiceDeploymentTargets"));

export { GetAzureServiceFabricClusterDeploymentTargetsArgs, GetAzureServiceFabricClusterDeploymentTargetsResult, GetAzureServiceFabricClusterDeploymentTargetsOutputArgs } from "./getAzureServiceFabricClusterDeploymentTargets";
export const getAzureServiceFabricClusterDeploymentTargets: typeof import("./getAzureServiceFabricClusterDeploymentTargets").getAzureServiceFabricClusterDeploymentTargets = null as any;
export const getAzureServiceFabricClusterDeploymentTargetsOutput: typeof import("./getAzureServiceFabricClusterDeploymentTargets").getAzureServiceFabricClusterDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getAzureServiceFabricClusterDeploymentTargets","getAzureServiceFabricClusterDeploymentTargetsOutput"], () => require("./getAzureServiceFabricClusterDeploymentTargets"));

export { GetAzureWebAppDeploymentTargetsArgs, GetAzureWebAppDeploymentTargetsResult, GetAzureWebAppDeploymentTargetsOutputArgs } from "./getAzureWebAppDeploymentTargets";
export const getAzureWebAppDeploymentTargets: typeof import("./getAzureWebAppDeploymentTargets").getAzureWebAppDeploymentTargets = null as any;
export const getAzureWebAppDeploymentTargetsOutput: typeof import("./getAzureWebAppDeploymentTargets").getAzureWebAppDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getAzureWebAppDeploymentTargets","getAzureWebAppDeploymentTargetsOutput"], () => require("./getAzureWebAppDeploymentTargets"));

export { GetCertificatesArgs, GetCertificatesResult, GetCertificatesOutputArgs } from "./getCertificates";
export const getCertificates: typeof import("./getCertificates").getCertificates = null as any;
export const getCertificatesOutput: typeof import("./getCertificates").getCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificates","getCertificatesOutput"], () => require("./getCertificates"));

export { GetChannelsArgs, GetChannelsResult, GetChannelsOutputArgs } from "./getChannels";
export const getChannels: typeof import("./getChannels").getChannels = null as any;
export const getChannelsOutput: typeof import("./getChannels").getChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getChannels","getChannelsOutput"], () => require("./getChannels"));

export { GetCloudRegionDeploymentTargetsArgs, GetCloudRegionDeploymentTargetsResult, GetCloudRegionDeploymentTargetsOutputArgs } from "./getCloudRegionDeploymentTargets";
export const getCloudRegionDeploymentTargets: typeof import("./getCloudRegionDeploymentTargets").getCloudRegionDeploymentTargets = null as any;
export const getCloudRegionDeploymentTargetsOutput: typeof import("./getCloudRegionDeploymentTargets").getCloudRegionDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRegionDeploymentTargets","getCloudRegionDeploymentTargetsOutput"], () => require("./getCloudRegionDeploymentTargets"));

export { GetDeploymentTargetsArgs, GetDeploymentTargetsResult, GetDeploymentTargetsOutputArgs } from "./getDeploymentTargets";
export const getDeploymentTargets: typeof import("./getDeploymentTargets").getDeploymentTargets = null as any;
export const getDeploymentTargetsOutput: typeof import("./getDeploymentTargets").getDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getDeploymentTargets","getDeploymentTargetsOutput"], () => require("./getDeploymentTargets"));

export { GetKubernetesAgentDeploymentTargetsArgs, GetKubernetesAgentDeploymentTargetsResult, GetKubernetesAgentDeploymentTargetsOutputArgs } from "./getKubernetesAgentDeploymentTargets";
export const getKubernetesAgentDeploymentTargets: typeof import("./getKubernetesAgentDeploymentTargets").getKubernetesAgentDeploymentTargets = null as any;
export const getKubernetesAgentDeploymentTargetsOutput: typeof import("./getKubernetesAgentDeploymentTargets").getKubernetesAgentDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAgentDeploymentTargets","getKubernetesAgentDeploymentTargetsOutput"], () => require("./getKubernetesAgentDeploymentTargets"));

export { GetKubernetesAgentWorkersArgs, GetKubernetesAgentWorkersResult, GetKubernetesAgentWorkersOutputArgs } from "./getKubernetesAgentWorkers";
export const getKubernetesAgentWorkers: typeof import("./getKubernetesAgentWorkers").getKubernetesAgentWorkers = null as any;
export const getKubernetesAgentWorkersOutput: typeof import("./getKubernetesAgentWorkers").getKubernetesAgentWorkersOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAgentWorkers","getKubernetesAgentWorkersOutput"], () => require("./getKubernetesAgentWorkers"));

export { GetKubernetesClusterDeploymentTargetsArgs, GetKubernetesClusterDeploymentTargetsResult, GetKubernetesClusterDeploymentTargetsOutputArgs } from "./getKubernetesClusterDeploymentTargets";
export const getKubernetesClusterDeploymentTargets: typeof import("./getKubernetesClusterDeploymentTargets").getKubernetesClusterDeploymentTargets = null as any;
export const getKubernetesClusterDeploymentTargetsOutput: typeof import("./getKubernetesClusterDeploymentTargets").getKubernetesClusterDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterDeploymentTargets","getKubernetesClusterDeploymentTargetsOutput"], () => require("./getKubernetesClusterDeploymentTargets"));

export { GetListeningTentacleDeploymentTargetsArgs, GetListeningTentacleDeploymentTargetsResult, GetListeningTentacleDeploymentTargetsOutputArgs } from "./getListeningTentacleDeploymentTargets";
export const getListeningTentacleDeploymentTargets: typeof import("./getListeningTentacleDeploymentTargets").getListeningTentacleDeploymentTargets = null as any;
export const getListeningTentacleDeploymentTargetsOutput: typeof import("./getListeningTentacleDeploymentTargets").getListeningTentacleDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getListeningTentacleDeploymentTargets","getListeningTentacleDeploymentTargetsOutput"], () => require("./getListeningTentacleDeploymentTargets"));

export { GetMachineArgs, GetMachineResult, GetMachineOutputArgs } from "./getMachine";
export const getMachine: typeof import("./getMachine").getMachine = null as any;
export const getMachineOutput: typeof import("./getMachine").getMachineOutput = null as any;
utilities.lazyLoad(exports, ["getMachine","getMachineOutput"], () => require("./getMachine"));

export { GetMachinePoliciesArgs, GetMachinePoliciesResult, GetMachinePoliciesOutputArgs } from "./getMachinePolicies";
export const getMachinePolicies: typeof import("./getMachinePolicies").getMachinePolicies = null as any;
export const getMachinePoliciesOutput: typeof import("./getMachinePolicies").getMachinePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getMachinePolicies","getMachinePoliciesOutput"], () => require("./getMachinePolicies"));

export { GetOfflinePackageDropDeploymentTargetsArgs, GetOfflinePackageDropDeploymentTargetsResult, GetOfflinePackageDropDeploymentTargetsOutputArgs } from "./getOfflinePackageDropDeploymentTargets";
export const getOfflinePackageDropDeploymentTargets: typeof import("./getOfflinePackageDropDeploymentTargets").getOfflinePackageDropDeploymentTargets = null as any;
export const getOfflinePackageDropDeploymentTargetsOutput: typeof import("./getOfflinePackageDropDeploymentTargets").getOfflinePackageDropDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getOfflinePackageDropDeploymentTargets","getOfflinePackageDropDeploymentTargetsOutput"], () => require("./getOfflinePackageDropDeploymentTargets"));

export { GetPollingTentacleDeploymentTargetsArgs, GetPollingTentacleDeploymentTargetsResult, GetPollingTentacleDeploymentTargetsOutputArgs } from "./getPollingTentacleDeploymentTargets";
export const getPollingTentacleDeploymentTargets: typeof import("./getPollingTentacleDeploymentTargets").getPollingTentacleDeploymentTargets = null as any;
export const getPollingTentacleDeploymentTargetsOutput: typeof import("./getPollingTentacleDeploymentTargets").getPollingTentacleDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getPollingTentacleDeploymentTargets","getPollingTentacleDeploymentTargetsOutput"], () => require("./getPollingTentacleDeploymentTargets"));

export { GetSshConnectionDeploymentTargetsArgs, GetSshConnectionDeploymentTargetsResult, GetSshConnectionDeploymentTargetsOutputArgs } from "./getSshConnectionDeploymentTargets";
export const getSshConnectionDeploymentTargets: typeof import("./getSshConnectionDeploymentTargets").getSshConnectionDeploymentTargets = null as any;
export const getSshConnectionDeploymentTargetsOutput: typeof import("./getSshConnectionDeploymentTargets").getSshConnectionDeploymentTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getSshConnectionDeploymentTargets","getSshConnectionDeploymentTargetsOutput"], () => require("./getSshConnectionDeploymentTargets"));

export { GetTeamsArgs, GetTeamsResult, GetTeamsOutputArgs } from "./getTeams";
export const getTeams: typeof import("./getTeams").getTeams = null as any;
export const getTeamsOutput: typeof import("./getTeams").getTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getTeams","getTeamsOutput"], () => require("./getTeams"));

export { GetUserRolesArgs, GetUserRolesResult, GetUserRolesOutputArgs } from "./getUserRoles";
export const getUserRoles: typeof import("./getUserRoles").getUserRoles = null as any;
export const getUserRolesOutput: typeof import("./getUserRoles").getUserRolesOutput = null as any;
utilities.lazyLoad(exports, ["getUserRoles","getUserRolesOutput"], () => require("./getUserRoles"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetWorkerPoolsArgs, GetWorkerPoolsResult, GetWorkerPoolsOutputArgs } from "./getWorkerPools";
export const getWorkerPools: typeof import("./getWorkerPools").getWorkerPools = null as any;
export const getWorkerPoolsOutput: typeof import("./getWorkerPools").getWorkerPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkerPools","getWorkerPoolsOutput"], () => require("./getWorkerPools"));

export { KubernetesAgentDeploymentTargetArgs, KubernetesAgentDeploymentTargetState } from "./kubernetesAgentDeploymentTarget";
export type KubernetesAgentDeploymentTarget = import("./kubernetesAgentDeploymentTarget").KubernetesAgentDeploymentTarget;
export const KubernetesAgentDeploymentTarget: typeof import("./kubernetesAgentDeploymentTarget").KubernetesAgentDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["KubernetesAgentDeploymentTarget"], () => require("./kubernetesAgentDeploymentTarget"));

export { KubernetesAgentWorkerArgs, KubernetesAgentWorkerState } from "./kubernetesAgentWorker";
export type KubernetesAgentWorker = import("./kubernetesAgentWorker").KubernetesAgentWorker;
export const KubernetesAgentWorker: typeof import("./kubernetesAgentWorker").KubernetesAgentWorker = null as any;
utilities.lazyLoad(exports, ["KubernetesAgentWorker"], () => require("./kubernetesAgentWorker"));

export { KubernetesClusterDeploymentTargetArgs, KubernetesClusterDeploymentTargetState } from "./kubernetesClusterDeploymentTarget";
export type KubernetesClusterDeploymentTarget = import("./kubernetesClusterDeploymentTarget").KubernetesClusterDeploymentTarget;
export const KubernetesClusterDeploymentTarget: typeof import("./kubernetesClusterDeploymentTarget").KubernetesClusterDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterDeploymentTarget"], () => require("./kubernetesClusterDeploymentTarget"));

export { ListeningTentacleDeploymentTargetArgs, ListeningTentacleDeploymentTargetState } from "./listeningTentacleDeploymentTarget";
export type ListeningTentacleDeploymentTarget = import("./listeningTentacleDeploymentTarget").ListeningTentacleDeploymentTarget;
export const ListeningTentacleDeploymentTarget: typeof import("./listeningTentacleDeploymentTarget").ListeningTentacleDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["ListeningTentacleDeploymentTarget"], () => require("./listeningTentacleDeploymentTarget"));

export { MachinePolicyArgs, MachinePolicyState } from "./machinePolicy";
export type MachinePolicy = import("./machinePolicy").MachinePolicy;
export const MachinePolicy: typeof import("./machinePolicy").MachinePolicy = null as any;
utilities.lazyLoad(exports, ["MachinePolicy"], () => require("./machinePolicy"));

export { OfflinePackageDropDeploymentTargetArgs, OfflinePackageDropDeploymentTargetState } from "./offlinePackageDropDeploymentTarget";
export type OfflinePackageDropDeploymentTarget = import("./offlinePackageDropDeploymentTarget").OfflinePackageDropDeploymentTarget;
export const OfflinePackageDropDeploymentTarget: typeof import("./offlinePackageDropDeploymentTarget").OfflinePackageDropDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["OfflinePackageDropDeploymentTarget"], () => require("./offlinePackageDropDeploymentTarget"));

export { PollingSubscriptionIdArgs, PollingSubscriptionIdState } from "./pollingSubscriptionId";
export type PollingSubscriptionId = import("./pollingSubscriptionId").PollingSubscriptionId;
export const PollingSubscriptionId: typeof import("./pollingSubscriptionId").PollingSubscriptionId = null as any;
utilities.lazyLoad(exports, ["PollingSubscriptionId"], () => require("./pollingSubscriptionId"));

export { PollingTentacleDeploymentTargetArgs, PollingTentacleDeploymentTargetState } from "./pollingTentacleDeploymentTarget";
export type PollingTentacleDeploymentTarget = import("./pollingTentacleDeploymentTarget").PollingTentacleDeploymentTarget;
export const PollingTentacleDeploymentTarget: typeof import("./pollingTentacleDeploymentTarget").PollingTentacleDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["PollingTentacleDeploymentTarget"], () => require("./pollingTentacleDeploymentTarget"));

export { ProjectDeploymentTargetTriggerArgs, ProjectDeploymentTargetTriggerState } from "./projectDeploymentTargetTrigger";
export type ProjectDeploymentTargetTrigger = import("./projectDeploymentTargetTrigger").ProjectDeploymentTargetTrigger;
export const ProjectDeploymentTargetTrigger: typeof import("./projectDeploymentTargetTrigger").ProjectDeploymentTargetTrigger = null as any;
utilities.lazyLoad(exports, ["ProjectDeploymentTargetTrigger"], () => require("./projectDeploymentTargetTrigger"));

export { ProjectScheduledTriggerArgs, ProjectScheduledTriggerState } from "./projectScheduledTrigger";
export type ProjectScheduledTrigger = import("./projectScheduledTrigger").ProjectScheduledTrigger;
export const ProjectScheduledTrigger: typeof import("./projectScheduledTrigger").ProjectScheduledTrigger = null as any;
utilities.lazyLoad(exports, ["ProjectScheduledTrigger"], () => require("./projectScheduledTrigger"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RunbookProcessArgs, RunbookProcessState } from "./runbookProcess";
export type RunbookProcess = import("./runbookProcess").RunbookProcess;
export const RunbookProcess: typeof import("./runbookProcess").RunbookProcess = null as any;
utilities.lazyLoad(exports, ["RunbookProcess"], () => require("./runbookProcess"));

export { ScopedUserRoleArgs, ScopedUserRoleState } from "./scopedUserRole";
export type ScopedUserRole = import("./scopedUserRole").ScopedUserRole;
export const ScopedUserRole: typeof import("./scopedUserRole").ScopedUserRole = null as any;
utilities.lazyLoad(exports, ["ScopedUserRole"], () => require("./scopedUserRole"));

export { SshConnectionDeploymentTargetArgs, SshConnectionDeploymentTargetState } from "./sshConnectionDeploymentTarget";
export type SshConnectionDeploymentTarget = import("./sshConnectionDeploymentTarget").SshConnectionDeploymentTarget;
export const SshConnectionDeploymentTarget: typeof import("./sshConnectionDeploymentTarget").SshConnectionDeploymentTarget = null as any;
utilities.lazyLoad(exports, ["SshConnectionDeploymentTarget"], () => require("./sshConnectionDeploymentTarget"));

export { SshKeyAccountArgs, SshKeyAccountState } from "./sshKeyAccount";
export type SshKeyAccount = import("./sshKeyAccount").SshKeyAccount;
export const SshKeyAccount: typeof import("./sshKeyAccount").SshKeyAccount = null as any;
utilities.lazyLoad(exports, ["SshKeyAccount"], () => require("./sshKeyAccount"));

export { StaticWorkerPoolArgs, StaticWorkerPoolState } from "./staticWorkerPool";
export type StaticWorkerPool = import("./staticWorkerPool").StaticWorkerPool;
export const StaticWorkerPool: typeof import("./staticWorkerPool").StaticWorkerPool = null as any;
utilities.lazyLoad(exports, ["StaticWorkerPool"], () => require("./staticWorkerPool"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TokenAccountArgs, TokenAccountState } from "./tokenAccount";
export type TokenAccount = import("./tokenAccount").TokenAccount;
export const TokenAccount: typeof import("./tokenAccount").TokenAccount = null as any;
utilities.lazyLoad(exports, ["TokenAccount"], () => require("./tokenAccount"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserRoleArgs, UserRoleState } from "./userRole";
export type UserRole = import("./userRole").UserRole;
export const UserRole: typeof import("./userRole").UserRole = null as any;
utilities.lazyLoad(exports, ["UserRole"], () => require("./userRole"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "octopusdeploy:index/awsAccount:AwsAccount":
                return new AwsAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/awsOpenidConnectAccount:AwsOpenidConnectAccount":
                return new AwsOpenidConnectAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureCloudServiceDeploymentTarget:AzureCloudServiceDeploymentTarget":
                return new AzureCloudServiceDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureOpenidConnect:AzureOpenidConnect":
                return new AzureOpenidConnect(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureServiceFabricClusterDeploymentTarget:AzureServiceFabricClusterDeploymentTarget":
                return new AzureServiceFabricClusterDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureServicePrincipal:AzureServicePrincipal":
                return new AzureServicePrincipal(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureSubscriptionAccount:AzureSubscriptionAccount":
                return new AzureSubscriptionAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/azureWebAppDeploymentTarget:AzureWebAppDeploymentTarget":
                return new AzureWebAppDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "octopusdeploy:index/channel:Channel":
                return new Channel(name, <any>undefined, { urn })
            case "octopusdeploy:index/cloudRegionDeploymentTarget:CloudRegionDeploymentTarget":
                return new CloudRegionDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/deploymentProcess:DeploymentProcess":
                return new DeploymentProcess(name, <any>undefined, { urn })
            case "octopusdeploy:index/dynamicWorkerPool:DynamicWorkerPool":
                return new DynamicWorkerPool(name, <any>undefined, { urn })
            case "octopusdeploy:index/externalFeedCreateReleaseTrigger:ExternalFeedCreateReleaseTrigger":
                return new ExternalFeedCreateReleaseTrigger(name, <any>undefined, { urn })
            case "octopusdeploy:index/gcpAccount:GcpAccount":
                return new GcpAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/kubernetesAgentDeploymentTarget:KubernetesAgentDeploymentTarget":
                return new KubernetesAgentDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/kubernetesAgentWorker:KubernetesAgentWorker":
                return new KubernetesAgentWorker(name, <any>undefined, { urn })
            case "octopusdeploy:index/kubernetesClusterDeploymentTarget:KubernetesClusterDeploymentTarget":
                return new KubernetesClusterDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/listeningTentacleDeploymentTarget:ListeningTentacleDeploymentTarget":
                return new ListeningTentacleDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/machinePolicy:MachinePolicy":
                return new MachinePolicy(name, <any>undefined, { urn })
            case "octopusdeploy:index/offlinePackageDropDeploymentTarget:OfflinePackageDropDeploymentTarget":
                return new OfflinePackageDropDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId":
                return new PollingSubscriptionId(name, <any>undefined, { urn })
            case "octopusdeploy:index/pollingTentacleDeploymentTarget:PollingTentacleDeploymentTarget":
                return new PollingTentacleDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/projectDeploymentTargetTrigger:ProjectDeploymentTargetTrigger":
                return new ProjectDeploymentTargetTrigger(name, <any>undefined, { urn })
            case "octopusdeploy:index/projectScheduledTrigger:ProjectScheduledTrigger":
                return new ProjectScheduledTrigger(name, <any>undefined, { urn })
            case "octopusdeploy:index/runbookProcess:RunbookProcess":
                return new RunbookProcess(name, <any>undefined, { urn })
            case "octopusdeploy:index/scopedUserRole:ScopedUserRole":
                return new ScopedUserRole(name, <any>undefined, { urn })
            case "octopusdeploy:index/sshConnectionDeploymentTarget:SshConnectionDeploymentTarget":
                return new SshConnectionDeploymentTarget(name, <any>undefined, { urn })
            case "octopusdeploy:index/sshKeyAccount:SshKeyAccount":
                return new SshKeyAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/staticWorkerPool:StaticWorkerPool":
                return new StaticWorkerPool(name, <any>undefined, { urn })
            case "octopusdeploy:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "octopusdeploy:index/tokenAccount:TokenAccount":
                return new TokenAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "octopusdeploy:index/userRole:UserRole":
                return new UserRole(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("octopusdeploy", "index/awsAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/awsOpenidConnectAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureCloudServiceDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureOpenidConnect", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureServiceFabricClusterDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureServicePrincipal", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureSubscriptionAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/azureWebAppDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/certificate", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/channel", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/cloudRegionDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/deploymentProcess", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/dynamicWorkerPool", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/externalFeedCreateReleaseTrigger", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/gcpAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/kubernetesAgentDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/kubernetesAgentWorker", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/kubernetesClusterDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/listeningTentacleDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/machinePolicy", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/offlinePackageDropDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/pollingSubscriptionId", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/pollingTentacleDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/projectDeploymentTargetTrigger", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/projectScheduledTrigger", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/runbookProcess", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/scopedUserRole", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/sshConnectionDeploymentTarget", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/sshKeyAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/staticWorkerPool", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/team", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tokenAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/user", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/userRole", _module)
pulumi.runtime.registerResourcePackage("octopusdeploy", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:octopusdeploy") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
