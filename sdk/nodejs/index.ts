// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ArtifactoryGenericFeedArgs, ArtifactoryGenericFeedState } from "./artifactoryGenericFeed";
export type ArtifactoryGenericFeed = import("./artifactoryGenericFeed").ArtifactoryGenericFeed;
export const ArtifactoryGenericFeed: typeof import("./artifactoryGenericFeed").ArtifactoryGenericFeed = null as any;
utilities.lazyLoad(exports, ["ArtifactoryGenericFeed"], () => require("./artifactoryGenericFeed"));

export { AwsElasticContainerRegistryArgs, AwsElasticContainerRegistryState } from "./awsElasticContainerRegistry";
export type AwsElasticContainerRegistry = import("./awsElasticContainerRegistry").AwsElasticContainerRegistry;
export const AwsElasticContainerRegistry: typeof import("./awsElasticContainerRegistry").AwsElasticContainerRegistry = null as any;
utilities.lazyLoad(exports, ["AwsElasticContainerRegistry"], () => require("./awsElasticContainerRegistry"));

export { DockerContainerRegistryArgs, DockerContainerRegistryState } from "./dockerContainerRegistry";
export type DockerContainerRegistry = import("./dockerContainerRegistry").DockerContainerRegistry;
export const DockerContainerRegistry: typeof import("./dockerContainerRegistry").DockerContainerRegistry = null as any;
utilities.lazyLoad(exports, ["DockerContainerRegistry"], () => require("./dockerContainerRegistry"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetEnvironmentsArgs, GetEnvironmentsResult, GetEnvironmentsOutputArgs } from "./getEnvironments";
export const getEnvironments: typeof import("./getEnvironments").getEnvironments = null as any;
export const getEnvironmentsOutput: typeof import("./getEnvironments").getEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironments","getEnvironmentsOutput"], () => require("./getEnvironments"));

export { GetFeedsArgs, GetFeedsResult, GetFeedsOutputArgs } from "./getFeeds";
export const getFeeds: typeof import("./getFeeds").getFeeds = null as any;
export const getFeedsOutput: typeof import("./getFeeds").getFeedsOutput = null as any;
utilities.lazyLoad(exports, ["getFeeds","getFeedsOutput"], () => require("./getFeeds"));

export { GetGitCredentialsArgs, GetGitCredentialsResult, GetGitCredentialsOutputArgs } from "./getGitCredentials";
export const getGitCredentials: typeof import("./getGitCredentials").getGitCredentials = null as any;
export const getGitCredentialsOutput: typeof import("./getGitCredentials").getGitCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getGitCredentials","getGitCredentialsOutput"], () => require("./getGitCredentials"));

export { GetLibraryVariableSetsArgs, GetLibraryVariableSetsResult, GetLibraryVariableSetsOutputArgs } from "./getLibraryVariableSets";
export const getLibraryVariableSets: typeof import("./getLibraryVariableSets").getLibraryVariableSets = null as any;
export const getLibraryVariableSetsOutput: typeof import("./getLibraryVariableSets").getLibraryVariableSetsOutput = null as any;
utilities.lazyLoad(exports, ["getLibraryVariableSets","getLibraryVariableSetsOutput"], () => require("./getLibraryVariableSets"));

export { GetLifecyclesArgs, GetLifecyclesResult, GetLifecyclesOutputArgs } from "./getLifecycles";
export const getLifecycles: typeof import("./getLifecycles").getLifecycles = null as any;
export const getLifecyclesOutput: typeof import("./getLifecycles").getLifecyclesOutput = null as any;
utilities.lazyLoad(exports, ["getLifecycles","getLifecyclesOutput"], () => require("./getLifecycles"));

export { GetProjectGroupsArgs, GetProjectGroupsResult, GetProjectGroupsOutputArgs } from "./getProjectGroups";
export const getProjectGroups: typeof import("./getProjectGroups").getProjectGroups = null as any;
export const getProjectGroupsOutput: typeof import("./getProjectGroups").getProjectGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectGroups","getProjectGroupsOutput"], () => require("./getProjectGroups"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetScriptModulesArgs, GetScriptModulesResult, GetScriptModulesOutputArgs } from "./getScriptModules";
export const getScriptModules: typeof import("./getScriptModules").getScriptModules = null as any;
export const getScriptModulesOutput: typeof import("./getScriptModules").getScriptModulesOutput = null as any;
utilities.lazyLoad(exports, ["getScriptModules","getScriptModulesOutput"], () => require("./getScriptModules"));

export { GetSpaceArgs, GetSpaceResult, GetSpaceOutputArgs } from "./getSpace";
export const getSpace: typeof import("./getSpace").getSpace = null as any;
export const getSpaceOutput: typeof import("./getSpace").getSpaceOutput = null as any;
utilities.lazyLoad(exports, ["getSpace","getSpaceOutput"], () => require("./getSpace"));

export { GetSpacesArgs, GetSpacesResult, GetSpacesOutputArgs } from "./getSpaces";
export const getSpaces: typeof import("./getSpaces").getSpaces = null as any;
export const getSpacesOutput: typeof import("./getSpaces").getSpacesOutput = null as any;
utilities.lazyLoad(exports, ["getSpaces","getSpacesOutput"], () => require("./getSpaces"));

export { GetTagSetsArgs, GetTagSetsResult, GetTagSetsOutputArgs } from "./getTagSets";
export const getTagSets: typeof import("./getTagSets").getTagSets = null as any;
export const getTagSetsOutput: typeof import("./getTagSets").getTagSetsOutput = null as any;
utilities.lazyLoad(exports, ["getTagSets","getTagSetsOutput"], () => require("./getTagSets"));

export { GetTenantProjectsArgs, GetTenantProjectsResult, GetTenantProjectsOutputArgs } from "./getTenantProjects";
export const getTenantProjects: typeof import("./getTenantProjects").getTenantProjects = null as any;
export const getTenantProjectsOutput: typeof import("./getTenantProjects").getTenantProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getTenantProjects","getTenantProjectsOutput"], () => require("./getTenantProjects"));

export { GetTenantsArgs, GetTenantsResult, GetTenantsOutputArgs } from "./getTenants";
export const getTenants: typeof import("./getTenants").getTenants = null as any;
export const getTenantsOutput: typeof import("./getTenants").getTenantsOutput = null as any;
utilities.lazyLoad(exports, ["getTenants","getTenantsOutput"], () => require("./getTenants"));

export { GetVariablesArgs, GetVariablesResult, GetVariablesOutputArgs } from "./getVariables";
export const getVariables: typeof import("./getVariables").getVariables = null as any;
export const getVariablesOutput: typeof import("./getVariables").getVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getVariables","getVariablesOutput"], () => require("./getVariables"));

export { GitCredentialArgs, GitCredentialState } from "./gitCredential";
export type GitCredential = import("./gitCredential").GitCredential;
export const GitCredential: typeof import("./gitCredential").GitCredential = null as any;
utilities.lazyLoad(exports, ["GitCredential"], () => require("./gitCredential"));

export { GithubRepositoryFeedArgs, GithubRepositoryFeedState } from "./githubRepositoryFeed";
export type GithubRepositoryFeed = import("./githubRepositoryFeed").GithubRepositoryFeed;
export const GithubRepositoryFeed: typeof import("./githubRepositoryFeed").GithubRepositoryFeed = null as any;
utilities.lazyLoad(exports, ["GithubRepositoryFeed"], () => require("./githubRepositoryFeed"));

export { HelmFeedArgs, HelmFeedState } from "./helmFeed";
export type HelmFeed = import("./helmFeed").HelmFeed;
export const HelmFeed: typeof import("./helmFeed").HelmFeed = null as any;
utilities.lazyLoad(exports, ["HelmFeed"], () => require("./helmFeed"));

export { LibraryVariableSetArgs, LibraryVariableSetState } from "./libraryVariableSet";
export type LibraryVariableSet = import("./libraryVariableSet").LibraryVariableSet;
export const LibraryVariableSet: typeof import("./libraryVariableSet").LibraryVariableSet = null as any;
utilities.lazyLoad(exports, ["LibraryVariableSet"], () => require("./libraryVariableSet"));

export { LifecycleArgs, LifecycleState } from "./lifecycle";
export type Lifecycle = import("./lifecycle").Lifecycle;
export const Lifecycle: typeof import("./lifecycle").Lifecycle = null as any;
utilities.lazyLoad(exports, ["Lifecycle"], () => require("./lifecycle"));

export { MavenFeedArgs, MavenFeedState } from "./mavenFeed";
export type MavenFeed = import("./mavenFeed").MavenFeed;
export const MavenFeed: typeof import("./mavenFeed").MavenFeed = null as any;
utilities.lazyLoad(exports, ["MavenFeed"], () => require("./mavenFeed"));

export { NugetFeedArgs, NugetFeedState } from "./nugetFeed";
export type NugetFeed = import("./nugetFeed").NugetFeed;
export const NugetFeed: typeof import("./nugetFeed").NugetFeed = null as any;
utilities.lazyLoad(exports, ["NugetFeed"], () => require("./nugetFeed"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectGroupArgs, ProjectGroupState } from "./projectGroup";
export type ProjectGroup = import("./projectGroup").ProjectGroup;
export const ProjectGroup: typeof import("./projectGroup").ProjectGroup = null as any;
utilities.lazyLoad(exports, ["ProjectGroup"], () => require("./projectGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RunbookArgs, RunbookState } from "./runbook";
export type Runbook = import("./runbook").Runbook;
export const Runbook: typeof import("./runbook").Runbook = null as any;
utilities.lazyLoad(exports, ["Runbook"], () => require("./runbook"));

export { ScriptModuleArgs, ScriptModuleState } from "./scriptModule";
export type ScriptModule = import("./scriptModule").ScriptModule;
export const ScriptModule: typeof import("./scriptModule").ScriptModule = null as any;
utilities.lazyLoad(exports, ["ScriptModule"], () => require("./scriptModule"));

export { SpaceArgs, SpaceState } from "./space";
export type Space = import("./space").Space;
export const Space: typeof import("./space").Space = null as any;
utilities.lazyLoad(exports, ["Space"], () => require("./space"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TagSetArgs, TagSetState } from "./tagSet";
export type TagSet = import("./tagSet").TagSet;
export const TagSet: typeof import("./tagSet").TagSet = null as any;
utilities.lazyLoad(exports, ["TagSet"], () => require("./tagSet"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { TenantCommonVariableArgs, TenantCommonVariableState } from "./tenantCommonVariable";
export type TenantCommonVariable = import("./tenantCommonVariable").TenantCommonVariable;
export const TenantCommonVariable: typeof import("./tenantCommonVariable").TenantCommonVariable = null as any;
utilities.lazyLoad(exports, ["TenantCommonVariable"], () => require("./tenantCommonVariable"));

export { TenantProjectArgs, TenantProjectState } from "./tenantProject";
export type TenantProject = import("./tenantProject").TenantProject;
export const TenantProject: typeof import("./tenantProject").TenantProject = null as any;
utilities.lazyLoad(exports, ["TenantProject"], () => require("./tenantProject"));

export { TenantProjectVariableArgs, TenantProjectVariableState } from "./tenantProjectVariable";
export type TenantProjectVariable = import("./tenantProjectVariable").TenantProjectVariable;
export const TenantProjectVariable: typeof import("./tenantProjectVariable").TenantProjectVariable = null as any;
utilities.lazyLoad(exports, ["TenantProjectVariable"], () => require("./tenantProjectVariable"));

export { TentacleCertificateArgs, TentacleCertificateState } from "./tentacleCertificate";
export type TentacleCertificate = import("./tentacleCertificate").TentacleCertificate;
export const TentacleCertificate: typeof import("./tentacleCertificate").TentacleCertificate = null as any;
utilities.lazyLoad(exports, ["TentacleCertificate"], () => require("./tentacleCertificate"));

export { UsernamePasswordAccountArgs, UsernamePasswordAccountState } from "./usernamePasswordAccount";
export type UsernamePasswordAccount = import("./usernamePasswordAccount").UsernamePasswordAccount;
export const UsernamePasswordAccount: typeof import("./usernamePasswordAccount").UsernamePasswordAccount = null as any;
utilities.lazyLoad(exports, ["UsernamePasswordAccount"], () => require("./usernamePasswordAccount"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "octopusdeploy:index/artifactoryGenericFeed:ArtifactoryGenericFeed":
                return new ArtifactoryGenericFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/awsElasticContainerRegistry:AwsElasticContainerRegistry":
                return new AwsElasticContainerRegistry(name, <any>undefined, { urn })
            case "octopusdeploy:index/dockerContainerRegistry:DockerContainerRegistry":
                return new DockerContainerRegistry(name, <any>undefined, { urn })
            case "octopusdeploy:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "octopusdeploy:index/gitCredential:GitCredential":
                return new GitCredential(name, <any>undefined, { urn })
            case "octopusdeploy:index/githubRepositoryFeed:GithubRepositoryFeed":
                return new GithubRepositoryFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/helmFeed:HelmFeed":
                return new HelmFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/libraryVariableSet:LibraryVariableSet":
                return new LibraryVariableSet(name, <any>undefined, { urn })
            case "octopusdeploy:index/lifecycle:Lifecycle":
                return new Lifecycle(name, <any>undefined, { urn })
            case "octopusdeploy:index/mavenFeed:MavenFeed":
                return new MavenFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/nugetFeed:NugetFeed":
                return new NugetFeed(name, <any>undefined, { urn })
            case "octopusdeploy:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "octopusdeploy:index/projectGroup:ProjectGroup":
                return new ProjectGroup(name, <any>undefined, { urn })
            case "octopusdeploy:index/runbook:Runbook":
                return new Runbook(name, <any>undefined, { urn })
            case "octopusdeploy:index/scriptModule:ScriptModule":
                return new ScriptModule(name, <any>undefined, { urn })
            case "octopusdeploy:index/space:Space":
                return new Space(name, <any>undefined, { urn })
            case "octopusdeploy:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "octopusdeploy:index/tagSet:TagSet":
                return new TagSet(name, <any>undefined, { urn })
            case "octopusdeploy:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "octopusdeploy:index/tenantCommonVariable:TenantCommonVariable":
                return new TenantCommonVariable(name, <any>undefined, { urn })
            case "octopusdeploy:index/tenantProject:TenantProject":
                return new TenantProject(name, <any>undefined, { urn })
            case "octopusdeploy:index/tenantProjectVariable:TenantProjectVariable":
                return new TenantProjectVariable(name, <any>undefined, { urn })
            case "octopusdeploy:index/tentacleCertificate:TentacleCertificate":
                return new TentacleCertificate(name, <any>undefined, { urn })
            case "octopusdeploy:index/usernamePasswordAccount:UsernamePasswordAccount":
                return new UsernamePasswordAccount(name, <any>undefined, { urn })
            case "octopusdeploy:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("octopusdeploy", "index/artifactoryGenericFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/awsElasticContainerRegistry", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/dockerContainerRegistry", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/environment", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/gitCredential", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/githubRepositoryFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/helmFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/libraryVariableSet", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/lifecycle", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/mavenFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/nugetFeed", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/project", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/projectGroup", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/runbook", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/scriptModule", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/space", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tag", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tagSet", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tenant", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tenantCommonVariable", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tenantProject", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tenantProjectVariable", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/tentacleCertificate", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/usernamePasswordAccount", _module)
pulumi.runtime.registerResourceModule("octopusdeploy", "index/variable", _module)
pulumi.runtime.registerResourcePackage("octopusdeploy", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:octopusdeploy") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
