// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface EnvironmentJiraExtensionSetting {
    /**
     * The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, `"unmapped"`.
     */
    environmentType?: string;
}

export interface EnvironmentJiraServiceManagementExtensionSetting {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled?: boolean;
}

export interface EnvironmentServicenowExtensionSetting {
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled?: boolean;
}

export interface GetEnvironmentsEnvironment {
    allowDynamicInfrastructure: boolean;
    /**
     * The description of this environment.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * Provides extension settings for the Jira integration for this environment.
     */
    jiraExtensionSettings: outputs.GetEnvironmentsEnvironmentJiraExtensionSetting[];
    /**
     * Provides extension settings for the Jira Service Management (JSM) integration for this environment.
     */
    jiraServiceManagementExtensionSettings: outputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSetting[];
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * Provides extension settings for the ServiceNow integration for this environment.
     */
    servicenowExtensionSettings: outputs.GetEnvironmentsEnvironmentServicenowExtensionSetting[];
    /**
     * The unique slug of this environment
     */
    slug: string;
    /**
     * The order number to sort an environment
     */
    sortOrder: number;
    /**
     * The space ID associated with this environment.
     */
    spaceId: string;
    useGuidedFailure: boolean;
}

export interface GetEnvironmentsEnvironmentJiraExtensionSetting {
    environmentType: string;
}

export interface GetEnvironmentsEnvironmentJiraServiceManagementExtensionSetting {
    isEnabled: boolean;
}

export interface GetEnvironmentsEnvironmentServicenowExtensionSetting {
    isEnabled: boolean;
}

export interface GetFeedsFeed {
    /**
     * The AWS access key to use when authenticating against Amazon Web Services.
     */
    accessKey: string;
    apiVersion: string;
    deleteUnreleasedPackagesAfterDays: number;
    /**
     * The number of times a deployment should attempt to download a package from this feed before failing.
     */
    downloadAttempts: number;
    /**
     * The number of seconds to apply as a linear back off between download attempts.
     */
    downloadRetryBackoffSeconds: number;
    /**
     * A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
     */
    feedType: string;
    feedUri: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    isEnhancedMode: boolean;
    /**
     * The name of this resource.
     */
    name: string;
    packageAcquisitionLocationOptions: string[];
    /**
     * The password associated with this resource.
     */
    password: string;
    region: string;
    registryPath: string;
    secretKey: string;
    /**
     * The space ID associated with this feeds.
     */
    spaceId: string;
    /**
     * The username associated with this resource.
     */
    username: string;
}

export interface GetGitCredentialsGitCredential {
    /**
     * The description of this Git Credential.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this Git Credential.
     */
    name: string;
    /**
     * The space ID associated with this Git Credential.
     */
    spaceId: string;
    /**
     * The Git credential authentication type.
     */
    type: string;
    /**
     * The username for the Git credential.
     */
    username: string;
}

export interface GetLibraryVariableSetsLibraryVariableSet {
    /**
     * The description of this library variable set.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The space ID associated with this library variable set.
     */
    spaceId: string;
    templateIds: {[key: string]: string};
    templates: outputs.GetLibraryVariableSetsLibraryVariableSetTemplate[];
    variableSetId: string;
}

export interface GetLibraryVariableSetsLibraryVariableSetTemplate {
    defaultValue: string;
    displaySettings: {[key: string]: string};
    helpText: string;
    id: string;
    label: string;
    name: string;
}

export interface GetLifecyclesLifecycle {
    /**
     * The description of the lifecycle.
     */
    description: string;
    /**
     * The ID of the lifecycle.
     */
    id: string;
    /**
     * The name of the lifecycle.
     */
    name: string;
    phases: outputs.GetLifecyclesLifecyclePhase[];
    releaseRetentionPolicies: outputs.GetLifecyclesLifecycleReleaseRetentionPolicy[];
    /**
     * The space ID associated with this lifecycle.
     */
    spaceId: string;
    tentacleRetentionPolicies: outputs.GetLifecyclesLifecycleTentacleRetentionPolicy[];
}

export interface GetLifecyclesLifecyclePhase {
    /**
     * The automatic deployment targets for this phase.
     */
    automaticDeploymentTargets: string[];
    /**
     * The ID of the phase.
     */
    id: string;
    /**
     * Whether this phase is optional.
     */
    isOptionalPhase: boolean;
    /**
     * The minimum number of environments before promotion.
     */
    minimumEnvironmentsBeforePromotion: number;
    /**
     * The name of the phase.
     */
    name: string;
    /**
     * The optional deployment targets for this phase.
     */
    optionalDeploymentTargets: string[];
    releaseRetentionPolicies: outputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicy[];
    tentacleRetentionPolicies: outputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicy[];
}

export interface GetLifecyclesLifecyclePhaseReleaseRetentionPolicy {
    /**
     * The quantity of releases to keep.
     */
    quantityToKeep: number;
    /**
     * Whether releases should be kept forever.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of time for the retention policy.
     */
    unit: string;
}

export interface GetLifecyclesLifecyclePhaseTentacleRetentionPolicy {
    /**
     * The quantity of releases to keep.
     */
    quantityToKeep: number;
    /**
     * Whether releases should be kept forever.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of time for the retention policy.
     */
    unit: string;
}

export interface GetLifecyclesLifecycleReleaseRetentionPolicy {
    /**
     * The quantity of releases to keep.
     */
    quantityToKeep: number;
    /**
     * Whether releases should be kept forever.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of time for the retention policy.
     */
    unit: string;
}

export interface GetLifecyclesLifecycleTentacleRetentionPolicy {
    /**
     * The quantity of releases to keep.
     */
    quantityToKeep: number;
    /**
     * Whether releases should be kept forever.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of time for the retention policy.
     */
    unit: string;
}

export interface GetProjectGroupsProjectGroup {
    /**
     * The description of this project group.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The space ID associated with this project group.
     */
    spaceId: string;
}

export interface GetProjectsProject {
    /**
     * @deprecated Allow deployments to be created when there are no targets.
     */
    allowDeploymentsToNoTargets: boolean;
    autoCreateRelease: boolean;
    autoDeployReleaseOverrides: outputs.GetProjectsProjectAutoDeployReleaseOverride[];
    clonedFromProjectId: string;
    connectivityPolicies: outputs.GetProjectsProjectConnectivityPolicy[];
    defaultGuidedFailureMode: string;
    defaultToSkipIfAlreadyInstalled: boolean;
    deploymentChangesTemplate: string;
    deploymentProcessId: string;
    /**
     * The description of this project
     */
    description: string;
    /**
     * Treats releases of different channels to the same environment as a separate deployment dimension
     */
    discreteChannelRelease: boolean;
    /**
     * Git-related persistence settings for a version-controlled project using anonymous authentication.
     */
    gitAnonymousPersistenceSettings: outputs.GetProjectsProjectGitAnonymousPersistenceSetting[];
    /**
     * Git-related persistence settings for a version-controlled project using library authentication.
     */
    gitLibraryPersistenceSettings: outputs.GetProjectsProjectGitLibraryPersistenceSetting[];
    /**
     * Git-related persistence settings for a version-controlled project using username*password authentication.
     */
    gitUsernamePasswordPersistenceSettings: outputs.GetProjectsProjectGitUsernamePasswordPersistenceSetting[];
    id: string;
    includedLibraryVariableSets: string[];
    isDisabled: boolean;
    isDiscreteChannelRelease: boolean;
    isVersionControlled: boolean;
    /**
     * Extension settings for the Jira Service Management (JSM) integration.
     */
    jiraServiceManagementExtensionSettings: outputs.GetProjectsProjectJiraServiceManagementExtensionSetting[];
    /**
     * The lifecycle ID associated with this project
     */
    lifecycleId: string;
    /**
     * The name of the project in Octopus Deploy. This name must be unique.
     */
    name: string;
    /**
     * The project group ID associated with this project.
     */
    projectGroupId: string;
    /**
     * The release creation strategy for the project.
     */
    releaseCreationStrategies: outputs.GetProjectsProjectReleaseCreationStrategy[];
    /**
     * The template to use for release notes.
     */
    releaseNotesTemplate: string;
    /**
     * Extension settings for the ServiceNow integration.
     */
    servicenowExtensionSettings: outputs.GetProjectsProjectServicenowExtensionSetting[];
    /**
     * A human-readable, unique identifier, used to identify a project.
     */
    slug: string;
    /**
     * The space ID associated with this project.
     */
    spaceId: string;
    /**
     * Template parameters for the project.
     */
    templates: outputs.GetProjectsProjectTemplate[];
    /**
     * The tenanted deployment mode of the project.
     */
    tenantedDeploymentParticipation: string;
    /**
     * The ID of the variable set associated with this project.
     */
    variableSetId: string;
    /**
     * The versioning strategy for the project.
     */
    versioningStrategies: outputs.GetProjectsProjectVersioningStrategy[];
}

export interface GetProjectsProjectAutoDeployReleaseOverride {
    /**
     * The environment ID for the auto deploy release override.
     */
    environmentId: string;
    /**
     * The release ID for the auto deploy release override.
     */
    releaseId: string;
    /**
     * The tenant ID for the auto deploy release override.
     */
    tenantId: string;
}

export interface GetProjectsProjectConnectivityPolicy {
    /**
     * Allow deployments to be created when there are no targets.
     */
    allowDeploymentsToNoTargets: boolean;
    /**
     * Exclude unhealthy targets from deployments.
     */
    excludeUnhealthyTargets: boolean;
    /**
     * The behavior when a machine is skipped.
     */
    skipMachineBehavior: string;
    /**
     * The target roles for the connectivity policy.
     */
    targetRoles: string[];
}

export interface GetProjectsProjectGitAnonymousPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
}

export interface GetProjectsProjectGitLibraryPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch: string;
    /**
     * The ID of the Git credential.
     */
    gitCredentialId: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
}

export interface GetProjectsProjectGitUsernamePasswordPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch: string;
    /**
     * The password for the Git credential.
     */
    password: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
    /**
     * The username for the Git credential.
     */
    username: string;
}

export interface GetProjectsProjectJiraServiceManagementExtensionSetting {
    /**
     * The connection identifier for JSM.
     */
    connectionId: string;
    /**
     * Whether the JSM extension is enabled.
     */
    isEnabled: boolean;
    /**
     * The JSM service desk project name.
     */
    serviceDeskProjectName: string;
}

export interface GetProjectsProjectReleaseCreationStrategy {
    /**
     * The ID of the channel to use for release creation.
     */
    channelId: string;
    /**
     * The ID of the step containing the package for release creation.
     */
    releaseCreationPackageStepId: string;
    /**
     * Details of the package used for release creation.
     */
    releaseCreationPackages: outputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackage[];
}

export interface GetProjectsProjectReleaseCreationStrategyReleaseCreationPackage {
    /**
     * The deployment action for the release creation package.
     */
    deploymentAction: string;
    /**
     * The package reference for the release creation package.
     */
    packageReference: string;
}

export interface GetProjectsProjectServicenowExtensionSetting {
    /**
     * The connection identifier for ServiceNow.
     */
    connectionId: string;
    /**
     * Whether the ServiceNow extension is enabled.
     */
    isEnabled: boolean;
    /**
     * Whether state is automatically transitioned in ServiceNow.
     */
    isStateAutomaticallyTransitioned: boolean;
    /**
     * The name of the standard change template in ServiceNow.
     */
    standardChangeTemplateName: string;
}

export interface GetProjectsProjectTemplate {
    /**
     * The default value for the parameter.
     */
    defaultValue: string;
    /**
     * The display settings for the parameter.
     */
    displaySettings: {[key: string]: string};
    /**
     * The help text for the parameter.
     */
    helpText: string;
    /**
     * The ID of the template parameter.
     */
    id: string;
    /**
     * The label shown beside the parameter.
     */
    label: string;
    /**
     * The name of the variable set by the parameter.
     */
    name: string;
}

export interface GetProjectsProjectVersioningStrategy {
    /**
     * The ID of the step containing the donor package.
     */
    donorPackageStepId: string;
    donorPackages: outputs.GetProjectsProjectVersioningStrategyDonorPackage[];
    /**
     * The template to use for version numbers.
     */
    template: string;
}

export interface GetProjectsProjectVersioningStrategyDonorPackage {
    /**
     * The deployment action for the donor package.
     */
    deploymentAction: string;
    /**
     * The package reference for the donor package.
     */
    packageReference: string;
}

export interface GetScriptModulesScriptModule {
    /**
     * The description of this script module.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The script associated with this script module.
     */
    scripts: outputs.GetScriptModulesScriptModuleScript[];
    /**
     * The space ID associated with this Script Module.
     */
    spaceId: string;
    /**
     * The variable set ID for this script module.
     */
    variableSetId: string;
}

export interface GetScriptModulesScriptModuleScript {
    /**
     * The body of this script module.
     */
    body: string;
    /**
     * The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
     */
    syntax: string;
}

export interface GetSpacesSpace {
    /**
     * The description of this space.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * Specifies if this space is the default space in Octopus.
     */
    isDefault: boolean;
    /**
     * Specifies the status of the task queue for this space.
     */
    isTaskQueueStopped: boolean;
    /**
     * The name of this resource, no more than 20 characters long
     */
    name: string;
    /**
     * The unique slug of this space
     */
    slug: string;
    /**
     * A list of user IDs designated to be managers of this space.
     */
    spaceManagersTeamMembers: string[];
    /**
     * A list of team IDs designated to be managers of this space.
     */
    spaceManagersTeams: string[];
}

export interface GetTagSetsTagSet {
    /**
     * The description of this tag set.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The sort order associated with this resource.
     */
    sortOrder: number;
    /**
     * The space ID associated with this resource.
     */
    spaceId: string;
}

export interface GetTenantProjectsTenantProject {
    /**
     * The environment IDs associated with this tenant.
     */
    environmentIds: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The project ID associated with this tenant.
     */
    projectId: string;
    /**
     * The tenant ID associated with this tenant.
     */
    tenantId: string;
}

export interface GetTenantsTenant {
    /**
     * The ID of the tenant from which this tenant was cloned.
     */
    clonedFromTenantId: string;
    /**
     * The description of this tenants.
     */
    description: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * The space ID associated with this tenant.
     */
    spaceId: string;
    /**
     * A list of tenant tags associated with this resource.
     */
    tenantTags: string[];
}

export interface GetVariablesPrompt {
    /**
     * The description of this variable prompt option.
     */
    description: string;
    displaySettings: outputs.GetVariablesPromptDisplaySetting[];
    isRequired: boolean;
    label: string;
}

export interface GetVariablesPromptDisplaySetting {
    /**
     * The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
     */
    controlType: string;
    /**
     * If the `controlType` is `Select`, then this value defines an option.
     */
    selectOptions: outputs.GetVariablesPromptDisplaySettingSelectOption[];
}

export interface GetVariablesPromptDisplaySettingSelectOption {
    /**
     * The display name for the select value
     */
    displayName: string;
    /**
     * The select value
     */
    value: string;
}

export interface GetVariablesScope {
    /**
     * A list of actions that are scoped to this variable value.
     */
    actions?: string[];
    /**
     * A list of channels that are scoped to this variable value.
     */
    channels?: string[];
    /**
     * A list of environments that are scoped to this variable value.
     */
    environments?: string[];
    /**
     * A list of machines that are scoped to this variable value.
     */
    machines?: string[];
    /**
     * A list of processes that are scoped to this variable value.
     */
    processes?: string[];
    /**
     * A list of roles that are scoped to this variable value.
     */
    roles?: string[];
    /**
     * A list of tenant tags that are scoped to this variable value.
     */
    tenantTags?: string[];
}

export interface LibraryVariableSetTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue: string;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: {[key: string]: string};
    /**
     * The help presented alongside the parameter input.
     */
    helpText: string;
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
     */
    label?: string;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`
     */
    name: string;
}

export interface LifecyclePhase {
    /**
     * Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
     */
    automaticDeploymentTargets: string[];
    /**
     * The unique ID for this resource.
     */
    id: string;
    /**
     * If false a release must be deployed to this phase before it can be deployed to the next phase.
     */
    isOptionalPhase: boolean;
    /**
     * The number of units required before a release can enter the next phase. If 0, all environments are required.
     */
    minimumEnvironmentsBeforePromotion: number;
    /**
     * The name of this resource.
     */
    name: string;
    /**
     * Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
     */
    optionalDeploymentTargets: string[];
    /**
     * Defines the retention policy for releases or tentacles.
     */
    releaseRetentionPolicies?: outputs.LifecyclePhaseReleaseRetentionPolicy[];
    /**
     * Defines the retention policy for releases or tentacles.
     */
    tentacleRetentionPolicies?: outputs.LifecyclePhaseTentacleRetentionPolicy[];
}

export interface LifecyclePhaseReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep: number;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit: string;
}

export interface LifecyclePhaseTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep: number;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit: string;
}

export interface LifecycleReleaseRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep: number;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit: string;
}

export interface LifecycleTentacleRetentionPolicy {
    /**
     * The number of days/releases to keep. The default value is 30. If 0 then all are kept.
     */
    quantityToKeep: number;
    /**
     * Indicates if items should never be deleted. The default value is false.
     */
    shouldKeepForever: boolean;
    /**
     * The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
     */
    unit: string;
}

export interface ProjectAutoDeployReleaseOverride {
    environmentId?: string;
    releaseId?: string;
    tenantId?: string;
}

export interface ProjectConnectivityPolicy {
    allowDeploymentsToNoTargets: boolean;
    excludeUnhealthyTargets: boolean;
    skipMachineBehavior: string;
    targetRoles: string[];
}

export interface ProjectGitAnonymousPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
}

export interface ProjectGitLibraryPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: string;
    gitCredentialId: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
}

export interface ProjectGitUsernamePasswordPersistenceSetting {
    /**
     * The base path associated with these version control settings.
     */
    basePath?: string;
    /**
     * The default branch associated with these version control settings.
     */
    defaultBranch?: string;
    /**
     * The password for the Git credential
     */
    password: string;
    /**
     * A list of protected branch patterns.
     */
    protectedBranches?: string[];
    /**
     * The URL associated with these version control settings.
     */
    url: string;
    /**
     * The username for the Git credential.
     */
    username: string;
}

export interface ProjectJiraServiceManagementExtensionSetting {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: string;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: boolean;
    /**
     * The project name associated with this extension.
     */
    serviceDeskProjectName: string;
}

export interface ProjectReleaseCreationStrategy {
    channelId?: string;
    releaseCreationPackageStepId?: string;
    releaseCreationPackages?: outputs.ProjectReleaseCreationStrategyReleaseCreationPackage[];
}

export interface ProjectReleaseCreationStrategyReleaseCreationPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface ProjectServicenowExtensionSetting {
    /**
     * The connection identifier associated with the extension settings.
     */
    connectionId: string;
    /**
     * Specifies whether or not this extension is enabled for this project.
     */
    isEnabled: boolean;
    /**
     * Specifies whether or not this extension will automatically transition the state of a deployment for this project.
     */
    isStateAutomaticallyTransitioned: boolean;
    /**
     * The name of the standard change template associated with this extension. If provided, deployments will create a standard change based on the provided template, otherwise a normal change will be created.
     */
    standardChangeTemplateName?: string;
}

export interface ProjectTemplate {
    /**
     * A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
     */
    defaultValue?: string;
    /**
     * The display settings for the parameter.
     */
    displaySettings?: {[key: string]: string};
    /**
     * The help presented alongside the parameter input.
     */
    helpText?: string;
    /**
     * The ID of the template parameter.
     */
    id: string;
    /**
     * The label shown beside the parameter when presented in the deployment process.
     */
    label?: string;
    /**
     * The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods.
     */
    name: string;
}

export interface ProjectVersioningStrategy {
    donorPackageStepId?: string;
    donorPackages?: outputs.ProjectVersioningStrategyDonorPackage[];
    template: string;
}

export interface ProjectVersioningStrategyDonorPackage {
    deploymentAction?: string;
    packageReference?: string;
}

export interface RunbookConnectivityPolicy {
    allowDeploymentsToNoTargets: boolean;
    excludeUnhealthyTargets: boolean;
    skipMachineBehavior: string;
    targetRoles: string[];
}

export interface RunbookRetentionPolicy {
    /**
     * How many runs to keep per environment.
     */
    quantityToKeep: number;
    /**
     * Indicates if items should never be deleted. The default value is `false`.
     */
    shouldKeepForever: boolean;
}

export interface ScriptModuleScript {
    /**
     * The body of this script module.
     */
    body: string;
    /**
     * The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
     */
    syntax: string;
}

export interface VariablePrompt {
    /**
     * The description of this variable prompt option.
     */
    description: string;
    displaySettings?: outputs.VariablePromptDisplaySettings;
    isRequired?: boolean;
    label?: string;
}

export interface VariablePromptDisplaySettings {
    /**
     * The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
     */
    controlType: string;
    /**
     * If the `controlType` is `Select`, then this value defines an option.
     */
    selectOptions?: outputs.VariablePromptDisplaySettingsSelectOption[];
}

export interface VariablePromptDisplaySettingsSelectOption {
    /**
     * The display name for the select value
     */
    displayName: string;
    /**
     * The select value
     */
    value: string;
}

export interface VariableScope {
    /**
     * A list of actions that are scoped to this variable value.
     */
    actions?: string[];
    /**
     * A list of channels that are scoped to this variable value.
     */
    channels?: string[];
    /**
     * A list of environments that are scoped to this variable value.
     */
    environments?: string[];
    /**
     * A list of machines that are scoped to this variable value.
     */
    machines?: string[];
    /**
     * A list of processes that are scoped to this variable value.
     */
    processes?: string[];
    /**
     * A list of roles that are scoped to this variable value.
     */
    roles?: string[];
    /**
     * A list of tenant tags that are scoped to this variable value.
     */
    tenantTags?: string[];
}

