// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Octopusdeploy.Inputs
{

    public sealed class RunbookProcessStepDeployPackageActionWindowsServiceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The command line arguments that will be passed to the service when it starts
        /// </summary>
        [Input("arguments")]
        public Input<string>? Arguments { get; set; }

        [Input("createOrUpdateService")]
        public Input<bool>? CreateOrUpdateService { get; set; }

        /// <summary>
        /// The Windows/domain account of the custom user that the service will run under
        /// </summary>
        [Input("customAccountName")]
        public Input<string>? CustomAccountName { get; set; }

        [Input("customAccountPassword")]
        private Input<string>? _customAccountPassword;

        /// <summary>
        /// The password for the custom account
        /// </summary>
        public Input<string>? CustomAccountPassword
        {
            get => _customAccountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customAccountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Any dependencies that the service has. Separate the names using forward slashes (/).
        /// </summary>
        [Input("dependencies")]
        public Input<string>? Dependencies { get; set; }

        /// <summary>
        /// User-friendly description of the service (optional)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the service (optional)
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The path to the executable relative to the package installation directory
        /// </summary>
        [Input("executablePath", required: true)]
        public Input<string> ExecutablePath { get; set; } = null!;

        /// <summary>
        /// Which built-in account will the service run under. Can be LocalSystem, NT Authority\NetworkService, NT Authority\LocalService, _CUSTOM or an expression
        /// </summary>
        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        /// <summary>
        /// The name of the service
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        /// </summary>
        [Input("startMode")]
        public Input<string>? StartMode { get; set; }

        public RunbookProcessStepDeployPackageActionWindowsServiceGetArgs()
        {
        }
        public static new RunbookProcessStepDeployPackageActionWindowsServiceGetArgs Empty => new RunbookProcessStepDeployPackageActionWindowsServiceGetArgs();
    }
}
