// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Octopusdeploy
{
    /// <summary>
    /// A unique polling subscription ID that can be used by polling tentacles.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Octopusdeploy = Pulumi.Octopusdeploy;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Octopusdeploy.PollingSubscriptionId("example");
    /// 
    ///     var exampleWithDependencies = new Octopusdeploy.PollingSubscriptionId("exampleWithDependencies", new()
    ///     {
    ///         Dependencies = 
    ///         {
    ///             { "target", octopusdeploy_kubernetes_agent_deployment_target.Example.Id },
    ///         },
    ///     });
    /// 
    ///     // Usage
    ///     var agent = new Octopusdeploy.KubernetesAgentDeploymentTarget("agent", new()
    ///     {
    ///         Environments = new[]
    ///         {
    ///             "environments-1",
    ///         },
    ///         Roles = new[]
    ///         {
    ///             "role-1",
    ///             "role-2",
    ///         },
    ///         Thumbprint = "96203ED84246201C26A2F4360D7CBC36AC1D232D",
    ///         Uri = exampleWithDependencies.PollingUri,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [OctopusdeployResourceType("octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId")]
    public partial class PollingSubscriptionId : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional map of dependencies that when modified will trigger a re-creation of this resource.
        /// </summary>
        [Output("dependencies")]
        public Output<ImmutableDictionary<string, object>?> Dependencies { get; private set; } = null!;

        /// <summary>
        /// The URI of the polling subscription ID.
        /// </summary>
        [Output("pollingUri")]
        public Output<string> PollingUri { get; private set; } = null!;


        /// <summary>
        /// Create a PollingSubscriptionId resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PollingSubscriptionId(string name, PollingSubscriptionIdArgs? args = null, CustomResourceOptions? options = null)
            : base("octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId", name, args ?? new PollingSubscriptionIdArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PollingSubscriptionId(string name, Input<string> id, PollingSubscriptionIdState? state = null, CustomResourceOptions? options = null)
            : base("octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/OctopusDeploy/terraform-provider-octopusdeploy/releases",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PollingSubscriptionId resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PollingSubscriptionId Get(string name, Input<string> id, PollingSubscriptionIdState? state = null, CustomResourceOptions? options = null)
        {
            return new PollingSubscriptionId(name, id, state, options);
        }
    }

    public sealed class PollingSubscriptionIdArgs : global::Pulumi.ResourceArgs
    {
        [Input("dependencies")]
        private InputMap<object>? _dependencies;

        /// <summary>
        /// Optional map of dependencies that when modified will trigger a re-creation of this resource.
        /// </summary>
        public InputMap<object> Dependencies
        {
            get => _dependencies ?? (_dependencies = new InputMap<object>());
            set => _dependencies = value;
        }

        public PollingSubscriptionIdArgs()
        {
        }
        public static new PollingSubscriptionIdArgs Empty => new PollingSubscriptionIdArgs();
    }

    public sealed class PollingSubscriptionIdState : global::Pulumi.ResourceArgs
    {
        [Input("dependencies")]
        private InputMap<object>? _dependencies;

        /// <summary>
        /// Optional map of dependencies that when modified will trigger a re-creation of this resource.
        /// </summary>
        public InputMap<object> Dependencies
        {
            get => _dependencies ?? (_dependencies = new InputMap<object>());
            set => _dependencies = value;
        }

        /// <summary>
        /// The URI of the polling subscription ID.
        /// </summary>
        [Input("pollingUri")]
        public Input<string>? PollingUri { get; set; }

        public PollingSubscriptionIdState()
        {
        }
        public static new PollingSubscriptionIdState Empty => new PollingSubscriptionIdState();
    }
}
