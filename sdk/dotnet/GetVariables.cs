// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Octopusdeploy
{
    public static class GetVariables
    {
        /// <summary>
        /// Provides information about existing variables.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Octopusdeploy = Pulumi.Octopusdeploy;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Octopusdeploy.GetVariables.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVariablesResult> InvokeAsync(GetVariablesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVariablesResult>("octopusdeploy:index/getVariables:getVariables", args ?? new GetVariablesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about existing variables.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Octopusdeploy = Pulumi.Octopusdeploy;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Octopusdeploy.GetVariables.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVariablesResult> Invoke(GetVariablesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVariablesResult>("octopusdeploy:index/getVariables:getVariables", args ?? new GetVariablesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVariablesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of variable to find.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Owner ID for the variable to find.
        /// </summary>
        [Input("ownerId", required: true)]
        public string OwnerId { get; set; } = null!;

        [Input("scopes", required: true)]
        private List<Inputs.GetVariablesScopeArgs>? _scopes;

        /// <summary>
        /// As variable names can appear more than once under different scopes, a VariableScope must also be provided
        /// </summary>
        public List<Inputs.GetVariablesScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new List<Inputs.GetVariablesScopeArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// The space ID associated with this variable.
        /// </summary>
        [Input("spaceId")]
        public string? SpaceId { get; set; }

        public GetVariablesArgs()
        {
        }
        public static new GetVariablesArgs Empty => new GetVariablesArgs();
    }

    public sealed class GetVariablesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of variable to find.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Owner ID for the variable to find.
        /// </summary>
        [Input("ownerId", required: true)]
        public Input<string> OwnerId { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<Inputs.GetVariablesScopeInputArgs>? _scopes;

        /// <summary>
        /// As variable names can appear more than once under different scopes, a VariableScope must also be provided
        /// </summary>
        public InputList<Inputs.GetVariablesScopeInputArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.GetVariablesScopeInputArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// The space ID associated with this variable.
        /// </summary>
        [Input("spaceId")]
        public Input<string>? SpaceId { get; set; }

        public GetVariablesInvokeArgs()
        {
        }
        public static new GetVariablesInvokeArgs Empty => new GetVariablesInvokeArgs();
    }


    [OutputType]
    public sealed class GetVariablesResult
    {
        /// <summary>
        /// The description of this variable.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The identifier of the variable to find.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether or not this variable is considered editable.
        /// </summary>
        public readonly bool IsEditable;
        /// <summary>
        /// Indicates whether or not this resource is considered sensitive and should be kept secret.
        /// </summary>
        public readonly bool IsSensitive;
        /// <summary>
        /// The name of variable to find.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Owner ID for the variable to find.
        /// </summary>
        public readonly string OwnerId;
        public readonly ImmutableArray<Outputs.GetVariablesPromptResult> Prompts;
        /// <summary>
        /// As variable names can appear more than once under different scopes, a VariableScope must also be provided
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVariablesScopeResult> Scopes;
        public readonly string SensitiveValue;
        /// <summary>
        /// The space ID associated with this variable.
        /// </summary>
        public readonly string SpaceId;
        /// <summary>
        /// The type of variable represented by this resource. Valid types are `AmazonWebServicesAccount`, `AzureAccount`, `GoogleCloudAccount`, `UsernamePasswordAccount`, `Certificate`, `Sensitive`, `String`, `WorkerPool`.
        /// </summary>
        public readonly string Type;
        public readonly string Value;

        [OutputConstructor]
        private GetVariablesResult(
            string description,

            string id,

            bool isEditable,

            bool isSensitive,

            string name,

            string ownerId,

            ImmutableArray<Outputs.GetVariablesPromptResult> prompts,

            ImmutableArray<Outputs.GetVariablesScopeResult> scopes,

            string sensitiveValue,

            string spaceId,

            string type,

            string value)
        {
            Description = description;
            Id = id;
            IsEditable = isEditable;
            IsSensitive = isSensitive;
            Name = name;
            OwnerId = ownerId;
            Prompts = prompts;
            Scopes = scopes;
            SensitiveValue = sensitiveValue;
            SpaceId = spaceId;
            Type = type;
            Value = value;
        }
    }
}
