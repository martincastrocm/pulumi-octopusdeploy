# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetTenantProjectsResult',
    'AwaitableGetTenantProjectsResult',
    'get_tenant_projects',
    'get_tenant_projects_output',
]

@pulumi.output_type
class GetTenantProjectsResult:
    """
    A collection of values returned by getTenantProjects.
    """
    def __init__(__self__, environment_ids=None, id=None, project_ids=None, space_id=None, tenant_ids=None, tenant_projects=None):
        if environment_ids and not isinstance(environment_ids, list):
            raise TypeError("Expected argument 'environment_ids' to be a list")
        pulumi.set(__self__, "environment_ids", environment_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if tenant_ids and not isinstance(tenant_ids, list):
            raise TypeError("Expected argument 'tenant_ids' to be a list")
        pulumi.set(__self__, "tenant_ids", tenant_ids)
        if tenant_projects and not isinstance(tenant_projects, list):
            raise TypeError("Expected argument 'tenant_projects' to be a list")
        pulumi.set(__self__, "tenant_projects", tenant_projects)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this tenant projects.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[Sequence[str]]:
        """
        A filter to search by a list of IDs.
        """
        return pulumi.get(self, "tenant_ids")

    @property
    @pulumi.getter(name="tenantProjects")
    def tenant_projects(self) -> Sequence['outputs.GetTenantProjectsTenantProjectResult']:
        """
        A list of related tenants, projects and environments that match the filter(s).
        """
        return pulumi.get(self, "tenant_projects")


class AwaitableGetTenantProjectsResult(GetTenantProjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantProjectsResult(
            environment_ids=self.environment_ids,
            id=self.id,
            project_ids=self.project_ids,
            space_id=self.space_id,
            tenant_ids=self.tenant_ids,
            tenant_projects=self.tenant_projects)


def get_tenant_projects(environment_ids: Optional[Sequence[str]] = None,
                        project_ids: Optional[Sequence[str]] = None,
                        space_id: Optional[str] = None,
                        tenant_ids: Optional[Sequence[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantProjectsResult:
    """
    Provides information about existing tenants.


    :param Sequence[str] environment_ids: A filter to search by a list of IDs.
    :param Sequence[str] project_ids: A filter to search by a list of IDs.
    :param str space_id: The space ID associated with this tenant projects.
    :param Sequence[str] tenant_ids: A filter to search by a list of IDs.
    """
    __args__ = dict()
    __args__['environmentIds'] = environment_ids
    __args__['projectIds'] = project_ids
    __args__['spaceId'] = space_id
    __args__['tenantIds'] = tenant_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getTenantProjects:getTenantProjects', __args__, opts=opts, typ=GetTenantProjectsResult).value

    return AwaitableGetTenantProjectsResult(
        environment_ids=pulumi.get(__ret__, 'environment_ids'),
        id=pulumi.get(__ret__, 'id'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        space_id=pulumi.get(__ret__, 'space_id'),
        tenant_ids=pulumi.get(__ret__, 'tenant_ids'),
        tenant_projects=pulumi.get(__ret__, 'tenant_projects'))


@_utilities.lift_output_func(get_tenant_projects)
def get_tenant_projects_output(environment_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               project_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               space_id: Optional[pulumi.Input[Optional[str]]] = None,
                               tenant_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTenantProjectsResult]:
    """
    Provides information about existing tenants.


    :param Sequence[str] environment_ids: A filter to search by a list of IDs.
    :param Sequence[str] project_ids: A filter to search by a list of IDs.
    :param str space_id: The space ID associated with this tenant projects.
    :param Sequence[str] tenant_ids: A filter to search by a list of IDs.
    """
    ...
