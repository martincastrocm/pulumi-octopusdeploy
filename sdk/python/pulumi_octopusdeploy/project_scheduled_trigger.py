# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectScheduledTriggerArgs', 'ProjectScheduledTrigger']

@pulumi.input_type
class ProjectScheduledTriggerArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 space_id: pulumi.Input[str],
                 channel_id: Optional[pulumi.Input[str]] = None,
                 continuous_daily_schedule: Optional[pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs']] = None,
                 cron_expression_schedule: Optional[pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs']] = None,
                 days_per_month_schedule: Optional[pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs']] = None,
                 deploy_latest_release_action: Optional[pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs']] = None,
                 deploy_new_release_action: Optional[pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_daily_schedule: Optional[pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs']] = None,
                 run_runbook_action: Optional[pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs']] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProjectScheduledTrigger resource.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[str] space_id: The space ID where this trigger's project exists.
        :param pulumi.Input[str] channel_id: The channel ID to use when creating the release. Will use the default channel if left blank.
        :param pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs'] continuous_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs'] cron_expression_schedule: The cron expression schedule for the trigger.
        :param pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs'] days_per_month_schedule: The daily schedule for the trigger.
        :param pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs'] deploy_latest_release_action: Configuration for deploying the latest release. Can not be used with 'deploy*new*release*action' or 'run*runbook*action'.
        :param pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs'] deploy_new_release_action: Configuration for deploying a new release. Can not be used with 'deploy*latest*release*action' or 'run*runbook*action'.
        :param pulumi.Input[str] description: A description of the trigger.
        :param pulumi.Input[bool] is_disabled: Indicates whether the trigger is disabled.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs'] once_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs'] run_runbook_action: Configuration for running a runbook. Can not be used with 'deploy*latest*release*action' or 'deploy*new*release*action'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The IDs of the tenants to deploy to.
        :param pulumi.Input[str] timezone: The timezone for the trigger.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "space_id", space_id)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if continuous_daily_schedule is not None:
            pulumi.set(__self__, "continuous_daily_schedule", continuous_daily_schedule)
        if cron_expression_schedule is not None:
            pulumi.set(__self__, "cron_expression_schedule", cron_expression_schedule)
        if days_per_month_schedule is not None:
            pulumi.set(__self__, "days_per_month_schedule", days_per_month_schedule)
        if deploy_latest_release_action is not None:
            pulumi.set(__self__, "deploy_latest_release_action", deploy_latest_release_action)
        if deploy_new_release_action is not None:
            pulumi.set(__self__, "deploy_new_release_action", deploy_new_release_action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if once_daily_schedule is not None:
            pulumi.set(__self__, "once_daily_schedule", once_daily_schedule)
        if run_runbook_action is not None:
            pulumi.set(__self__, "run_runbook_action", run_runbook_action)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[str]:
        """
        The space ID where this trigger's project exists.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The channel ID to use when creating the release. Will use the default channel if left blank.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="continuousDailySchedule")
    def continuous_daily_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "continuous_daily_schedule")

    @continuous_daily_schedule.setter
    def continuous_daily_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs']]):
        pulumi.set(self, "continuous_daily_schedule", value)

    @property
    @pulumi.getter(name="cronExpressionSchedule")
    def cron_expression_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs']]:
        """
        The cron expression schedule for the trigger.
        """
        return pulumi.get(self, "cron_expression_schedule")

    @cron_expression_schedule.setter
    def cron_expression_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs']]):
        pulumi.set(self, "cron_expression_schedule", value)

    @property
    @pulumi.getter(name="daysPerMonthSchedule")
    def days_per_month_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "days_per_month_schedule")

    @days_per_month_schedule.setter
    def days_per_month_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs']]):
        pulumi.set(self, "days_per_month_schedule", value)

    @property
    @pulumi.getter(name="deployLatestReleaseAction")
    def deploy_latest_release_action(self) -> Optional[pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs']]:
        """
        Configuration for deploying the latest release. Can not be used with 'deploy*new*release*action' or 'run*runbook*action'.
        """
        return pulumi.get(self, "deploy_latest_release_action")

    @deploy_latest_release_action.setter
    def deploy_latest_release_action(self, value: Optional[pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs']]):
        pulumi.set(self, "deploy_latest_release_action", value)

    @property
    @pulumi.getter(name="deployNewReleaseAction")
    def deploy_new_release_action(self) -> Optional[pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs']]:
        """
        Configuration for deploying a new release. Can not be used with 'deploy*latest*release*action' or 'run*runbook*action'.
        """
        return pulumi.get(self, "deploy_new_release_action")

    @deploy_new_release_action.setter
    def deploy_new_release_action(self, value: Optional[pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs']]):
        pulumi.set(self, "deploy_new_release_action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the trigger is disabled.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onceDailySchedule")
    def once_daily_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "once_daily_schedule")

    @once_daily_schedule.setter
    def once_daily_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs']]):
        pulumi.set(self, "once_daily_schedule", value)

    @property
    @pulumi.getter(name="runRunbookAction")
    def run_runbook_action(self) -> Optional[pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs']]:
        """
        Configuration for running a runbook. Can not be used with 'deploy*latest*release*action' or 'deploy*new*release*action'.
        """
        return pulumi.get(self, "run_runbook_action")

    @run_runbook_action.setter
    def run_runbook_action(self, value: Optional[pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs']]):
        pulumi.set(self, "run_runbook_action", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the tenants to deploy to.
        """
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone for the trigger.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class _ProjectScheduledTriggerState:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 continuous_daily_schedule: Optional[pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs']] = None,
                 cron_expression_schedule: Optional[pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs']] = None,
                 days_per_month_schedule: Optional[pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs']] = None,
                 deploy_latest_release_action: Optional[pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs']] = None,
                 deploy_new_release_action: Optional[pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_daily_schedule: Optional[pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs']] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 run_runbook_action: Optional[pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs']] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProjectScheduledTrigger resources.
        :param pulumi.Input[str] channel_id: The channel ID to use when creating the release. Will use the default channel if left blank.
        :param pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs'] continuous_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs'] cron_expression_schedule: The cron expression schedule for the trigger.
        :param pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs'] days_per_month_schedule: The daily schedule for the trigger.
        :param pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs'] deploy_latest_release_action: Configuration for deploying the latest release. Can not be used with 'deploy*new*release*action' or 'run*runbook*action'.
        :param pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs'] deploy_new_release_action: Configuration for deploying a new release. Can not be used with 'deploy*latest*release*action' or 'run*runbook*action'.
        :param pulumi.Input[str] description: A description of the trigger.
        :param pulumi.Input[bool] is_disabled: Indicates whether the trigger is disabled.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs'] once_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs'] run_runbook_action: Configuration for running a runbook. Can not be used with 'deploy*latest*release*action' or 'deploy*new*release*action'.
        :param pulumi.Input[str] space_id: The space ID where this trigger's project exists.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The IDs of the tenants to deploy to.
        :param pulumi.Input[str] timezone: The timezone for the trigger.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if continuous_daily_schedule is not None:
            pulumi.set(__self__, "continuous_daily_schedule", continuous_daily_schedule)
        if cron_expression_schedule is not None:
            pulumi.set(__self__, "cron_expression_schedule", cron_expression_schedule)
        if days_per_month_schedule is not None:
            pulumi.set(__self__, "days_per_month_schedule", days_per_month_schedule)
        if deploy_latest_release_action is not None:
            pulumi.set(__self__, "deploy_latest_release_action", deploy_latest_release_action)
        if deploy_new_release_action is not None:
            pulumi.set(__self__, "deploy_new_release_action", deploy_new_release_action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if once_daily_schedule is not None:
            pulumi.set(__self__, "once_daily_schedule", once_daily_schedule)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if run_runbook_action is not None:
            pulumi.set(__self__, "run_runbook_action", run_runbook_action)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The channel ID to use when creating the release. Will use the default channel if left blank.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="continuousDailySchedule")
    def continuous_daily_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "continuous_daily_schedule")

    @continuous_daily_schedule.setter
    def continuous_daily_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerContinuousDailyScheduleArgs']]):
        pulumi.set(self, "continuous_daily_schedule", value)

    @property
    @pulumi.getter(name="cronExpressionSchedule")
    def cron_expression_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs']]:
        """
        The cron expression schedule for the trigger.
        """
        return pulumi.get(self, "cron_expression_schedule")

    @cron_expression_schedule.setter
    def cron_expression_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerCronExpressionScheduleArgs']]):
        pulumi.set(self, "cron_expression_schedule", value)

    @property
    @pulumi.getter(name="daysPerMonthSchedule")
    def days_per_month_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "days_per_month_schedule")

    @days_per_month_schedule.setter
    def days_per_month_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerDaysPerMonthScheduleArgs']]):
        pulumi.set(self, "days_per_month_schedule", value)

    @property
    @pulumi.getter(name="deployLatestReleaseAction")
    def deploy_latest_release_action(self) -> Optional[pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs']]:
        """
        Configuration for deploying the latest release. Can not be used with 'deploy*new*release*action' or 'run*runbook*action'.
        """
        return pulumi.get(self, "deploy_latest_release_action")

    @deploy_latest_release_action.setter
    def deploy_latest_release_action(self, value: Optional[pulumi.Input['ProjectScheduledTriggerDeployLatestReleaseActionArgs']]):
        pulumi.set(self, "deploy_latest_release_action", value)

    @property
    @pulumi.getter(name="deployNewReleaseAction")
    def deploy_new_release_action(self) -> Optional[pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs']]:
        """
        Configuration for deploying a new release. Can not be used with 'deploy*latest*release*action' or 'run*runbook*action'.
        """
        return pulumi.get(self, "deploy_new_release_action")

    @deploy_new_release_action.setter
    def deploy_new_release_action(self, value: Optional[pulumi.Input['ProjectScheduledTriggerDeployNewReleaseActionArgs']]):
        pulumi.set(self, "deploy_new_release_action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the trigger is disabled.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onceDailySchedule")
    def once_daily_schedule(self) -> Optional[pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "once_daily_schedule")

    @once_daily_schedule.setter
    def once_daily_schedule(self, value: Optional[pulumi.Input['ProjectScheduledTriggerOnceDailyScheduleArgs']]):
        pulumi.set(self, "once_daily_schedule", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="runRunbookAction")
    def run_runbook_action(self) -> Optional[pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs']]:
        """
        Configuration for running a runbook. Can not be used with 'deploy*latest*release*action' or 'deploy*new*release*action'.
        """
        return pulumi.get(self, "run_runbook_action")

    @run_runbook_action.setter
    def run_runbook_action(self, value: Optional[pulumi.Input['ProjectScheduledTriggerRunRunbookActionArgs']]):
        pulumi.set(self, "run_runbook_action", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID where this trigger's project exists.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of the tenants to deploy to.
        """
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone for the trigger.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


class ProjectScheduledTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 continuous_daily_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerContinuousDailyScheduleArgs']]] = None,
                 cron_expression_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerCronExpressionScheduleArgs']]] = None,
                 days_per_month_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDaysPerMonthScheduleArgs']]] = None,
                 deploy_latest_release_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployLatestReleaseActionArgs']]] = None,
                 deploy_new_release_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployNewReleaseActionArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_daily_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerOnceDailyScheduleArgs']]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 run_runbook_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerRunRunbookActionArgs']]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages a scheduled trigger for a project or runbook in Octopus Deploy.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        once_daily_example = octopusdeploy.ProjectScheduledTrigger("onceDailyExample",
            deploy_new_release_action=octopusdeploy.ProjectScheduledTriggerDeployNewReleaseActionArgs(
                destination_environment_id="environments-123",
            ),
            description="This is a once daily schedule",
            once_daily_schedule=octopusdeploy.ProjectScheduledTriggerOnceDailyScheduleArgs(
                days_of_weeks=[
                    "Tuesday",
                    "Wednesday",
                    "Monday",
                ],
                start_time="2024-03-22T09:00:00",
            ),
            project_id="projects-123",
            space_id="spaces-123")
        continuous_example = octopusdeploy.ProjectScheduledTrigger("continuousExample",
            continuous_daily_schedule=octopusdeploy.ProjectScheduledTriggerContinuousDailyScheduleArgs(
                days_of_weeks=[
                    "Monday",
                    "Tuesday",
                    "Friday",
                ],
                hour_interval=3,
                interval="OnceHourly",
                run_after="2024-03-22T09:00:00",
                run_until="2024-03-29T13:00:00",
            ),
            deploy_new_release_action=octopusdeploy.ProjectScheduledTriggerDeployNewReleaseActionArgs(
                destination_environment_id="environments-123",
            ),
            description="This is a continuous daily schedule",
            project_id="projects-123",
            space_id="spaces-123")
        deploy_latest_example = octopusdeploy.ProjectScheduledTrigger("deployLatestExample",
            cron_expression_schedule=octopusdeploy.ProjectScheduledTriggerCronExpressionScheduleArgs(
                cron_expression="0 0 06 * * Mon-Fri",
            ),
            deploy_latest_release_action=octopusdeploy.ProjectScheduledTriggerDeployLatestReleaseActionArgs(
                destination_environment_id="environments-123",
                should_redeploy=True,
                source_environment_id="environments-321",
            ),
            project_id="projects-123",
            space_id="spaces-123")
        deploy_new_example = octopusdeploy.ProjectScheduledTrigger("deployNewExample",
            cron_expression_schedule=octopusdeploy.ProjectScheduledTriggerCronExpressionScheduleArgs(
                cron_expression="0 0 06 * * Mon-Fri",
            ),
            deploy_new_release_action=octopusdeploy.ProjectScheduledTriggerDeployNewReleaseActionArgs(
                destination_environment_id="environments-123",
            ),
            project_id="projects-123",
            space_id="spaces-123")
        runbook_example = octopusdeploy.ProjectScheduledTrigger("runbookExample",
            cron_expression_schedule=octopusdeploy.ProjectScheduledTriggerCronExpressionScheduleArgs(
                cron_expression="0 0 06 * * Mon-Fri",
            ),
            description="This is a Cron schedule",
            project_id="projects-123",
            run_runbook_action=octopusdeploy.ProjectScheduledTriggerRunRunbookActionArgs(
                runbook_id="runbooks-123",
                target_environment_ids=[
                    "environments-123",
                    "environments-321",
                ],
            ),
            space_id="spaces-123")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ```sh
        $ pulumi import octopusdeploy:index/projectScheduledTrigger:ProjectScheduledTrigger [options] octopusdeploy_project_scheduled_trigger.<name> <trigger-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: The channel ID to use when creating the release. Will use the default channel if left blank.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerContinuousDailyScheduleArgs']] continuous_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerCronExpressionScheduleArgs']] cron_expression_schedule: The cron expression schedule for the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDaysPerMonthScheduleArgs']] days_per_month_schedule: The daily schedule for the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployLatestReleaseActionArgs']] deploy_latest_release_action: Configuration for deploying the latest release. Can not be used with 'deploy*new*release*action' or 'run*runbook*action'.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployNewReleaseActionArgs']] deploy_new_release_action: Configuration for deploying a new release. Can not be used with 'deploy*latest*release*action' or 'run*runbook*action'.
        :param pulumi.Input[str] description: A description of the trigger.
        :param pulumi.Input[bool] is_disabled: Indicates whether the trigger is disabled.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerOnceDailyScheduleArgs']] once_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerRunRunbookActionArgs']] run_runbook_action: Configuration for running a runbook. Can not be used with 'deploy*latest*release*action' or 'deploy*new*release*action'.
        :param pulumi.Input[str] space_id: The space ID where this trigger's project exists.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The IDs of the tenants to deploy to.
        :param pulumi.Input[str] timezone: The timezone for the trigger.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectScheduledTriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages a scheduled trigger for a project or runbook in Octopus Deploy.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        once_daily_example = octopusdeploy.ProjectScheduledTrigger("onceDailyExample",
            deploy_new_release_action=octopusdeploy.ProjectScheduledTriggerDeployNewReleaseActionArgs(
                destination_environment_id="environments-123",
            ),
            description="This is a once daily schedule",
            once_daily_schedule=octopusdeploy.ProjectScheduledTriggerOnceDailyScheduleArgs(
                days_of_weeks=[
                    "Tuesday",
                    "Wednesday",
                    "Monday",
                ],
                start_time="2024-03-22T09:00:00",
            ),
            project_id="projects-123",
            space_id="spaces-123")
        continuous_example = octopusdeploy.ProjectScheduledTrigger("continuousExample",
            continuous_daily_schedule=octopusdeploy.ProjectScheduledTriggerContinuousDailyScheduleArgs(
                days_of_weeks=[
                    "Monday",
                    "Tuesday",
                    "Friday",
                ],
                hour_interval=3,
                interval="OnceHourly",
                run_after="2024-03-22T09:00:00",
                run_until="2024-03-29T13:00:00",
            ),
            deploy_new_release_action=octopusdeploy.ProjectScheduledTriggerDeployNewReleaseActionArgs(
                destination_environment_id="environments-123",
            ),
            description="This is a continuous daily schedule",
            project_id="projects-123",
            space_id="spaces-123")
        deploy_latest_example = octopusdeploy.ProjectScheduledTrigger("deployLatestExample",
            cron_expression_schedule=octopusdeploy.ProjectScheduledTriggerCronExpressionScheduleArgs(
                cron_expression="0 0 06 * * Mon-Fri",
            ),
            deploy_latest_release_action=octopusdeploy.ProjectScheduledTriggerDeployLatestReleaseActionArgs(
                destination_environment_id="environments-123",
                should_redeploy=True,
                source_environment_id="environments-321",
            ),
            project_id="projects-123",
            space_id="spaces-123")
        deploy_new_example = octopusdeploy.ProjectScheduledTrigger("deployNewExample",
            cron_expression_schedule=octopusdeploy.ProjectScheduledTriggerCronExpressionScheduleArgs(
                cron_expression="0 0 06 * * Mon-Fri",
            ),
            deploy_new_release_action=octopusdeploy.ProjectScheduledTriggerDeployNewReleaseActionArgs(
                destination_environment_id="environments-123",
            ),
            project_id="projects-123",
            space_id="spaces-123")
        runbook_example = octopusdeploy.ProjectScheduledTrigger("runbookExample",
            cron_expression_schedule=octopusdeploy.ProjectScheduledTriggerCronExpressionScheduleArgs(
                cron_expression="0 0 06 * * Mon-Fri",
            ),
            description="This is a Cron schedule",
            project_id="projects-123",
            run_runbook_action=octopusdeploy.ProjectScheduledTriggerRunRunbookActionArgs(
                runbook_id="runbooks-123",
                target_environment_ids=[
                    "environments-123",
                    "environments-321",
                ],
            ),
            space_id="spaces-123")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ```sh
        $ pulumi import octopusdeploy:index/projectScheduledTrigger:ProjectScheduledTrigger [options] octopusdeploy_project_scheduled_trigger.<name> <trigger-id>
        ```

        :param str resource_name: The name of the resource.
        :param ProjectScheduledTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectScheduledTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 continuous_daily_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerContinuousDailyScheduleArgs']]] = None,
                 cron_expression_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerCronExpressionScheduleArgs']]] = None,
                 days_per_month_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDaysPerMonthScheduleArgs']]] = None,
                 deploy_latest_release_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployLatestReleaseActionArgs']]] = None,
                 deploy_new_release_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployNewReleaseActionArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_daily_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerOnceDailyScheduleArgs']]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 run_runbook_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerRunRunbookActionArgs']]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectScheduledTriggerArgs.__new__(ProjectScheduledTriggerArgs)

            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["continuous_daily_schedule"] = continuous_daily_schedule
            __props__.__dict__["cron_expression_schedule"] = cron_expression_schedule
            __props__.__dict__["days_per_month_schedule"] = days_per_month_schedule
            __props__.__dict__["deploy_latest_release_action"] = deploy_latest_release_action
            __props__.__dict__["deploy_new_release_action"] = deploy_new_release_action
            __props__.__dict__["description"] = description
            __props__.__dict__["is_disabled"] = is_disabled
            __props__.__dict__["name"] = name
            __props__.__dict__["once_daily_schedule"] = once_daily_schedule
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["run_runbook_action"] = run_runbook_action
            if space_id is None and not opts.urn:
                raise TypeError("Missing required property 'space_id'")
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["tenant_ids"] = tenant_ids
            __props__.__dict__["timezone"] = timezone
        super(ProjectScheduledTrigger, __self__).__init__(
            'octopusdeploy:index/projectScheduledTrigger:ProjectScheduledTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            continuous_daily_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerContinuousDailyScheduleArgs']]] = None,
            cron_expression_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerCronExpressionScheduleArgs']]] = None,
            days_per_month_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDaysPerMonthScheduleArgs']]] = None,
            deploy_latest_release_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployLatestReleaseActionArgs']]] = None,
            deploy_new_release_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployNewReleaseActionArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_disabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            once_daily_schedule: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerOnceDailyScheduleArgs']]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            run_runbook_action: Optional[pulumi.Input[pulumi.InputType['ProjectScheduledTriggerRunRunbookActionArgs']]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            timezone: Optional[pulumi.Input[str]] = None) -> 'ProjectScheduledTrigger':
        """
        Get an existing ProjectScheduledTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: The channel ID to use when creating the release. Will use the default channel if left blank.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerContinuousDailyScheduleArgs']] continuous_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerCronExpressionScheduleArgs']] cron_expression_schedule: The cron expression schedule for the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDaysPerMonthScheduleArgs']] days_per_month_schedule: The daily schedule for the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployLatestReleaseActionArgs']] deploy_latest_release_action: Configuration for deploying the latest release. Can not be used with 'deploy*new*release*action' or 'run*runbook*action'.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerDeployNewReleaseActionArgs']] deploy_new_release_action: Configuration for deploying a new release. Can not be used with 'deploy*latest*release*action' or 'run*runbook*action'.
        :param pulumi.Input[str] description: A description of the trigger.
        :param pulumi.Input[bool] is_disabled: Indicates whether the trigger is disabled.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerOnceDailyScheduleArgs']] once_daily_schedule: The daily schedule for the trigger.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[pulumi.InputType['ProjectScheduledTriggerRunRunbookActionArgs']] run_runbook_action: Configuration for running a runbook. Can not be used with 'deploy*latest*release*action' or 'deploy*new*release*action'.
        :param pulumi.Input[str] space_id: The space ID where this trigger's project exists.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_ids: The IDs of the tenants to deploy to.
        :param pulumi.Input[str] timezone: The timezone for the trigger.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectScheduledTriggerState.__new__(_ProjectScheduledTriggerState)

        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["continuous_daily_schedule"] = continuous_daily_schedule
        __props__.__dict__["cron_expression_schedule"] = cron_expression_schedule
        __props__.__dict__["days_per_month_schedule"] = days_per_month_schedule
        __props__.__dict__["deploy_latest_release_action"] = deploy_latest_release_action
        __props__.__dict__["deploy_new_release_action"] = deploy_new_release_action
        __props__.__dict__["description"] = description
        __props__.__dict__["is_disabled"] = is_disabled
        __props__.__dict__["name"] = name
        __props__.__dict__["once_daily_schedule"] = once_daily_schedule
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["run_runbook_action"] = run_runbook_action
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["tenant_ids"] = tenant_ids
        __props__.__dict__["timezone"] = timezone
        return ProjectScheduledTrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[Optional[str]]:
        """
        The channel ID to use when creating the release. Will use the default channel if left blank.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="continuousDailySchedule")
    def continuous_daily_schedule(self) -> pulumi.Output[Optional['outputs.ProjectScheduledTriggerContinuousDailySchedule']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "continuous_daily_schedule")

    @property
    @pulumi.getter(name="cronExpressionSchedule")
    def cron_expression_schedule(self) -> pulumi.Output[Optional['outputs.ProjectScheduledTriggerCronExpressionSchedule']]:
        """
        The cron expression schedule for the trigger.
        """
        return pulumi.get(self, "cron_expression_schedule")

    @property
    @pulumi.getter(name="daysPerMonthSchedule")
    def days_per_month_schedule(self) -> pulumi.Output[Optional['outputs.ProjectScheduledTriggerDaysPerMonthSchedule']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "days_per_month_schedule")

    @property
    @pulumi.getter(name="deployLatestReleaseAction")
    def deploy_latest_release_action(self) -> pulumi.Output[Optional['outputs.ProjectScheduledTriggerDeployLatestReleaseAction']]:
        """
        Configuration for deploying the latest release. Can not be used with 'deploy*new*release*action' or 'run*runbook*action'.
        """
        return pulumi.get(self, "deploy_latest_release_action")

    @property
    @pulumi.getter(name="deployNewReleaseAction")
    def deploy_new_release_action(self) -> pulumi.Output[Optional['outputs.ProjectScheduledTriggerDeployNewReleaseAction']]:
        """
        Configuration for deploying a new release. Can not be used with 'deploy*latest*release*action' or 'run*runbook*action'.
        """
        return pulumi.get(self, "deploy_new_release_action")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description of the trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the trigger is disabled.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onceDailySchedule")
    def once_daily_schedule(self) -> pulumi.Output[Optional['outputs.ProjectScheduledTriggerOnceDailySchedule']]:
        """
        The daily schedule for the trigger.
        """
        return pulumi.get(self, "once_daily_schedule")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="runRunbookAction")
    def run_runbook_action(self) -> pulumi.Output[Optional['outputs.ProjectScheduledTriggerRunRunbookAction']]:
        """
        Configuration for running a runbook. Can not be used with 'deploy*latest*release*action' or 'deploy*new*release*action'.
        """
        return pulumi.get(self, "run_runbook_action")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID where this trigger's project exists.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The IDs of the tenants to deploy to.
        """
        return pulumi.get(self, "tenant_ids")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[str]]:
        """
        The timezone for the trigger.
        """
        return pulumi.get(self, "timezone")

