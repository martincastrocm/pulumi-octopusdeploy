# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGitCredentialsResult',
    'AwaitableGetGitCredentialsResult',
    'get_git_credentials',
    'get_git_credentials_output',
]

@pulumi.output_type
class GetGitCredentialsResult:
    """
    A collection of values returned by getGitCredentials.
    """
    def __init__(__self__, git_credentials=None, id=None, name=None, skip=None, space_id=None, take=None):
        if git_credentials and not isinstance(git_credentials, list):
            raise TypeError("Expected argument 'git_credentials' to be a list")
        pulumi.set(__self__, "git_credentials", git_credentials)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if skip and not isinstance(skip, int):
            raise TypeError("Expected argument 'skip' to be a int")
        pulumi.set(__self__, "skip", skip)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if take and not isinstance(take, int):
            raise TypeError("Expected argument 'take' to be a int")
        pulumi.set(__self__, "take", take)

    @property
    @pulumi.getter(name="gitCredentials")
    def git_credentials(self) -> Sequence['outputs.GetGitCredentialsGitCredentialResult']:
        """
        Provides information about existing GitCredentials.
        """
        return pulumi.get(self, "git_credentials")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the Git Credential to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def skip(self) -> Optional[int]:
        """
        The number of records to skip.
        """
        return pulumi.get(self, "skip")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[str]:
        """
        The space ID associated with this Git Credential.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def take(self) -> Optional[int]:
        """
        The number of records to take.
        """
        return pulumi.get(self, "take")


class AwaitableGetGitCredentialsResult(GetGitCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGitCredentialsResult(
            git_credentials=self.git_credentials,
            id=self.id,
            name=self.name,
            skip=self.skip,
            space_id=self.space_id,
            take=self.take)


def get_git_credentials(name: Optional[str] = None,
                        skip: Optional[int] = None,
                        space_id: Optional[str] = None,
                        take: Optional[int] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGitCredentialsResult:
    """
    Use this data source to retrieve information about Git credentials in Octopus Deploy.


    :param str name: The name of the Git Credential to filter by.
    :param int skip: The number of records to skip.
    :param str space_id: The space ID associated with this Git Credential.
    :param int take: The number of records to take.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['skip'] = skip
    __args__['spaceId'] = space_id
    __args__['take'] = take
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('octopusdeploy:index/getGitCredentials:getGitCredentials', __args__, opts=opts, typ=GetGitCredentialsResult).value

    return AwaitableGetGitCredentialsResult(
        git_credentials=pulumi.get(__ret__, 'git_credentials'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        skip=pulumi.get(__ret__, 'skip'),
        space_id=pulumi.get(__ret__, 'space_id'),
        take=pulumi.get(__ret__, 'take'))


@_utilities.lift_output_func(get_git_credentials)
def get_git_credentials_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                               skip: Optional[pulumi.Input[Optional[int]]] = None,
                               space_id: Optional[pulumi.Input[Optional[str]]] = None,
                               take: Optional[pulumi.Input[Optional[int]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGitCredentialsResult]:
    """
    Use this data source to retrieve information about Git credentials in Octopus Deploy.


    :param str name: The name of the Git Credential to filter by.
    :param int skip: The number of records to skip.
    :param str space_id: The space ID associated with this Git Credential.
    :param int take: The number of records to take.
    """
    ...
