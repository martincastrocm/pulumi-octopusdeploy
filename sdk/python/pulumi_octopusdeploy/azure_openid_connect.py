# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AzureOpenidConnectArgs', 'AzureOpenidConnect']

@pulumi.input_type
class AzureOpenidConnectArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 account_test_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 authentication_endpoint: Optional[pulumi.Input[str]] = None,
                 azure_environment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execution_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_manager_endpoint: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a AzureOpenidConnect resource.
        :param pulumi.Input[str] application_id: The application ID of this resource.
        :param pulumi.Input[str] subscription_id: The subscription ID of this resource.
        :param pulumi.Input[str] tenant_id: The tenant ID of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_test_subject_keys: Keys to include in an account test. Valid options are: `space`, `account`, `type`
        :param pulumi.Input[str] audience: Federated credentials audience, this value is used to establish a connection between external workload identities and Microsoft Entra ID.
        :param pulumi.Input[str] authentication_endpoint: The authentication endpoint URI for this resource.
        :param pulumi.Input[str] azure_environment: The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        :param pulumi.Input[str] description: The description of this Azure OpenID Connect account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] execution_subject_keys: Keys to include in a deployment or runbook. Valid options are `space`, `environment`, `project`, `tenant`, `runbook`, `account`, `type`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] health_subject_keys: Keys to include in a health check. Valid options are `space`, `account`, `target`, `type`
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] resource_manager_endpoint: The resource manager endpoint URI for this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if account_test_subject_keys is not None:
            pulumi.set(__self__, "account_test_subject_keys", account_test_subject_keys)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authentication_endpoint is not None:
            pulumi.set(__self__, "authentication_endpoint", authentication_endpoint)
        if azure_environment is not None:
            pulumi.set(__self__, "azure_environment", azure_environment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_subject_keys is not None:
            pulumi.set(__self__, "execution_subject_keys", execution_subject_keys)
        if health_subject_keys is not None:
            pulumi.set(__self__, "health_subject_keys", health_subject_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_manager_endpoint is not None:
            pulumi.set(__self__, "resource_manager_endpoint", resource_manager_endpoint)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The application ID of this resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        The subscription ID of this resource.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant ID of this resource.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="accountTestSubjectKeys")
    def account_test_subject_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Keys to include in an account test. Valid options are: `space`, `account`, `type`
        """
        return pulumi.get(self, "account_test_subject_keys")

    @account_test_subject_keys.setter
    def account_test_subject_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_test_subject_keys", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Federated credentials audience, this value is used to establish a connection between external workload identities and Microsoft Entra ID.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="authenticationEndpoint")
    def authentication_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The authentication endpoint URI for this resource.
        """
        return pulumi.get(self, "authentication_endpoint")

    @authentication_endpoint.setter
    def authentication_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_endpoint", value)

    @property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        """
        return pulumi.get(self, "azure_environment")

    @azure_environment.setter
    def azure_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_environment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this Azure OpenID Connect account.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="executionSubjectKeys")
    def execution_subject_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Keys to include in a deployment or runbook. Valid options are `space`, `environment`, `project`, `tenant`, `runbook`, `account`, `type`
        """
        return pulumi.get(self, "execution_subject_keys")

    @execution_subject_keys.setter
    def execution_subject_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "execution_subject_keys", value)

    @property
    @pulumi.getter(name="healthSubjectKeys")
    def health_subject_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Keys to include in a health check. Valid options are `space`, `account`, `target`, `type`
        """
        return pulumi.get(self, "health_subject_keys")

    @health_subject_keys.setter
    def health_subject_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "health_subject_keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceManagerEndpoint")
    def resource_manager_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The resource manager endpoint URI for this resource.
        """
        return pulumi.get(self, "resource_manager_endpoint")

    @resource_manager_endpoint.setter
    def resource_manager_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_manager_endpoint", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)


@pulumi.input_type
class _AzureOpenidConnectState:
    def __init__(__self__, *,
                 account_test_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 authentication_endpoint: Optional[pulumi.Input[str]] = None,
                 azure_environment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execution_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_manager_endpoint: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering AzureOpenidConnect resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_test_subject_keys: Keys to include in an account test. Valid options are: `space`, `account`, `type`
        :param pulumi.Input[str] application_id: The application ID of this resource.
        :param pulumi.Input[str] audience: Federated credentials audience, this value is used to establish a connection between external workload identities and Microsoft Entra ID.
        :param pulumi.Input[str] authentication_endpoint: The authentication endpoint URI for this resource.
        :param pulumi.Input[str] azure_environment: The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        :param pulumi.Input[str] description: The description of this Azure OpenID Connect account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] execution_subject_keys: Keys to include in a deployment or runbook. Valid options are `space`, `environment`, `project`, `tenant`, `runbook`, `account`, `type`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] health_subject_keys: Keys to include in a health check. Valid options are `space`, `account`, `target`, `type`
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] resource_manager_endpoint: The resource manager endpoint URI for this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[str] subscription_id: The subscription ID of this resource.
        :param pulumi.Input[str] tenant_id: The tenant ID of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        if account_test_subject_keys is not None:
            pulumi.set(__self__, "account_test_subject_keys", account_test_subject_keys)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if authentication_endpoint is not None:
            pulumi.set(__self__, "authentication_endpoint", authentication_endpoint)
        if azure_environment is not None:
            pulumi.set(__self__, "azure_environment", azure_environment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if execution_subject_keys is not None:
            pulumi.set(__self__, "execution_subject_keys", execution_subject_keys)
        if health_subject_keys is not None:
            pulumi.set(__self__, "health_subject_keys", health_subject_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_manager_endpoint is not None:
            pulumi.set(__self__, "resource_manager_endpoint", resource_manager_endpoint)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if tenanted_deployment_participation is not None:
            pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter(name="accountTestSubjectKeys")
    def account_test_subject_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Keys to include in an account test. Valid options are: `space`, `account`, `type`
        """
        return pulumi.get(self, "account_test_subject_keys")

    @account_test_subject_keys.setter
    def account_test_subject_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_test_subject_keys", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The application ID of this resource.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Federated credentials audience, this value is used to establish a connection between external workload identities and Microsoft Entra ID.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="authenticationEndpoint")
    def authentication_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The authentication endpoint URI for this resource.
        """
        return pulumi.get(self, "authentication_endpoint")

    @authentication_endpoint.setter
    def authentication_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_endpoint", value)

    @property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        """
        return pulumi.get(self, "azure_environment")

    @azure_environment.setter
    def azure_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_environment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this Azure OpenID Connect account.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="executionSubjectKeys")
    def execution_subject_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Keys to include in a deployment or runbook. Valid options are `space`, `environment`, `project`, `tenant`, `runbook`, `account`, `type`
        """
        return pulumi.get(self, "execution_subject_keys")

    @execution_subject_keys.setter
    def execution_subject_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "execution_subject_keys", value)

    @property
    @pulumi.getter(name="healthSubjectKeys")
    def health_subject_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Keys to include in a health check. Valid options are `space`, `account`, `target`, `type`
        """
        return pulumi.get(self, "health_subject_keys")

    @health_subject_keys.setter
    def health_subject_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "health_subject_keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceManagerEndpoint")
    def resource_manager_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The resource manager endpoint URI for this resource.
        """
        return pulumi.get(self, "resource_manager_endpoint")

    @resource_manager_endpoint.setter
    def resource_manager_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_manager_endpoint", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription ID of this resource.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant ID of this resource.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> Optional[pulumi.Input[str]]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @tenanted_deployment_participation.setter
    def tenanted_deployment_participation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenanted_deployment_participation", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)


class AzureOpenidConnect(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_test_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 authentication_endpoint: Optional[pulumi.Input[str]] = None,
                 azure_environment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execution_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_manager_endpoint: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        This resource manages Azure OpenID Connect accounts in Octopus Deploy.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.AzureOpenidConnect("example",
            account_test_subject_keys=[
                "space",
                "type",
            ],
            application_id="00000000-0000-0000-0000-000000000000",
            audience="api://AzureADTokenExchange",
            execution_subject_keys=[
                "space",
                "project",
            ],
            health_subject_keys=[
                "space",
                "target",
                "type",
            ],
            subscription_id="00000000-0000-0000-0000-000000000000",
            tenant_id="00000000-0000-0000-0000-000000000000")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ```sh
        $ pulumi import octopusdeploy:index/azureOpenidConnect:AzureOpenidConnect [options] octopusdeploy_azure_openid_connect.<name> <account-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_test_subject_keys: Keys to include in an account test. Valid options are: `space`, `account`, `type`
        :param pulumi.Input[str] application_id: The application ID of this resource.
        :param pulumi.Input[str] audience: Federated credentials audience, this value is used to establish a connection between external workload identities and Microsoft Entra ID.
        :param pulumi.Input[str] authentication_endpoint: The authentication endpoint URI for this resource.
        :param pulumi.Input[str] azure_environment: The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        :param pulumi.Input[str] description: The description of this Azure OpenID Connect account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] execution_subject_keys: Keys to include in a deployment or runbook. Valid options are `space`, `environment`, `project`, `tenant`, `runbook`, `account`, `type`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] health_subject_keys: Keys to include in a health check. Valid options are `space`, `account`, `target`, `type`
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] resource_manager_endpoint: The resource manager endpoint URI for this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[str] subscription_id: The subscription ID of this resource.
        :param pulumi.Input[str] tenant_id: The tenant ID of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AzureOpenidConnectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages Azure OpenID Connect accounts in Octopus Deploy.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.AzureOpenidConnect("example",
            account_test_subject_keys=[
                "space",
                "type",
            ],
            application_id="00000000-0000-0000-0000-000000000000",
            audience="api://AzureADTokenExchange",
            execution_subject_keys=[
                "space",
                "project",
            ],
            health_subject_keys=[
                "space",
                "target",
                "type",
            ],
            subscription_id="00000000-0000-0000-0000-000000000000",
            tenant_id="00000000-0000-0000-0000-000000000000")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ```sh
        $ pulumi import octopusdeploy:index/azureOpenidConnect:AzureOpenidConnect [options] octopusdeploy_azure_openid_connect.<name> <account-id>
        ```

        :param str resource_name: The name of the resource.
        :param AzureOpenidConnectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AzureOpenidConnectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_test_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 authentication_endpoint: Optional[pulumi.Input[str]] = None,
                 azure_environment: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execution_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 health_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_manager_endpoint: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AzureOpenidConnectArgs.__new__(AzureOpenidConnectArgs)

            __props__.__dict__["account_test_subject_keys"] = account_test_subject_keys
            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["audience"] = audience
            __props__.__dict__["authentication_endpoint"] = authentication_endpoint
            __props__.__dict__["azure_environment"] = azure_environment
            __props__.__dict__["description"] = description
            __props__.__dict__["environments"] = environments
            __props__.__dict__["execution_subject_keys"] = execution_subject_keys
            __props__.__dict__["health_subject_keys"] = health_subject_keys
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_manager_endpoint"] = resource_manager_endpoint
            __props__.__dict__["space_id"] = space_id
            if subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_id'")
            __props__.__dict__["subscription_id"] = subscription_id
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["tenant_tags"] = tenant_tags
            __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
            __props__.__dict__["tenants"] = tenants
        super(AzureOpenidConnect, __self__).__init__(
            'octopusdeploy:index/azureOpenidConnect:AzureOpenidConnect',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_test_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            audience: Optional[pulumi.Input[str]] = None,
            authentication_endpoint: Optional[pulumi.Input[str]] = None,
            azure_environment: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            execution_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            health_subject_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_manager_endpoint: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            subscription_id: Optional[pulumi.Input[str]] = None,
            tenant_id: Optional[pulumi.Input[str]] = None,
            tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenanted_deployment_participation: Optional[pulumi.Input[str]] = None,
            tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'AzureOpenidConnect':
        """
        Get an existing AzureOpenidConnect resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_test_subject_keys: Keys to include in an account test. Valid options are: `space`, `account`, `type`
        :param pulumi.Input[str] application_id: The application ID of this resource.
        :param pulumi.Input[str] audience: Federated credentials audience, this value is used to establish a connection between external workload identities and Microsoft Entra ID.
        :param pulumi.Input[str] authentication_endpoint: The authentication endpoint URI for this resource.
        :param pulumi.Input[str] azure_environment: The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        :param pulumi.Input[str] description: The description of this Azure OpenID Connect account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environment IDs associated with this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] execution_subject_keys: Keys to include in a deployment or runbook. Valid options are `space`, `environment`, `project`, `tenant`, `runbook`, `account`, `type`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] health_subject_keys: Keys to include in a health check. Valid options are `space`, `account`, `target`, `type`
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] resource_manager_endpoint: The resource manager endpoint URI for this resource.
        :param pulumi.Input[str] space_id: The space ID associated with this resource.
        :param pulumi.Input[str] subscription_id: The subscription ID of this resource.
        :param pulumi.Input[str] tenant_id: The tenant ID of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenants: A list of tenant IDs associated with this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AzureOpenidConnectState.__new__(_AzureOpenidConnectState)

        __props__.__dict__["account_test_subject_keys"] = account_test_subject_keys
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["audience"] = audience
        __props__.__dict__["authentication_endpoint"] = authentication_endpoint
        __props__.__dict__["azure_environment"] = azure_environment
        __props__.__dict__["description"] = description
        __props__.__dict__["environments"] = environments
        __props__.__dict__["execution_subject_keys"] = execution_subject_keys
        __props__.__dict__["health_subject_keys"] = health_subject_keys
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_manager_endpoint"] = resource_manager_endpoint
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["subscription_id"] = subscription_id
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["tenant_tags"] = tenant_tags
        __props__.__dict__["tenanted_deployment_participation"] = tenanted_deployment_participation
        __props__.__dict__["tenants"] = tenants
        return AzureOpenidConnect(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountTestSubjectKeys")
    def account_test_subject_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Keys to include in an account test. Valid options are: `space`, `account`, `type`
        """
        return pulumi.get(self, "account_test_subject_keys")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        The application ID of this resource.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Output[Optional[str]]:
        """
        Federated credentials audience, this value is used to establish a connection between external workload identities and Microsoft Entra ID.
        """
        return pulumi.get(self, "audience")

    @property
    @pulumi.getter(name="authenticationEndpoint")
    def authentication_endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        The authentication endpoint URI for this resource.
        """
        return pulumi.get(self, "authentication_endpoint")

    @property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> pulumi.Output[str]:
        """
        The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        """
        return pulumi.get(self, "azure_environment")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this Azure OpenID Connect account.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="executionSubjectKeys")
    def execution_subject_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Keys to include in a deployment or runbook. Valid options are `space`, `environment`, `project`, `tenant`, `runbook`, `account`, `type`
        """
        return pulumi.get(self, "execution_subject_keys")

    @property
    @pulumi.getter(name="healthSubjectKeys")
    def health_subject_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Keys to include in a health check. Valid options are `space`, `account`, `target`, `type`
        """
        return pulumi.get(self, "health_subject_keys")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceManagerEndpoint")
    def resource_manager_endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        The resource manager endpoint URI for this resource.
        """
        return pulumi.get(self, "resource_manager_endpoint")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[str]:
        """
        The subscription ID of this resource.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The tenant ID of this resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> pulumi.Output[str]:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

