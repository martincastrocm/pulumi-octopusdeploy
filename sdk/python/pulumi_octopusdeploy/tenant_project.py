# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TenantProjectArgs', 'TenantProject']

@pulumi.input_type
class TenantProjectArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TenantProject resource.
        :param pulumi.Input[str] project_id: The project ID associated with this tenant.
        :param pulumi.Input[str] tenant_id: The tenant ID associated with this tenant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The environment IDs associated with this tenant.
        :param pulumi.Input[str] space_id: The space ID associated with this project tenant.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The project ID associated with this tenant.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        The tenant ID associated with this tenant.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environment IDs associated with this tenant.
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this project tenant.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class _TenantProjectState:
    def __init__(__self__, *,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TenantProject resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The environment IDs associated with this tenant.
        :param pulumi.Input[str] project_id: The project ID associated with this tenant.
        :param pulumi.Input[str] space_id: The space ID associated with this project tenant.
        :param pulumi.Input[str] tenant_id: The tenant ID associated with this tenant.
        """
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environment IDs associated with this tenant.
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project ID associated with this tenant.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with this project tenant.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant ID associated with this tenant.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


class TenantProject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a TenantProject resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The environment IDs associated with this tenant.
        :param pulumi.Input[str] project_id: The project ID associated with this tenant.
        :param pulumi.Input[str] space_id: The space ID associated with this project tenant.
        :param pulumi.Input[str] tenant_id: The tenant ID associated with this tenant.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TenantProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TenantProject resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TenantProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TenantProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TenantProjectArgs.__new__(TenantProjectArgs)

            __props__.__dict__["environment_ids"] = environment_ids
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["space_id"] = space_id
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
        super(TenantProject, __self__).__init__(
            'octopusdeploy:index/tenantProject:TenantProject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None,
            tenant_id: Optional[pulumi.Input[str]] = None) -> 'TenantProject':
        """
        Get an existing TenantProject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The environment IDs associated with this tenant.
        :param pulumi.Input[str] project_id: The project ID associated with this tenant.
        :param pulumi.Input[str] space_id: The space ID associated with this project tenant.
        :param pulumi.Input[str] tenant_id: The tenant ID associated with this tenant.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TenantProjectState.__new__(_TenantProjectState)

        __props__.__dict__["environment_ids"] = environment_ids
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["tenant_id"] = tenant_id
        return TenantProject(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The environment IDs associated with this tenant.
        """
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The project ID associated with this tenant.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[str]:
        """
        The space ID associated with this project tenant.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The tenant ID associated with this tenant.
        """
        return pulumi.get(self, "tenant_id")

