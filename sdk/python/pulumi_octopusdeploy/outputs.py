# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'EnvironmentJiraExtensionSetting',
    'EnvironmentJiraServiceManagementExtensionSetting',
    'EnvironmentServicenowExtensionSetting',
    'LibraryVariableSetTemplate',
    'LifecyclePhase',
    'LifecyclePhaseReleaseRetentionPolicy',
    'LifecyclePhaseTentacleRetentionPolicy',
    'LifecycleReleaseRetentionPolicy',
    'LifecycleTentacleRetentionPolicy',
    'ProjectAutoDeployReleaseOverride',
    'ProjectConnectivityPolicy',
    'ProjectGitAnonymousPersistenceSetting',
    'ProjectGitLibraryPersistenceSetting',
    'ProjectGitUsernamePasswordPersistenceSetting',
    'ProjectJiraServiceManagementExtensionSetting',
    'ProjectReleaseCreationStrategy',
    'ProjectReleaseCreationStrategyReleaseCreationPackage',
    'ProjectServicenowExtensionSetting',
    'ProjectTemplate',
    'ProjectVersioningStrategy',
    'ProjectVersioningStrategyDonorPackage',
    'RunbookConnectivityPolicy',
    'RunbookRetentionPolicy',
    'ScriptModuleScript',
    'VariablePrompt',
    'VariablePromptDisplaySettings',
    'VariablePromptDisplaySettingsSelectOption',
    'VariableScope',
    'GetEnvironmentsEnvironmentResult',
    'GetEnvironmentsEnvironmentJiraExtensionSettingResult',
    'GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult',
    'GetEnvironmentsEnvironmentServicenowExtensionSettingResult',
    'GetFeedsFeedResult',
    'GetGitCredentialsGitCredentialResult',
    'GetLibraryVariableSetsLibraryVariableSetResult',
    'GetLibraryVariableSetsLibraryVariableSetTemplateResult',
    'GetLifecyclesLifecycleResult',
    'GetLifecyclesLifecyclePhaseResult',
    'GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult',
    'GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult',
    'GetLifecyclesLifecycleReleaseRetentionPolicyResult',
    'GetLifecyclesLifecycleTentacleRetentionPolicyResult',
    'GetProjectGroupsProjectGroupResult',
    'GetProjectsProjectResult',
    'GetProjectsProjectAutoDeployReleaseOverrideResult',
    'GetProjectsProjectConnectivityPolicyResult',
    'GetProjectsProjectGitAnonymousPersistenceSettingResult',
    'GetProjectsProjectGitLibraryPersistenceSettingResult',
    'GetProjectsProjectGitUsernamePasswordPersistenceSettingResult',
    'GetProjectsProjectJiraServiceManagementExtensionSettingResult',
    'GetProjectsProjectReleaseCreationStrategyResult',
    'GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult',
    'GetProjectsProjectServicenowExtensionSettingResult',
    'GetProjectsProjectTemplateResult',
    'GetProjectsProjectVersioningStrategyResult',
    'GetProjectsProjectVersioningStrategyDonorPackageResult',
    'GetScriptModulesScriptModuleResult',
    'GetScriptModulesScriptModuleScriptResult',
    'GetSpacesSpaceResult',
    'GetTagSetsTagSetResult',
    'GetTenantProjectsTenantProjectResult',
    'GetTenantsTenantResult',
    'GetVariablesPromptResult',
    'GetVariablesPromptDisplaySettingResult',
    'GetVariablesPromptDisplaySettingSelectOptionResult',
    'GetVariablesScopeResult',
]

@pulumi.output_type
class EnvironmentJiraExtensionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentType":
            suggest = "environment_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentJiraExtensionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentJiraExtensionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentJiraExtensionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_type: Optional[str] = None):
        """
        :param str environment_type: The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, `"unmapped"`.
        """
        if environment_type is not None:
            pulumi.set(__self__, "environment_type", environment_type)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional[str]:
        """
        The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, `"unmapped"`.
        """
        return pulumi.get(self, "environment_type")


@pulumi.output_type
class EnvironmentJiraServiceManagementExtensionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentJiraServiceManagementExtensionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentJiraServiceManagementExtensionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentJiraServiceManagementExtensionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        """
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class EnvironmentServicenowExtensionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentServicenowExtensionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentServicenowExtensionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentServicenowExtensionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None):
        """
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class LibraryVariableSetTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "displaySettings":
            suggest = "display_settings"
        elif key == "helpText":
            suggest = "help_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LibraryVariableSetTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LibraryVariableSetTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LibraryVariableSetTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, str]] = None,
                 help_text: Optional[str] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`
        :param str default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param Mapping[str, str] display_settings: The display settings for the parameter.
        :param str help_text: The help presented alongside the parameter input.
        :param str id: The unique ID for this resource.
        :param str label: The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, str]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class LifecyclePhase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automaticDeploymentTargets":
            suggest = "automatic_deployment_targets"
        elif key == "isOptionalPhase":
            suggest = "is_optional_phase"
        elif key == "minimumEnvironmentsBeforePromotion":
            suggest = "minimum_environments_before_promotion"
        elif key == "optionalDeploymentTargets":
            suggest = "optional_deployment_targets"
        elif key == "releaseRetentionPolicies":
            suggest = "release_retention_policies"
        elif key == "tentacleRetentionPolicies":
            suggest = "tentacle_retention_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecyclePhase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecyclePhase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecyclePhase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 automatic_deployment_targets: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 is_optional_phase: Optional[bool] = None,
                 minimum_environments_before_promotion: Optional[int] = None,
                 optional_deployment_targets: Optional[Sequence[str]] = None,
                 release_retention_policies: Optional[Sequence['outputs.LifecyclePhaseReleaseRetentionPolicy']] = None,
                 tentacle_retention_policies: Optional[Sequence['outputs.LifecyclePhaseTentacleRetentionPolicy']] = None):
        """
        :param str name: The name of this resource.
        :param Sequence[str] automatic_deployment_targets: Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        :param str id: The unique ID for this resource.
        :param bool is_optional_phase: If false a release must be deployed to this phase before it can be deployed to the next phase.
        :param int minimum_environments_before_promotion: The number of units required before a release can enter the next phase. If 0, all environments are required.
        :param Sequence[str] optional_deployment_targets: Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        :param Sequence['LifecyclePhaseReleaseRetentionPolicyArgs'] release_retention_policies: Defines the retention policy for releases or tentacles.
        :param Sequence['LifecyclePhaseTentacleRetentionPolicyArgs'] tentacle_retention_policies: Defines the retention policy for releases or tentacles.
        """
        pulumi.set(__self__, "name", name)
        if automatic_deployment_targets is not None:
            pulumi.set(__self__, "automatic_deployment_targets", automatic_deployment_targets)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_optional_phase is not None:
            pulumi.set(__self__, "is_optional_phase", is_optional_phase)
        if minimum_environments_before_promotion is not None:
            pulumi.set(__self__, "minimum_environments_before_promotion", minimum_environments_before_promotion)
        if optional_deployment_targets is not None:
            pulumi.set(__self__, "optional_deployment_targets", optional_deployment_targets)
        if release_retention_policies is not None:
            pulumi.set(__self__, "release_retention_policies", release_retention_policies)
        if tentacle_retention_policies is not None:
            pulumi.set(__self__, "tentacle_retention_policies", tentacle_retention_policies)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="automaticDeploymentTargets")
    def automatic_deployment_targets(self) -> Optional[Sequence[str]]:
        """
        Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        """
        return pulumi.get(self, "automatic_deployment_targets")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOptionalPhase")
    def is_optional_phase(self) -> Optional[bool]:
        """
        If false a release must be deployed to this phase before it can be deployed to the next phase.
        """
        return pulumi.get(self, "is_optional_phase")

    @property
    @pulumi.getter(name="minimumEnvironmentsBeforePromotion")
    def minimum_environments_before_promotion(self) -> Optional[int]:
        """
        The number of units required before a release can enter the next phase. If 0, all environments are required.
        """
        return pulumi.get(self, "minimum_environments_before_promotion")

    @property
    @pulumi.getter(name="optionalDeploymentTargets")
    def optional_deployment_targets(self) -> Optional[Sequence[str]]:
        """
        Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        """
        return pulumi.get(self, "optional_deployment_targets")

    @property
    @pulumi.getter(name="releaseRetentionPolicies")
    def release_retention_policies(self) -> Optional[Sequence['outputs.LifecyclePhaseReleaseRetentionPolicy']]:
        """
        Defines the retention policy for releases or tentacles.
        """
        return pulumi.get(self, "release_retention_policies")

    @property
    @pulumi.getter(name="tentacleRetentionPolicies")
    def tentacle_retention_policies(self) -> Optional[Sequence['outputs.LifecyclePhaseTentacleRetentionPolicy']]:
        """
        Defines the retention policy for releases or tentacles.
        """
        return pulumi.get(self, "tentacle_retention_policies")


@pulumi.output_type
class LifecyclePhaseReleaseRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecyclePhaseReleaseRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecyclePhaseReleaseRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecyclePhaseReleaseRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param str unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LifecyclePhaseTentacleRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecyclePhaseTentacleRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecyclePhaseTentacleRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecyclePhaseTentacleRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param str unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LifecycleReleaseRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleReleaseRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleReleaseRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleReleaseRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param str unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class LifecycleTentacleRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleTentacleRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleTentacleRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleTentacleRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None,
                 unit: Optional[str] = None):
        """
        :param int quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param str unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class ProjectAutoDeployReleaseOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"
        elif key == "releaseId":
            suggest = "release_id"
        elif key == "tenantId":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectAutoDeployReleaseOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectAutoDeployReleaseOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectAutoDeployReleaseOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: Optional[str] = None,
                 release_id: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if release_id is not None:
            pulumi.set(__self__, "release_id", release_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[str]:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> Optional[str]:
        return pulumi.get(self, "release_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[str]:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ProjectConnectivityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowDeploymentsToNoTargets":
            suggest = "allow_deployments_to_no_targets"
        elif key == "excludeUnhealthyTargets":
            suggest = "exclude_unhealthy_targets"
        elif key == "skipMachineBehavior":
            suggest = "skip_machine_behavior"
        elif key == "targetRoles":
            suggest = "target_roles"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectConnectivityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectConnectivityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectConnectivityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[bool] = None,
                 exclude_unhealthy_targets: Optional[bool] = None,
                 skip_machine_behavior: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[bool]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[str]:
        return pulumi.get(self, "skip_machine_behavior")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_roles")


@pulumi.output_type
class ProjectGitAnonymousPersistenceSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basePath":
            suggest = "base_path"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "protectedBranches":
            suggest = "protected_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectGitAnonymousPersistenceSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectGitAnonymousPersistenceSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectGitAnonymousPersistenceSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        """
        :param str url: The URL associated with these version control settings.
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class ProjectGitLibraryPersistenceSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitCredentialId":
            suggest = "git_credential_id"
        elif key == "basePath":
            suggest = "base_path"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "protectedBranches":
            suggest = "protected_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectGitLibraryPersistenceSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectGitLibraryPersistenceSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectGitLibraryPersistenceSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 git_credential_id: str,
                 url: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        """
        :param str url: The URL associated with these version control settings.
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "git_credential_id", git_credential_id)
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> str:
        return pulumi.get(self, "git_credential_id")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class ProjectGitUsernamePasswordPersistenceSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basePath":
            suggest = "base_path"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "protectedBranches":
            suggest = "protected_branches"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectGitUsernamePasswordPersistenceSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectGitUsernamePasswordPersistenceSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectGitUsernamePasswordPersistenceSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 url: str,
                 username: str,
                 base_path: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 protected_branches: Optional[Sequence[str]] = None):
        """
        :param str password: The password for the Git credential
        :param str url: The URL associated with these version control settings.
        :param str username: The username for the Git credential.
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for the Git credential
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[str]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[Sequence[str]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")


@pulumi.output_type
class ProjectJiraServiceManagementExtensionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "serviceDeskProjectName":
            suggest = "service_desk_project_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectJiraServiceManagementExtensionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectJiraServiceManagementExtensionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectJiraServiceManagementExtensionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 service_desk_project_name: str):
        """
        :param str connection_id: The connection identifier associated with the extension settings.
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        :param str service_desk_project_name: The project name associated with this extension.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "service_desk_project_name", service_desk_project_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="serviceDeskProjectName")
    def service_desk_project_name(self) -> str:
        """
        The project name associated with this extension.
        """
        return pulumi.get(self, "service_desk_project_name")


@pulumi.output_type
class ProjectReleaseCreationStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelId":
            suggest = "channel_id"
        elif key == "releaseCreationPackageStepId":
            suggest = "release_creation_package_step_id"
        elif key == "releaseCreationPackages":
            suggest = "release_creation_packages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectReleaseCreationStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectReleaseCreationStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectReleaseCreationStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_id: Optional[str] = None,
                 release_creation_package_step_id: Optional[str] = None,
                 release_creation_packages: Optional[Sequence['outputs.ProjectReleaseCreationStrategyReleaseCreationPackage']] = None):
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if release_creation_package_step_id is not None:
            pulumi.set(__self__, "release_creation_package_step_id", release_creation_package_step_id)
        if release_creation_packages is not None:
            pulumi.set(__self__, "release_creation_packages", release_creation_packages)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[str]:
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="releaseCreationPackageStepId")
    def release_creation_package_step_id(self) -> Optional[str]:
        return pulumi.get(self, "release_creation_package_step_id")

    @property
    @pulumi.getter(name="releaseCreationPackages")
    def release_creation_packages(self) -> Optional[Sequence['outputs.ProjectReleaseCreationStrategyReleaseCreationPackage']]:
        return pulumi.get(self, "release_creation_packages")


@pulumi.output_type
class ProjectReleaseCreationStrategyReleaseCreationPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentAction":
            suggest = "deployment_action"
        elif key == "packageReference":
            suggest = "package_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectReleaseCreationStrategyReleaseCreationPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectReleaseCreationStrategyReleaseCreationPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectReleaseCreationStrategyReleaseCreationPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class ProjectServicenowExtensionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isStateAutomaticallyTransitioned":
            suggest = "is_state_automatically_transitioned"
        elif key == "standardChangeTemplateName":
            suggest = "standard_change_template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectServicenowExtensionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectServicenowExtensionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectServicenowExtensionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 is_state_automatically_transitioned: bool,
                 standard_change_template_name: Optional[str] = None):
        """
        :param str connection_id: The connection identifier associated with the extension settings.
        :param bool is_enabled: Specifies whether or not this extension is enabled for this project.
        :param bool is_state_automatically_transitioned: Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        :param str standard_change_template_name: The name of the standard change template associated with this extension. If provided, deployments will create a standard change based on the provided template, otherwise a normal change will be created.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_state_automatically_transitioned", is_state_automatically_transitioned)
        if standard_change_template_name is not None:
            pulumi.set(__self__, "standard_change_template_name", standard_change_template_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isStateAutomaticallyTransitioned")
    def is_state_automatically_transitioned(self) -> bool:
        """
        Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        """
        return pulumi.get(self, "is_state_automatically_transitioned")

    @property
    @pulumi.getter(name="standardChangeTemplateName")
    def standard_change_template_name(self) -> Optional[str]:
        """
        The name of the standard change template associated with this extension. If provided, deployments will create a standard change based on the provided template, otherwise a normal change will be created.
        """
        return pulumi.get(self, "standard_change_template_name")


@pulumi.output_type
class ProjectTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "displaySettings":
            suggest = "display_settings"
        elif key == "helpText":
            suggest = "help_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default_value: Optional[str] = None,
                 display_settings: Optional[Mapping[str, str]] = None,
                 help_text: Optional[str] = None,
                 id: Optional[str] = None,
                 label: Optional[str] = None):
        """
        :param str name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods.
        :param str default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param Mapping[str, str] display_settings: The display settings for the parameter.
        :param str help_text: The help presented alongside the parameter input.
        :param str id: The ID of the template parameter.
        :param str label: The label shown beside the parameter when presented in the deployment process.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[Mapping[str, str]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[str]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the template parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        The label shown beside the parameter when presented in the deployment process.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class ProjectVersioningStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "donorPackageStepId":
            suggest = "donor_package_step_id"
        elif key == "donorPackages":
            suggest = "donor_packages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectVersioningStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectVersioningStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectVersioningStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 donor_package_step_id: Optional[str] = None,
                 donor_packages: Optional[Sequence['outputs.ProjectVersioningStrategyDonorPackage']] = None,
                 template: Optional[str] = None):
        if donor_package_step_id is not None:
            pulumi.set(__self__, "donor_package_step_id", donor_package_step_id)
        if donor_packages is not None:
            pulumi.set(__self__, "donor_packages", donor_packages)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="donorPackageStepId")
    def donor_package_step_id(self) -> Optional[str]:
        return pulumi.get(self, "donor_package_step_id")

    @property
    @pulumi.getter(name="donorPackages")
    def donor_packages(self) -> Optional[Sequence['outputs.ProjectVersioningStrategyDonorPackage']]:
        return pulumi.get(self, "donor_packages")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")


@pulumi.output_type
class ProjectVersioningStrategyDonorPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentAction":
            suggest = "deployment_action"
        elif key == "packageReference":
            suggest = "package_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectVersioningStrategyDonorPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectVersioningStrategyDonorPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectVersioningStrategyDonorPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class RunbookConnectivityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowDeploymentsToNoTargets":
            suggest = "allow_deployments_to_no_targets"
        elif key == "excludeUnhealthyTargets":
            suggest = "exclude_unhealthy_targets"
        elif key == "skipMachineBehavior":
            suggest = "skip_machine_behavior"
        elif key == "targetRoles":
            suggest = "target_roles"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookConnectivityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookConnectivityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookConnectivityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[bool] = None,
                 exclude_unhealthy_targets: Optional[bool] = None,
                 skip_machine_behavior: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[bool]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[str]:
        return pulumi.get(self, "skip_machine_behavior")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_roles")


@pulumi.output_type
class RunbookRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quantityToKeep":
            suggest = "quantity_to_keep"
        elif key == "shouldKeepForever":
            suggest = "should_keep_forever"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quantity_to_keep: Optional[int] = None,
                 should_keep_forever: Optional[bool] = None):
        """
        :param int quantity_to_keep: How many runs to keep per environment.
        :param bool should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[int]:
        """
        How many runs to keep per environment.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[bool]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")


@pulumi.output_type
class ScriptModuleScript(dict):
    def __init__(__self__, *,
                 body: str,
                 syntax: str):
        """
        :param str body: The body of this script module.
        :param str syntax: The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The body of this script module.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def syntax(self) -> str:
        """
        The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        return pulumi.get(self, "syntax")


@pulumi.output_type
class VariablePrompt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displaySettings":
            suggest = "display_settings"
        elif key == "isRequired":
            suggest = "is_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariablePrompt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariablePrompt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariablePrompt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 display_settings: Optional['outputs.VariablePromptDisplaySettings'] = None,
                 is_required: Optional[bool] = None,
                 label: Optional[str] = None):
        """
        :param str description: The description of this variable prompt option.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of this variable prompt option.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional['outputs.VariablePromptDisplaySettings']:
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")


@pulumi.output_type
class VariablePromptDisplaySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlType":
            suggest = "control_type"
        elif key == "selectOptions":
            suggest = "select_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariablePromptDisplaySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariablePromptDisplaySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariablePromptDisplaySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_type: str,
                 select_options: Optional[Sequence['outputs.VariablePromptDisplaySettingsSelectOption']] = None):
        """
        :param str control_type: The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
        :param Sequence['VariablePromptDisplaySettingsSelectOptionArgs'] select_options: If the `control_type` is `Select`, then this value defines an option.
        """
        pulumi.set(__self__, "control_type", control_type)
        if select_options is not None:
            pulumi.set(__self__, "select_options", select_options)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        """
        The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="selectOptions")
    def select_options(self) -> Optional[Sequence['outputs.VariablePromptDisplaySettingsSelectOption']]:
        """
        If the `control_type` is `Select`, then this value defines an option.
        """
        return pulumi.get(self, "select_options")


@pulumi.output_type
class VariablePromptDisplaySettingsSelectOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariablePromptDisplaySettingsSelectOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariablePromptDisplaySettingsSelectOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariablePromptDisplaySettingsSelectOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 value: str):
        """
        :param str display_name: The display name for the select value
        :param str value: The select value
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the select value
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The select value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VariableScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariableScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariableScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariableScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 channels: Optional[Sequence[str]] = None,
                 environments: Optional[Sequence[str]] = None,
                 machines: Optional[Sequence[str]] = None,
                 processes: Optional[Sequence[str]] = None,
                 roles: Optional[Sequence[str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] actions: A list of actions that are scoped to this variable value.
        :param Sequence[str] channels: A list of channels that are scoped to this variable value.
        :param Sequence[str] environments: A list of environments that are scoped to this variable value.
        :param Sequence[str] machines: A list of machines that are scoped to this variable value.
        :param Sequence[str] processes: A list of processes that are scoped to this variable value.
        :param Sequence[str] roles: A list of roles that are scoped to this variable value.
        :param Sequence[str] tenant_tags: A list of tenant tags that are scoped to this variable value.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        A list of actions that are scoped to this variable value.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        A list of channels that are scoped to this variable value.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        A list of environments that are scoped to this variable value.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def machines(self) -> Optional[Sequence[str]]:
        """
        A list of machines that are scoped to this variable value.
        """
        return pulumi.get(self, "machines")

    @property
    @pulumi.getter
    def processes(self) -> Optional[Sequence[str]]:
        """
        A list of processes that are scoped to this variable value.
        """
        return pulumi.get(self, "processes")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        A list of roles that are scoped to this variable value.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags that are scoped to this variable value.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class GetEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 allow_dynamic_infrastructure: bool,
                 description: str,
                 id: str,
                 jira_extension_settings: Sequence['outputs.GetEnvironmentsEnvironmentJiraExtensionSettingResult'],
                 jira_service_management_extension_settings: Sequence['outputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult'],
                 name: str,
                 servicenow_extension_settings: Sequence['outputs.GetEnvironmentsEnvironmentServicenowExtensionSettingResult'],
                 slug: str,
                 sort_order: int,
                 space_id: str,
                 use_guided_failure: bool):
        """
        :param str description: The description of this environment.
        :param str id: The unique ID for this resource.
        :param Sequence['GetEnvironmentsEnvironmentJiraExtensionSettingArgs'] jira_extension_settings: Provides extension settings for the Jira integration for this environment.
        :param Sequence['GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingArgs'] jira_service_management_extension_settings: Provides extension settings for the Jira Service Management (JSM) integration for this environment.
        :param str name: The name of this resource.
        :param Sequence['GetEnvironmentsEnvironmentServicenowExtensionSettingArgs'] servicenow_extension_settings: Provides extension settings for the ServiceNow integration for this environment.
        :param str slug: The unique slug of this environment
        :param int sort_order: The order number to sort an environment
        :param str space_id: The space ID associated with this environment.
        """
        pulumi.set(__self__, "allow_dynamic_infrastructure", allow_dynamic_infrastructure)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "jira_extension_settings", jira_extension_settings)
        pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "use_guided_failure", use_guided_failure)

    @property
    @pulumi.getter(name="allowDynamicInfrastructure")
    def allow_dynamic_infrastructure(self) -> bool:
        return pulumi.get(self, "allow_dynamic_infrastructure")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this environment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jiraExtensionSettings")
    def jira_extension_settings(self) -> Sequence['outputs.GetEnvironmentsEnvironmentJiraExtensionSettingResult']:
        """
        Provides extension settings for the Jira integration for this environment.
        """
        return pulumi.get(self, "jira_extension_settings")

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Sequence['outputs.GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult']:
        """
        Provides extension settings for the Jira Service Management (JSM) integration for this environment.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Sequence['outputs.GetEnvironmentsEnvironmentServicenowExtensionSettingResult']:
        """
        Provides extension settings for the ServiceNow integration for this environment.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The unique slug of this environment
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The order number to sort an environment
        """
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this environment.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="useGuidedFailure")
    def use_guided_failure(self) -> bool:
        return pulumi.get(self, "use_guided_failure")


@pulumi.output_type
class GetEnvironmentsEnvironmentJiraExtensionSettingResult(dict):
    def __init__(__self__, *,
                 environment_type: str):
        pulumi.set(__self__, "environment_type", environment_type)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> str:
        return pulumi.get(self, "environment_type")


@pulumi.output_type
class GetEnvironmentsEnvironmentJiraServiceManagementExtensionSettingResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetEnvironmentsEnvironmentServicenowExtensionSettingResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool):
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class GetFeedsFeedResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 api_version: str,
                 delete_unreleased_packages_after_days: int,
                 download_attempts: int,
                 download_retry_backoff_seconds: int,
                 feed_type: str,
                 feed_uri: str,
                 id: str,
                 is_enhanced_mode: bool,
                 name: str,
                 package_acquisition_location_options: Sequence[str],
                 password: str,
                 region: str,
                 registry_path: str,
                 secret_key: str,
                 space_id: str,
                 username: str):
        """
        :param str access_key: The AWS access key to use when authenticating against Amazon Web Services.
        :param int download_attempts: The number of times a deployment should attempt to download a package from this feed before failing.
        :param int download_retry_backoff_seconds: The number of seconds to apply as a linear back off between download attempts.
        :param str feed_type: A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str password: The password associated with this resource.
        :param str space_id: The space ID associated with this feeds.
        :param str username: The username associated with this resource.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "delete_unreleased_packages_after_days", delete_unreleased_packages_after_days)
        pulumi.set(__self__, "download_attempts", download_attempts)
        pulumi.set(__self__, "download_retry_backoff_seconds", download_retry_backoff_seconds)
        pulumi.set(__self__, "feed_type", feed_type)
        pulumi.set(__self__, "feed_uri", feed_uri)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enhanced_mode", is_enhanced_mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_acquisition_location_options", package_acquisition_location_options)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "registry_path", registry_path)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        """
        The AWS access key to use when authenticating against Amazon Web Services.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="deleteUnreleasedPackagesAfterDays")
    def delete_unreleased_packages_after_days(self) -> int:
        return pulumi.get(self, "delete_unreleased_packages_after_days")

    @property
    @pulumi.getter(name="downloadAttempts")
    def download_attempts(self) -> int:
        """
        The number of times a deployment should attempt to download a package from this feed before failing.
        """
        return pulumi.get(self, "download_attempts")

    @property
    @pulumi.getter(name="downloadRetryBackoffSeconds")
    def download_retry_backoff_seconds(self) -> int:
        """
        The number of seconds to apply as a linear back off between download attempts.
        """
        return pulumi.get(self, "download_retry_backoff_seconds")

    @property
    @pulumi.getter(name="feedType")
    def feed_type(self) -> str:
        """
        A filter to search by feed type. Valid feed types are `AwsElasticContainerRegistry`, `BuiltIn`, `Docker`, `GitHub`, `Helm`, `Maven`, `NuGet`, or `OctopusProject`.
        """
        return pulumi.get(self, "feed_type")

    @property
    @pulumi.getter(name="feedUri")
    def feed_uri(self) -> str:
        return pulumi.get(self, "feed_uri")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnhancedMode")
    def is_enhanced_mode(self) -> bool:
        return pulumi.get(self, "is_enhanced_mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageAcquisitionLocationOptions")
    def package_acquisition_location_options(self) -> Sequence[str]:
        return pulumi.get(self, "package_acquisition_location_options")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="registryPath")
    def registry_path(self) -> str:
        return pulumi.get(self, "registry_path")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this feeds.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetGitCredentialsGitCredentialResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 space_id: str,
                 type: str,
                 username: str):
        """
        :param str description: The description of this Git Credential.
        :param str id: The unique ID for this resource.
        :param str name: The name of this Git Credential.
        :param str space_id: The space ID associated with this Git Credential.
        :param str type: The Git credential authentication type.
        :param str username: The username for the Git credential.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this Git Credential.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this Git Credential.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this Git Credential.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetLibraryVariableSetsLibraryVariableSetResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 space_id: str,
                 template_ids: Mapping[str, str],
                 templates: Sequence['outputs.GetLibraryVariableSetsLibraryVariableSetTemplateResult'],
                 variable_set_id: str):
        """
        :param str description: The description of this library variable set.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this library variable set.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "template_ids", template_ids)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "variable_set_id", variable_set_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this library variable set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this library variable set.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="templateIds")
    def template_ids(self) -> Mapping[str, str]:
        return pulumi.get(self, "template_ids")

    @property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetLibraryVariableSetsLibraryVariableSetTemplateResult']:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        return pulumi.get(self, "variable_set_id")


@pulumi.output_type
class GetLibraryVariableSetsLibraryVariableSetTemplateResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 display_settings: Mapping[str, str],
                 help_text: str,
                 id: str,
                 label: str,
                 name: str):
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "display_settings", display_settings)
        pulumi.set(__self__, "help_text", help_text)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Mapping[str, str]:
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> str:
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLifecyclesLifecycleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 phases: Sequence['outputs.GetLifecyclesLifecyclePhaseResult'],
                 release_retention_policies: Sequence['outputs.GetLifecyclesLifecycleReleaseRetentionPolicyResult'],
                 space_id: str,
                 tentacle_retention_policies: Sequence['outputs.GetLifecyclesLifecycleTentacleRetentionPolicyResult']):
        """
        :param str description: The description of the lifecycle.
        :param str id: The ID of the lifecycle.
        :param str name: The name of the lifecycle.
        :param str space_id: The space ID associated with this lifecycle.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phases", phases)
        pulumi.set(__self__, "release_retention_policies", release_retention_policies)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tentacle_retention_policies", tentacle_retention_policies)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the lifecycle.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the lifecycle.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the lifecycle.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phases(self) -> Sequence['outputs.GetLifecyclesLifecyclePhaseResult']:
        return pulumi.get(self, "phases")

    @property
    @pulumi.getter(name="releaseRetentionPolicies")
    def release_retention_policies(self) -> Sequence['outputs.GetLifecyclesLifecycleReleaseRetentionPolicyResult']:
        return pulumi.get(self, "release_retention_policies")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this lifecycle.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tentacleRetentionPolicies")
    def tentacle_retention_policies(self) -> Sequence['outputs.GetLifecyclesLifecycleTentacleRetentionPolicyResult']:
        return pulumi.get(self, "tentacle_retention_policies")


@pulumi.output_type
class GetLifecyclesLifecyclePhaseResult(dict):
    def __init__(__self__, *,
                 automatic_deployment_targets: Sequence[str],
                 id: str,
                 is_optional_phase: bool,
                 minimum_environments_before_promotion: int,
                 name: str,
                 optional_deployment_targets: Sequence[str],
                 release_retention_policies: Sequence['outputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult'],
                 tentacle_retention_policies: Sequence['outputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult']):
        """
        :param Sequence[str] automatic_deployment_targets: The automatic deployment targets for this phase.
        :param str id: The ID of the phase.
        :param bool is_optional_phase: Whether this phase is optional.
        :param int minimum_environments_before_promotion: The minimum number of environments before promotion.
        :param str name: The name of the phase.
        :param Sequence[str] optional_deployment_targets: The optional deployment targets for this phase.
        """
        pulumi.set(__self__, "automatic_deployment_targets", automatic_deployment_targets)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_optional_phase", is_optional_phase)
        pulumi.set(__self__, "minimum_environments_before_promotion", minimum_environments_before_promotion)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional_deployment_targets", optional_deployment_targets)
        pulumi.set(__self__, "release_retention_policies", release_retention_policies)
        pulumi.set(__self__, "tentacle_retention_policies", tentacle_retention_policies)

    @property
    @pulumi.getter(name="automaticDeploymentTargets")
    def automatic_deployment_targets(self) -> Sequence[str]:
        """
        The automatic deployment targets for this phase.
        """
        return pulumi.get(self, "automatic_deployment_targets")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the phase.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOptionalPhase")
    def is_optional_phase(self) -> bool:
        """
        Whether this phase is optional.
        """
        return pulumi.get(self, "is_optional_phase")

    @property
    @pulumi.getter(name="minimumEnvironmentsBeforePromotion")
    def minimum_environments_before_promotion(self) -> int:
        """
        The minimum number of environments before promotion.
        """
        return pulumi.get(self, "minimum_environments_before_promotion")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the phase.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="optionalDeploymentTargets")
    def optional_deployment_targets(self) -> Sequence[str]:
        """
        The optional deployment targets for this phase.
        """
        return pulumi.get(self, "optional_deployment_targets")

    @property
    @pulumi.getter(name="releaseRetentionPolicies")
    def release_retention_policies(self) -> Sequence['outputs.GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult']:
        return pulumi.get(self, "release_retention_policies")

    @property
    @pulumi.getter(name="tentacleRetentionPolicies")
    def tentacle_retention_policies(self) -> Sequence['outputs.GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult']:
        return pulumi.get(self, "tentacle_retention_policies")


@pulumi.output_type
class GetLifecyclesLifecyclePhaseReleaseRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: int,
                 should_keep_forever: bool,
                 unit: str):
        """
        :param int quantity_to_keep: The quantity of releases to keep.
        :param bool should_keep_forever: Whether releases should be kept forever.
        :param str unit: The unit of time for the retention policy.
        """
        pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> int:
        """
        The quantity of releases to keep.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> bool:
        """
        Whether releases should be kept forever.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        The unit of time for the retention policy.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetLifecyclesLifecyclePhaseTentacleRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: int,
                 should_keep_forever: bool,
                 unit: str):
        """
        :param int quantity_to_keep: The quantity of releases to keep.
        :param bool should_keep_forever: Whether releases should be kept forever.
        :param str unit: The unit of time for the retention policy.
        """
        pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> int:
        """
        The quantity of releases to keep.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> bool:
        """
        Whether releases should be kept forever.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        The unit of time for the retention policy.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetLifecyclesLifecycleReleaseRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: int,
                 should_keep_forever: bool,
                 unit: str):
        """
        :param int quantity_to_keep: The quantity of releases to keep.
        :param bool should_keep_forever: Whether releases should be kept forever.
        :param str unit: The unit of time for the retention policy.
        """
        pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> int:
        """
        The quantity of releases to keep.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> bool:
        """
        Whether releases should be kept forever.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        The unit of time for the retention policy.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetLifecyclesLifecycleTentacleRetentionPolicyResult(dict):
    def __init__(__self__, *,
                 quantity_to_keep: int,
                 should_keep_forever: bool,
                 unit: str):
        """
        :param int quantity_to_keep: The quantity of releases to keep.
        :param bool should_keep_forever: Whether releases should be kept forever.
        :param str unit: The unit of time for the retention policy.
        """
        pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> int:
        """
        The quantity of releases to keep.
        """
        return pulumi.get(self, "quantity_to_keep")

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> bool:
        """
        Whether releases should be kept forever.
        """
        return pulumi.get(self, "should_keep_forever")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        The unit of time for the retention policy.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetProjectGroupsProjectGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 space_id: str):
        """
        :param str description: The description of this project group.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this project group.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this project group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this project group.
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: bool,
                 auto_create_release: bool,
                 auto_deploy_release_overrides: Sequence['outputs.GetProjectsProjectAutoDeployReleaseOverrideResult'],
                 cloned_from_project_id: str,
                 connectivity_policies: Sequence['outputs.GetProjectsProjectConnectivityPolicyResult'],
                 default_guided_failure_mode: str,
                 default_to_skip_if_already_installed: bool,
                 deployment_changes_template: str,
                 deployment_process_id: str,
                 description: str,
                 discrete_channel_release: bool,
                 git_anonymous_persistence_settings: Sequence['outputs.GetProjectsProjectGitAnonymousPersistenceSettingResult'],
                 git_library_persistence_settings: Sequence['outputs.GetProjectsProjectGitLibraryPersistenceSettingResult'],
                 git_username_password_persistence_settings: Sequence['outputs.GetProjectsProjectGitUsernamePasswordPersistenceSettingResult'],
                 id: str,
                 included_library_variable_sets: Sequence[str],
                 is_disabled: bool,
                 is_discrete_channel_release: bool,
                 is_version_controlled: bool,
                 jira_service_management_extension_settings: Sequence['outputs.GetProjectsProjectJiraServiceManagementExtensionSettingResult'],
                 lifecycle_id: str,
                 name: str,
                 project_group_id: str,
                 release_creation_strategies: Sequence['outputs.GetProjectsProjectReleaseCreationStrategyResult'],
                 release_notes_template: str,
                 servicenow_extension_settings: Sequence['outputs.GetProjectsProjectServicenowExtensionSettingResult'],
                 slug: str,
                 space_id: str,
                 templates: Sequence['outputs.GetProjectsProjectTemplateResult'],
                 tenanted_deployment_participation: str,
                 variable_set_id: str,
                 versioning_strategies: Sequence['outputs.GetProjectsProjectVersioningStrategyResult']):
        """
        :param str description: The description of this project
        :param bool discrete_channel_release: Treats releases of different channels to the same environment as a separate deployment dimension
        :param Sequence['GetProjectsProjectGitAnonymousPersistenceSettingArgs'] git_anonymous_persistence_settings: Git-related persistence settings for a version-controlled project using anonymous authentication.
        :param Sequence['GetProjectsProjectGitLibraryPersistenceSettingArgs'] git_library_persistence_settings: Git-related persistence settings for a version-controlled project using library authentication.
        :param Sequence['GetProjectsProjectGitUsernamePasswordPersistenceSettingArgs'] git_username_password_persistence_settings: Git-related persistence settings for a version-controlled project using username*password authentication.
        :param Sequence['GetProjectsProjectJiraServiceManagementExtensionSettingArgs'] jira_service_management_extension_settings: Extension settings for the Jira Service Management (JSM) integration.
        :param str lifecycle_id: The lifecycle ID associated with this project
        :param str name: The name of the project in Octopus Deploy. This name must be unique.
        :param str project_group_id: The project group ID associated with this project.
        :param Sequence['GetProjectsProjectReleaseCreationStrategyArgs'] release_creation_strategies: The release creation strategy for the project.
        :param str release_notes_template: The template to use for release notes.
        :param Sequence['GetProjectsProjectServicenowExtensionSettingArgs'] servicenow_extension_settings: Extension settings for the ServiceNow integration.
        :param str slug: A human-readable, unique identifier, used to identify a project.
        :param str space_id: The space ID associated with this project.
        :param Sequence['GetProjectsProjectTemplateArgs'] templates: Template parameters for the project.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the project.
        :param str variable_set_id: The ID of the variable set associated with this project.
        :param Sequence['GetProjectsProjectVersioningStrategyArgs'] versioning_strategies: The versioning strategy for the project.
        """
        pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        pulumi.set(__self__, "auto_create_release", auto_create_release)
        pulumi.set(__self__, "auto_deploy_release_overrides", auto_deploy_release_overrides)
        pulumi.set(__self__, "cloned_from_project_id", cloned_from_project_id)
        pulumi.set(__self__, "connectivity_policies", connectivity_policies)
        pulumi.set(__self__, "default_guided_failure_mode", default_guided_failure_mode)
        pulumi.set(__self__, "default_to_skip_if_already_installed", default_to_skip_if_already_installed)
        pulumi.set(__self__, "deployment_changes_template", deployment_changes_template)
        pulumi.set(__self__, "deployment_process_id", deployment_process_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "discrete_channel_release", discrete_channel_release)
        pulumi.set(__self__, "git_anonymous_persistence_settings", git_anonymous_persistence_settings)
        pulumi.set(__self__, "git_library_persistence_settings", git_library_persistence_settings)
        pulumi.set(__self__, "git_username_password_persistence_settings", git_username_password_persistence_settings)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "included_library_variable_sets", included_library_variable_sets)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_discrete_channel_release", is_discrete_channel_release)
        pulumi.set(__self__, "is_version_controlled", is_version_controlled)
        pulumi.set(__self__, "jira_service_management_extension_settings", jira_service_management_extension_settings)
        pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_group_id", project_group_id)
        pulumi.set(__self__, "release_creation_strategies", release_creation_strategies)
        pulumi.set(__self__, "release_notes_template", release_notes_template)
        pulumi.set(__self__, "servicenow_extension_settings", servicenow_extension_settings)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "templates", templates)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "variable_set_id", variable_set_id)
        pulumi.set(__self__, "versioning_strategies", versioning_strategies)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    @_utilities.deprecated("""Allow deployments to be created when there are no targets.""")
    def allow_deployments_to_no_targets(self) -> bool:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="autoCreateRelease")
    def auto_create_release(self) -> bool:
        return pulumi.get(self, "auto_create_release")

    @property
    @pulumi.getter(name="autoDeployReleaseOverrides")
    def auto_deploy_release_overrides(self) -> Sequence['outputs.GetProjectsProjectAutoDeployReleaseOverrideResult']:
        return pulumi.get(self, "auto_deploy_release_overrides")

    @property
    @pulumi.getter(name="clonedFromProjectId")
    def cloned_from_project_id(self) -> str:
        return pulumi.get(self, "cloned_from_project_id")

    @property
    @pulumi.getter(name="connectivityPolicies")
    def connectivity_policies(self) -> Sequence['outputs.GetProjectsProjectConnectivityPolicyResult']:
        return pulumi.get(self, "connectivity_policies")

    @property
    @pulumi.getter(name="defaultGuidedFailureMode")
    def default_guided_failure_mode(self) -> str:
        return pulumi.get(self, "default_guided_failure_mode")

    @property
    @pulumi.getter(name="defaultToSkipIfAlreadyInstalled")
    def default_to_skip_if_already_installed(self) -> bool:
        return pulumi.get(self, "default_to_skip_if_already_installed")

    @property
    @pulumi.getter(name="deploymentChangesTemplate")
    def deployment_changes_template(self) -> str:
        return pulumi.get(self, "deployment_changes_template")

    @property
    @pulumi.getter(name="deploymentProcessId")
    def deployment_process_id(self) -> str:
        return pulumi.get(self, "deployment_process_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this project
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discreteChannelRelease")
    def discrete_channel_release(self) -> bool:
        """
        Treats releases of different channels to the same environment as a separate deployment dimension
        """
        return pulumi.get(self, "discrete_channel_release")

    @property
    @pulumi.getter(name="gitAnonymousPersistenceSettings")
    def git_anonymous_persistence_settings(self) -> Sequence['outputs.GetProjectsProjectGitAnonymousPersistenceSettingResult']:
        """
        Git-related persistence settings for a version-controlled project using anonymous authentication.
        """
        return pulumi.get(self, "git_anonymous_persistence_settings")

    @property
    @pulumi.getter(name="gitLibraryPersistenceSettings")
    def git_library_persistence_settings(self) -> Sequence['outputs.GetProjectsProjectGitLibraryPersistenceSettingResult']:
        """
        Git-related persistence settings for a version-controlled project using library authentication.
        """
        return pulumi.get(self, "git_library_persistence_settings")

    @property
    @pulumi.getter(name="gitUsernamePasswordPersistenceSettings")
    def git_username_password_persistence_settings(self) -> Sequence['outputs.GetProjectsProjectGitUsernamePasswordPersistenceSettingResult']:
        """
        Git-related persistence settings for a version-controlled project using username*password authentication.
        """
        return pulumi.get(self, "git_username_password_persistence_settings")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includedLibraryVariableSets")
    def included_library_variable_sets(self) -> Sequence[str]:
        return pulumi.get(self, "included_library_variable_sets")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isDiscreteChannelRelease")
    def is_discrete_channel_release(self) -> bool:
        return pulumi.get(self, "is_discrete_channel_release")

    @property
    @pulumi.getter(name="isVersionControlled")
    def is_version_controlled(self) -> bool:
        return pulumi.get(self, "is_version_controlled")

    @property
    @pulumi.getter(name="jiraServiceManagementExtensionSettings")
    def jira_service_management_extension_settings(self) -> Sequence['outputs.GetProjectsProjectJiraServiceManagementExtensionSettingResult']:
        """
        Extension settings for the Jira Service Management (JSM) integration.
        """
        return pulumi.get(self, "jira_service_management_extension_settings")

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> str:
        """
        The lifecycle ID associated with this project
        """
        return pulumi.get(self, "lifecycle_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the project in Octopus Deploy. This name must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectGroupId")
    def project_group_id(self) -> str:
        """
        The project group ID associated with this project.
        """
        return pulumi.get(self, "project_group_id")

    @property
    @pulumi.getter(name="releaseCreationStrategies")
    def release_creation_strategies(self) -> Sequence['outputs.GetProjectsProjectReleaseCreationStrategyResult']:
        """
        The release creation strategy for the project.
        """
        return pulumi.get(self, "release_creation_strategies")

    @property
    @pulumi.getter(name="releaseNotesTemplate")
    def release_notes_template(self) -> str:
        """
        The template to use for release notes.
        """
        return pulumi.get(self, "release_notes_template")

    @property
    @pulumi.getter(name="servicenowExtensionSettings")
    def servicenow_extension_settings(self) -> Sequence['outputs.GetProjectsProjectServicenowExtensionSettingResult']:
        """
        Extension settings for the ServiceNow integration.
        """
        return pulumi.get(self, "servicenow_extension_settings")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        A human-readable, unique identifier, used to identify a project.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this project.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetProjectsProjectTemplateResult']:
        """
        Template parameters for the project.
        """
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the project.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        """
        The ID of the variable set associated with this project.
        """
        return pulumi.get(self, "variable_set_id")

    @property
    @pulumi.getter(name="versioningStrategies")
    def versioning_strategies(self) -> Sequence['outputs.GetProjectsProjectVersioningStrategyResult']:
        """
        The versioning strategy for the project.
        """
        return pulumi.get(self, "versioning_strategies")


@pulumi.output_type
class GetProjectsProjectAutoDeployReleaseOverrideResult(dict):
    def __init__(__self__, *,
                 environment_id: str,
                 release_id: str,
                 tenant_id: str):
        """
        :param str environment_id: The environment ID for the auto deploy release override.
        :param str release_id: The release ID for the auto deploy release override.
        :param str tenant_id: The tenant ID for the auto deploy release override.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "release_id", release_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> str:
        """
        The environment ID for the auto deploy release override.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> str:
        """
        The release ID for the auto deploy release override.
        """
        return pulumi.get(self, "release_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID for the auto deploy release override.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetProjectsProjectConnectivityPolicyResult(dict):
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: bool,
                 exclude_unhealthy_targets: bool,
                 skip_machine_behavior: str,
                 target_roles: Sequence[str]):
        """
        :param bool allow_deployments_to_no_targets: Allow deployments to be created when there are no targets.
        :param bool exclude_unhealthy_targets: Exclude unhealthy targets from deployments.
        :param str skip_machine_behavior: The behavior when a machine is skipped.
        :param Sequence[str] target_roles: The target roles for the connectivity policy.
        """
        pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> bool:
        """
        Allow deployments to be created when there are no targets.
        """
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> bool:
        """
        Exclude unhealthy targets from deployments.
        """
        return pulumi.get(self, "exclude_unhealthy_targets")

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> str:
        """
        The behavior when a machine is skipped.
        """
        return pulumi.get(self, "skip_machine_behavior")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Sequence[str]:
        """
        The target roles for the connectivity policy.
        """
        return pulumi.get(self, "target_roles")


@pulumi.output_type
class GetProjectsProjectGitAnonymousPersistenceSettingResult(dict):
    def __init__(__self__, *,
                 base_path: str,
                 default_branch: str,
                 protected_branches: Sequence[str],
                 url: str):
        """
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        :param str url: The URL associated with these version control settings.
        """
        pulumi.set(__self__, "base_path", base_path)
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "protected_branches", protected_branches)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> str:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Sequence[str]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetProjectsProjectGitLibraryPersistenceSettingResult(dict):
    def __init__(__self__, *,
                 base_path: str,
                 default_branch: str,
                 git_credential_id: str,
                 protected_branches: Sequence[str],
                 url: str):
        """
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param str git_credential_id: The ID of the Git credential.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        :param str url: The URL associated with these version control settings.
        """
        pulumi.set(__self__, "base_path", base_path)
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_id", git_credential_id)
        pulumi.set(__self__, "protected_branches", protected_branches)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> str:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> str:
        """
        The ID of the Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Sequence[str]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetProjectsProjectGitUsernamePasswordPersistenceSettingResult(dict):
    def __init__(__self__, *,
                 base_path: str,
                 default_branch: str,
                 password: str,
                 protected_branches: Sequence[str],
                 url: str,
                 username: str):
        """
        :param str base_path: The base path associated with these version control settings.
        :param str default_branch: The default branch associated with these version control settings.
        :param str password: The password for the Git credential.
        :param Sequence[str] protected_branches: A list of protected branch patterns.
        :param str url: The URL associated with these version control settings.
        :param str username: The username for the Git credential.
        """
        pulumi.set(__self__, "base_path", base_path)
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "protected_branches", protected_branches)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> str:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for the Git credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Sequence[str]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetProjectsProjectJiraServiceManagementExtensionSettingResult(dict):
    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 service_desk_project_name: str):
        """
        :param str connection_id: The connection identifier for JSM.
        :param bool is_enabled: Whether the JSM extension is enabled.
        :param str service_desk_project_name: The JSM service desk project name.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "service_desk_project_name", service_desk_project_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The connection identifier for JSM.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether the JSM extension is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="serviceDeskProjectName")
    def service_desk_project_name(self) -> str:
        """
        The JSM service desk project name.
        """
        return pulumi.get(self, "service_desk_project_name")


@pulumi.output_type
class GetProjectsProjectReleaseCreationStrategyResult(dict):
    def __init__(__self__, *,
                 channel_id: str,
                 release_creation_package_step_id: str,
                 release_creation_packages: Sequence['outputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult']):
        """
        :param str channel_id: The ID of the channel to use for release creation.
        :param str release_creation_package_step_id: The ID of the step containing the package for release creation.
        :param Sequence['GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageArgs'] release_creation_packages: Details of the package used for release creation.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        pulumi.set(__self__, "release_creation_package_step_id", release_creation_package_step_id)
        pulumi.set(__self__, "release_creation_packages", release_creation_packages)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> str:
        """
        The ID of the channel to use for release creation.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="releaseCreationPackageStepId")
    def release_creation_package_step_id(self) -> str:
        """
        The ID of the step containing the package for release creation.
        """
        return pulumi.get(self, "release_creation_package_step_id")

    @property
    @pulumi.getter(name="releaseCreationPackages")
    def release_creation_packages(self) -> Sequence['outputs.GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult']:
        """
        Details of the package used for release creation.
        """
        return pulumi.get(self, "release_creation_packages")


@pulumi.output_type
class GetProjectsProjectReleaseCreationStrategyReleaseCreationPackageResult(dict):
    def __init__(__self__, *,
                 deployment_action: str,
                 package_reference: str):
        """
        :param str deployment_action: The deployment action for the release creation package.
        :param str package_reference: The package reference for the release creation package.
        """
        pulumi.set(__self__, "deployment_action", deployment_action)
        pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> str:
        """
        The deployment action for the release creation package.
        """
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> str:
        """
        The package reference for the release creation package.
        """
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class GetProjectsProjectServicenowExtensionSettingResult(dict):
    def __init__(__self__, *,
                 connection_id: str,
                 is_enabled: bool,
                 is_state_automatically_transitioned: bool,
                 standard_change_template_name: str):
        """
        :param str connection_id: The connection identifier for ServiceNow.
        :param bool is_enabled: Whether the ServiceNow extension is enabled.
        :param bool is_state_automatically_transitioned: Whether state is automatically transitioned in ServiceNow.
        :param str standard_change_template_name: The name of the standard change template in ServiceNow.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_state_automatically_transitioned", is_state_automatically_transitioned)
        pulumi.set(__self__, "standard_change_template_name", standard_change_template_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> str:
        """
        The connection identifier for ServiceNow.
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        Whether the ServiceNow extension is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isStateAutomaticallyTransitioned")
    def is_state_automatically_transitioned(self) -> bool:
        """
        Whether state is automatically transitioned in ServiceNow.
        """
        return pulumi.get(self, "is_state_automatically_transitioned")

    @property
    @pulumi.getter(name="standardChangeTemplateName")
    def standard_change_template_name(self) -> str:
        """
        The name of the standard change template in ServiceNow.
        """
        return pulumi.get(self, "standard_change_template_name")


@pulumi.output_type
class GetProjectsProjectTemplateResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 display_settings: Mapping[str, str],
                 help_text: str,
                 id: str,
                 label: str,
                 name: str):
        """
        :param str default_value: The default value for the parameter.
        :param Mapping[str, str] display_settings: The display settings for the parameter.
        :param str help_text: The help text for the parameter.
        :param str id: The ID of the template parameter.
        :param str label: The label shown beside the parameter.
        :param str name: The name of the variable set by the parameter.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "display_settings", display_settings)
        pulumi.set(__self__, "help_text", help_text)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        The default value for the parameter.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Mapping[str, str]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> str:
        """
        The help text for the parameter.
        """
        return pulumi.get(self, "help_text")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the template parameter.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label shown beside the parameter.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the variable set by the parameter.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetProjectsProjectVersioningStrategyResult(dict):
    def __init__(__self__, *,
                 donor_package_step_id: str,
                 donor_packages: Sequence['outputs.GetProjectsProjectVersioningStrategyDonorPackageResult'],
                 template: str):
        """
        :param str donor_package_step_id: The ID of the step containing the donor package.
        :param str template: The template to use for version numbers.
        """
        pulumi.set(__self__, "donor_package_step_id", donor_package_step_id)
        pulumi.set(__self__, "donor_packages", donor_packages)
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="donorPackageStepId")
    def donor_package_step_id(self) -> str:
        """
        The ID of the step containing the donor package.
        """
        return pulumi.get(self, "donor_package_step_id")

    @property
    @pulumi.getter(name="donorPackages")
    def donor_packages(self) -> Sequence['outputs.GetProjectsProjectVersioningStrategyDonorPackageResult']:
        return pulumi.get(self, "donor_packages")

    @property
    @pulumi.getter
    def template(self) -> str:
        """
        The template to use for version numbers.
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class GetProjectsProjectVersioningStrategyDonorPackageResult(dict):
    def __init__(__self__, *,
                 deployment_action: str,
                 package_reference: str):
        """
        :param str deployment_action: The deployment action for the donor package.
        :param str package_reference: The package reference for the donor package.
        """
        pulumi.set(__self__, "deployment_action", deployment_action)
        pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> str:
        """
        The deployment action for the donor package.
        """
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> str:
        """
        The package reference for the donor package.
        """
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class GetScriptModulesScriptModuleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 scripts: Sequence['outputs.GetScriptModulesScriptModuleScriptResult'],
                 space_id: str,
                 variable_set_id: str):
        """
        :param str description: The description of this script module.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param Sequence['GetScriptModulesScriptModuleScriptArgs'] scripts: The script associated with this script module.
        :param str space_id: The space ID associated with this Script Module.
        :param str variable_set_id: The variable set ID for this script module.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scripts", scripts)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "variable_set_id", variable_set_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this script module.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scripts(self) -> Sequence['outputs.GetScriptModulesScriptModuleScriptResult']:
        """
        The script associated with this script module.
        """
        return pulumi.get(self, "scripts")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this Script Module.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="variableSetId")
    def variable_set_id(self) -> str:
        """
        The variable set ID for this script module.
        """
        return pulumi.get(self, "variable_set_id")


@pulumi.output_type
class GetScriptModulesScriptModuleScriptResult(dict):
    def __init__(__self__, *,
                 body: str,
                 syntax: str):
        """
        :param str body: The body of this script module.
        :param str syntax: The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        The body of this script module.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def syntax(self) -> str:
        """
        The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        return pulumi.get(self, "syntax")


@pulumi.output_type
class GetSpacesSpaceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 is_default: bool,
                 is_task_queue_stopped: bool,
                 name: str,
                 slug: str,
                 space_managers_team_members: Sequence[str],
                 space_managers_teams: Sequence[str]):
        """
        :param str description: The description of this space.
        :param str id: The unique ID for this resource.
        :param bool is_default: Specifies if this space is the default space in Octopus.
        :param bool is_task_queue_stopped: Specifies the status of the task queue for this space.
        :param str name: The name of this resource, no more than 20 characters long
        :param str slug: The unique slug of this space
        :param Sequence[str] space_managers_team_members: A list of user IDs designated to be managers of this space.
        :param Sequence[str] space_managers_teams: A list of team IDs designated to be managers of this space.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_task_queue_stopped", is_task_queue_stopped)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "space_managers_team_members", space_managers_team_members)
        pulumi.set(__self__, "space_managers_teams", space_managers_teams)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this space.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Specifies if this space is the default space in Octopus.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isTaskQueueStopped")
    def is_task_queue_stopped(self) -> bool:
        """
        Specifies the status of the task queue for this space.
        """
        return pulumi.get(self, "is_task_queue_stopped")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource, no more than 20 characters long
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The unique slug of this space
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="spaceManagersTeamMembers")
    def space_managers_team_members(self) -> Sequence[str]:
        """
        A list of user IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_team_members")

    @property
    @pulumi.getter(name="spaceManagersTeams")
    def space_managers_teams(self) -> Sequence[str]:
        """
        A list of team IDs designated to be managers of this space.
        """
        return pulumi.get(self, "space_managers_teams")


@pulumi.output_type
class GetTagSetsTagSetResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 sort_order: int,
                 space_id: str):
        """
        :param str description: The description of this tag set.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param int sort_order: The sort order associated with this resource.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this tag set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The sort order associated with this resource.
        """
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetTenantProjectsTenantProjectResult(dict):
    def __init__(__self__, *,
                 environment_ids: Sequence[str],
                 id: str,
                 project_id: str,
                 tenant_id: str):
        """
        :param Sequence[str] environment_ids: The environment IDs associated with this tenant.
        :param str id: The unique ID for this resource.
        :param str project_id: The project ID associated with this tenant.
        :param str tenant_id: The tenant ID associated with this tenant.
        """
        pulumi.set(__self__, "environment_ids", environment_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Sequence[str]:
        """
        The environment IDs associated with this tenant.
        """
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project ID associated with this tenant.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID associated with this tenant.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetTenantsTenantResult(dict):
    def __init__(__self__, *,
                 cloned_from_tenant_id: str,
                 description: str,
                 id: str,
                 name: str,
                 space_id: str,
                 tenant_tags: Sequence[str]):
        """
        :param str cloned_from_tenant_id: The ID of the tenant from which this tenant was cloned.
        :param str description: The description of this tenants.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this tenant.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "cloned_from_tenant_id", cloned_from_tenant_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="clonedFromTenantId")
    def cloned_from_tenant_id(self) -> str:
        """
        The ID of the tenant from which this tenant was cloned.
        """
        return pulumi.get(self, "cloned_from_tenant_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this tenants.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this tenant.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class GetVariablesPromptResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_settings: Sequence['outputs.GetVariablesPromptDisplaySettingResult'],
                 is_required: bool,
                 label: str):
        """
        :param str description: The description of this variable prompt option.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_settings", display_settings)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this variable prompt option.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Sequence['outputs.GetVariablesPromptDisplaySettingResult']:
        return pulumi.get(self, "display_settings")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")


@pulumi.output_type
class GetVariablesPromptDisplaySettingResult(dict):
    def __init__(__self__, *,
                 control_type: str,
                 select_options: Sequence['outputs.GetVariablesPromptDisplaySettingSelectOptionResult']):
        """
        :param str control_type: The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
        :param Sequence['GetVariablesPromptDisplaySettingSelectOptionArgs'] select_options: If the `control_type` is `Select`, then this value defines an option.
        """
        pulumi.set(__self__, "control_type", control_type)
        pulumi.set(__self__, "select_options", select_options)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> str:
        """
        The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
        """
        return pulumi.get(self, "control_type")

    @property
    @pulumi.getter(name="selectOptions")
    def select_options(self) -> Sequence['outputs.GetVariablesPromptDisplaySettingSelectOptionResult']:
        """
        If the `control_type` is `Select`, then this value defines an option.
        """
        return pulumi.get(self, "select_options")


@pulumi.output_type
class GetVariablesPromptDisplaySettingSelectOptionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 value: str):
        """
        :param str display_name: The display name for the select value
        :param str value: The select value
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the select value
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The select value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVariablesScopeResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 channels: Optional[Sequence[str]] = None,
                 environments: Optional[Sequence[str]] = None,
                 machines: Optional[Sequence[str]] = None,
                 processes: Optional[Sequence[str]] = None,
                 roles: Optional[Sequence[str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] actions: A list of actions that are scoped to this variable value.
        :param Sequence[str] channels: A list of channels that are scoped to this variable value.
        :param Sequence[str] environments: A list of environments that are scoped to this variable value.
        :param Sequence[str] machines: A list of machines that are scoped to this variable value.
        :param Sequence[str] processes: A list of processes that are scoped to this variable value.
        :param Sequence[str] roles: A list of roles that are scoped to this variable value.
        :param Sequence[str] tenant_tags: A list of tenant tags that are scoped to this variable value.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        A list of actions that are scoped to this variable value.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        A list of channels that are scoped to this variable value.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        A list of environments that are scoped to this variable value.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def machines(self) -> Optional[Sequence[str]]:
        """
        A list of machines that are scoped to this variable value.
        """
        return pulumi.get(self, "machines")

    @property
    @pulumi.getter
    def processes(self) -> Optional[Sequence[str]]:
        """
        A list of processes that are scoped to this variable value.
        """
        return pulumi.get(self, "processes")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        A list of roles that are scoped to this variable value.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags that are scoped to this variable value.
        """
        return pulumi.get(self, "tenant_tags")


