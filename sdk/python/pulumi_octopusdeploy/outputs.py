# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AzureCloudServiceDeploymentTargetEndpoint',
    'AzureCloudServiceDeploymentTargetEndpointAuthentication',
    'AzureCloudServiceDeploymentTargetEndpointContainer',
    'AzureCloudServiceDeploymentTargetEndpointDestination',
    'AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail',
    'AzureServiceFabricClusterDeploymentTargetEndpoint',
    'AzureServiceFabricClusterDeploymentTargetEndpointAuthentication',
    'AzureServiceFabricClusterDeploymentTargetEndpointContainer',
    'AzureServiceFabricClusterDeploymentTargetEndpointDestination',
    'AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail',
    'AzureWebAppDeploymentTargetEndpoint',
    'AzureWebAppDeploymentTargetEndpointAuthentication',
    'AzureWebAppDeploymentTargetEndpointContainer',
    'AzureWebAppDeploymentTargetEndpointDestination',
    'AzureWebAppDeploymentTargetEndpointTentacleVersionDetail',
    'ChannelRule',
    'ChannelRuleActionPackage',
    'CloudRegionDeploymentTargetEndpoint',
    'CloudRegionDeploymentTargetEndpointAuthentication',
    'CloudRegionDeploymentTargetEndpointContainer',
    'CloudRegionDeploymentTargetEndpointDestination',
    'CloudRegionDeploymentTargetEndpointTentacleVersionDetail',
    'DeploymentProcessStep',
    'DeploymentProcessStepAction',
    'DeploymentProcessStepActionActionTemplate',
    'DeploymentProcessStepActionContainer',
    'DeploymentProcessStepActionGitDependency',
    'DeploymentProcessStepActionPackage',
    'DeploymentProcessStepActionPrimaryPackage',
    'DeploymentProcessStepApplyTerraformTemplateAction',
    'DeploymentProcessStepApplyTerraformTemplateActionActionTemplate',
    'DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccount',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole',
    'DeploymentProcessStepApplyTerraformTemplateActionAzureAccount',
    'DeploymentProcessStepApplyTerraformTemplateActionContainer',
    'DeploymentProcessStepApplyTerraformTemplateActionGitDependency',
    'DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount',
    'DeploymentProcessStepApplyTerraformTemplateActionPackage',
    'DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage',
    'DeploymentProcessStepApplyTerraformTemplateActionTemplate',
    'DeploymentProcessStepDeployKubernetesSecretAction',
    'DeploymentProcessStepDeployKubernetesSecretActionActionTemplate',
    'DeploymentProcessStepDeployKubernetesSecretActionContainer',
    'DeploymentProcessStepDeployKubernetesSecretActionGitDependency',
    'DeploymentProcessStepDeployKubernetesSecretActionPackage',
    'DeploymentProcessStepDeployPackageAction',
    'DeploymentProcessStepDeployPackageActionActionTemplate',
    'DeploymentProcessStepDeployPackageActionContainer',
    'DeploymentProcessStepDeployPackageActionGitDependency',
    'DeploymentProcessStepDeployPackageActionPackage',
    'DeploymentProcessStepDeployPackageActionPrimaryPackage',
    'DeploymentProcessStepDeployPackageActionWindowsService',
    'DeploymentProcessStepDeployWindowsServiceAction',
    'DeploymentProcessStepDeployWindowsServiceActionActionTemplate',
    'DeploymentProcessStepDeployWindowsServiceActionContainer',
    'DeploymentProcessStepDeployWindowsServiceActionGitDependency',
    'DeploymentProcessStepDeployWindowsServiceActionPackage',
    'DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage',
    'DeploymentProcessStepManualInterventionAction',
    'DeploymentProcessStepManualInterventionActionActionTemplate',
    'DeploymentProcessStepManualInterventionActionContainer',
    'DeploymentProcessStepManualInterventionActionGitDependency',
    'DeploymentProcessStepManualInterventionActionPackage',
    'DeploymentProcessStepRunKubectlScriptAction',
    'DeploymentProcessStepRunKubectlScriptActionActionTemplate',
    'DeploymentProcessStepRunKubectlScriptActionContainer',
    'DeploymentProcessStepRunKubectlScriptActionGitDependency',
    'DeploymentProcessStepRunKubectlScriptActionPackage',
    'DeploymentProcessStepRunKubectlScriptActionPrimaryPackage',
    'DeploymentProcessStepRunScriptAction',
    'DeploymentProcessStepRunScriptActionActionTemplate',
    'DeploymentProcessStepRunScriptActionContainer',
    'DeploymentProcessStepRunScriptActionGitDependency',
    'DeploymentProcessStepRunScriptActionPackage',
    'DeploymentProcessStepRunScriptActionPrimaryPackage',
    'ExternalFeedCreateReleaseTriggerPackage',
    'ExternalFeedCreateReleaseTriggerPrimaryPackage',
    'KubernetesClusterDeploymentTargetAuthentication',
    'KubernetesClusterDeploymentTargetAwsAccountAuthentication',
    'KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication',
    'KubernetesClusterDeploymentTargetCertificateAuthentication',
    'KubernetesClusterDeploymentTargetContainer',
    'KubernetesClusterDeploymentTargetEndpoint',
    'KubernetesClusterDeploymentTargetEndpointAuthentication',
    'KubernetesClusterDeploymentTargetEndpointContainer',
    'KubernetesClusterDeploymentTargetEndpointDestination',
    'KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail',
    'KubernetesClusterDeploymentTargetGcpAccountAuthentication',
    'KubernetesClusterDeploymentTargetPodAuthentication',
    'ListeningTentacleDeploymentTargetTentacleVersionDetail',
    'MachinePolicyMachineCleanupPolicy',
    'MachinePolicyMachineConnectivityPolicy',
    'MachinePolicyMachineHealthCheckPolicy',
    'MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy',
    'MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy',
    'MachinePolicyMachineUpdatePolicy',
    'OfflinePackageDropDeploymentTargetDestination',
    'OfflinePackageDropDeploymentTargetEndpoint',
    'OfflinePackageDropDeploymentTargetEndpointAuthentication',
    'OfflinePackageDropDeploymentTargetEndpointContainer',
    'OfflinePackageDropDeploymentTargetEndpointDestination',
    'OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail',
    'PollingTentacleDeploymentTargetEndpoint',
    'PollingTentacleDeploymentTargetEndpointAuthentication',
    'PollingTentacleDeploymentTargetEndpointContainer',
    'PollingTentacleDeploymentTargetEndpointDestination',
    'PollingTentacleDeploymentTargetEndpointTentacleVersionDetail',
    'PollingTentacleDeploymentTargetTentacleVersionDetail',
    'ProjectScheduledTriggerContinuousDailySchedule',
    'ProjectScheduledTriggerCronExpressionSchedule',
    'ProjectScheduledTriggerDaysPerMonthSchedule',
    'ProjectScheduledTriggerDeployLatestReleaseAction',
    'ProjectScheduledTriggerDeployNewReleaseAction',
    'ProjectScheduledTriggerOnceDailySchedule',
    'ProjectScheduledTriggerRunRunbookAction',
    'RunbookProcessStep',
    'RunbookProcessStepAction',
    'RunbookProcessStepActionActionTemplate',
    'RunbookProcessStepActionContainer',
    'RunbookProcessStepActionGitDependency',
    'RunbookProcessStepActionPackage',
    'RunbookProcessStepActionPrimaryPackage',
    'RunbookProcessStepApplyTerraformTemplateAction',
    'RunbookProcessStepApplyTerraformTemplateActionActionTemplate',
    'RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccount',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole',
    'RunbookProcessStepApplyTerraformTemplateActionAzureAccount',
    'RunbookProcessStepApplyTerraformTemplateActionContainer',
    'RunbookProcessStepApplyTerraformTemplateActionGitDependency',
    'RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount',
    'RunbookProcessStepApplyTerraformTemplateActionPackage',
    'RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage',
    'RunbookProcessStepApplyTerraformTemplateActionTemplate',
    'RunbookProcessStepDeployKubernetesSecretAction',
    'RunbookProcessStepDeployKubernetesSecretActionActionTemplate',
    'RunbookProcessStepDeployKubernetesSecretActionContainer',
    'RunbookProcessStepDeployKubernetesSecretActionGitDependency',
    'RunbookProcessStepDeployKubernetesSecretActionPackage',
    'RunbookProcessStepDeployPackageAction',
    'RunbookProcessStepDeployPackageActionActionTemplate',
    'RunbookProcessStepDeployPackageActionContainer',
    'RunbookProcessStepDeployPackageActionGitDependency',
    'RunbookProcessStepDeployPackageActionPackage',
    'RunbookProcessStepDeployPackageActionPrimaryPackage',
    'RunbookProcessStepDeployPackageActionWindowsService',
    'RunbookProcessStepDeployWindowsServiceAction',
    'RunbookProcessStepDeployWindowsServiceActionActionTemplate',
    'RunbookProcessStepDeployWindowsServiceActionContainer',
    'RunbookProcessStepDeployWindowsServiceActionGitDependency',
    'RunbookProcessStepDeployWindowsServiceActionPackage',
    'RunbookProcessStepDeployWindowsServiceActionPrimaryPackage',
    'RunbookProcessStepManualInterventionAction',
    'RunbookProcessStepManualInterventionActionActionTemplate',
    'RunbookProcessStepManualInterventionActionContainer',
    'RunbookProcessStepManualInterventionActionGitDependency',
    'RunbookProcessStepManualInterventionActionPackage',
    'RunbookProcessStepRunKubectlScriptAction',
    'RunbookProcessStepRunKubectlScriptActionActionTemplate',
    'RunbookProcessStepRunKubectlScriptActionContainer',
    'RunbookProcessStepRunKubectlScriptActionGitDependency',
    'RunbookProcessStepRunKubectlScriptActionPackage',
    'RunbookProcessStepRunKubectlScriptActionPrimaryPackage',
    'RunbookProcessStepRunScriptAction',
    'RunbookProcessStepRunScriptActionActionTemplate',
    'RunbookProcessStepRunScriptActionContainer',
    'RunbookProcessStepRunScriptActionGitDependency',
    'RunbookProcessStepRunScriptActionPackage',
    'RunbookProcessStepRunScriptActionPrimaryPackage',
    'SshConnectionDeploymentTargetEndpoint',
    'SshConnectionDeploymentTargetEndpointAuthentication',
    'SshConnectionDeploymentTargetEndpointContainer',
    'SshConnectionDeploymentTargetEndpointDestination',
    'SshConnectionDeploymentTargetEndpointTentacleVersionDetail',
    'TeamExternalSecurityGroup',
    'TeamUserRole',
    'UserIdentity',
    'UserIdentityClaim',
    'GetAccountsAccountResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult',
    'GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult',
    'GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult',
    'GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetCertificatesCertificateResult',
    'GetChannelsChannelResult',
    'GetChannelsChannelRuleResult',
    'GetChannelsChannelRuleActionPackageResult',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetResult',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointResult',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointAuthenticationResult',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointContainerResult',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointDestinationResult',
    'GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetDeploymentTargetsDeploymentTargetResult',
    'GetDeploymentTargetsDeploymentTargetEndpointResult',
    'GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult',
    'GetDeploymentTargetsDeploymentTargetEndpointContainerResult',
    'GetDeploymentTargetsDeploymentTargetEndpointDestinationResult',
    'GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetKubernetesAgentDeploymentTargetsKubernetesAgentDeploymentTargetResult',
    'GetKubernetesAgentWorkersKubernetesAgentWorkerResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult',
    'GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetPodAuthenticationResult',
    'GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetResult',
    'GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult',
    'GetMachinePoliciesMachinePolicyResult',
    'GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult',
    'GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult',
    'GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult',
    'GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult',
    'GetTeamsTeamResult',
    'GetTeamsTeamExternalSecurityGroupResult',
    'GetUserRolesUserRoleResult',
    'GetUsersUserResult',
    'GetUsersUserIdentityResult',
    'GetUsersUserIdentityClaimResult',
    'GetWorkerPoolsWorkerPoolResult',
]

@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.AzureCloudServiceDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.AzureCloudServiceDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.AzureServiceFabricClusterDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.AzureServiceFabricClusterDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.AzureWebAppDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.AzureWebAppDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.AzureWebAppDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class AzureWebAppDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AzureWebAppDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AzureWebAppDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AzureWebAppDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ChannelRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionPackages":
            suggest = "action_packages"
        elif key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_packages: Sequence['outputs.ChannelRuleActionPackage'],
                 id: Optional[str] = None,
                 tag: Optional[str] = None,
                 version_range: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_packages", action_packages)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter(name="actionPackages")
    def action_packages(self) -> Sequence['outputs.ChannelRuleActionPackage']:
        return pulumi.get(self, "action_packages")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class ChannelRuleActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentAction":
            suggest = "deployment_action"
        elif key == "packageReference":
            suggest = "package_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelRuleActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelRuleActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelRuleActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class CloudRegionDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRegionDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRegionDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRegionDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.CloudRegionDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.CloudRegionDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.CloudRegionDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.CloudRegionDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.CloudRegionDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.CloudRegionDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.CloudRegionDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.CloudRegionDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class CloudRegionDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRegionDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRegionDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRegionDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class CloudRegionDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRegionDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRegionDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRegionDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class CloudRegionDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRegionDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRegionDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRegionDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class CloudRegionDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudRegionDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudRegionDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudRegionDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyTerraformTemplateActions":
            suggest = "apply_terraform_template_actions"
        elif key == "conditionExpression":
            suggest = "condition_expression"
        elif key == "deployKubernetesSecretActions":
            suggest = "deploy_kubernetes_secret_actions"
        elif key == "deployPackageActions":
            suggest = "deploy_package_actions"
        elif key == "deployWindowsServiceActions":
            suggest = "deploy_windows_service_actions"
        elif key == "manualInterventionActions":
            suggest = "manual_intervention_actions"
        elif key == "packageRequirement":
            suggest = "package_requirement"
        elif key == "runKubectlScriptActions":
            suggest = "run_kubectl_script_actions"
        elif key == "runScriptActions":
            suggest = "run_script_actions"
        elif key == "startTrigger":
            suggest = "start_trigger"
        elif key == "targetRoles":
            suggest = "target_roles"
        elif key == "windowSize":
            suggest = "window_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 actions: Optional[Sequence['outputs.DeploymentProcessStepAction']] = None,
                 apply_terraform_template_actions: Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateAction']] = None,
                 condition: Optional[str] = None,
                 condition_expression: Optional[str] = None,
                 deploy_kubernetes_secret_actions: Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretAction']] = None,
                 deploy_package_actions: Optional[Sequence['outputs.DeploymentProcessStepDeployPackageAction']] = None,
                 deploy_windows_service_actions: Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceAction']] = None,
                 id: Optional[str] = None,
                 manual_intervention_actions: Optional[Sequence['outputs.DeploymentProcessStepManualInterventionAction']] = None,
                 package_requirement: Optional[str] = None,
                 properties: Optional[Mapping[str, Any]] = None,
                 run_kubectl_script_actions: Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptAction']] = None,
                 run_script_actions: Optional[Sequence['outputs.DeploymentProcessStepRunScriptAction']] = None,
                 start_trigger: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None,
                 window_size: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param Sequence['DeploymentProcessStepApplyTerraformTemplateActionArgs'] apply_terraform_template_actions: (see below for nested schema)
        :param str condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param str condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param str id: The unique ID for this resource.
        :param str package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param str start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param Sequence[str] target_roles: The roles that this step run against, or runs on behalf of
        :param str window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepAction']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateAction']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "apply_terraform_template_actions")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[str]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretAction']]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployPackageAction']]:
        return pulumi.get(self, "deploy_package_actions")

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceAction']]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepManualInterventionAction']]:
        return pulumi.get(self, "manual_intervention_actions")

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[str]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptAction']]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunScriptAction']]:
        return pulumi.get(self, "run_script_actions")

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[str]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[str]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")


@pulumi.output_type
class DeploymentProcessStepAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: str,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str action_type: The type of action
        :param str name: The name of this resource.
        :param 'DeploymentProcessStepActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepActionPackageArgs'] packages: The package assocated with this action.
        :param 'DeploymentProcessStepActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The type of action
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class DeploymentProcessStepActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str name: The name of this resource.
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param bool extract_during_deployment: Whether to extract the package during deployment
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedOptions":
            suggest = "advanced_options"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "awsAccount":
            suggest = "aws_account"
        elif key == "azureAccount":
            suggest = "azure_account"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "googleCloudAccount":
            suggest = "google_cloud_account"
        elif key == "inlineTemplate":
            suggest = "inline_template"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "templateParameters":
            suggest = "template_parameters"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced_options: 'outputs.DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions',
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionActionTemplate'] = None,
                 aws_account: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccount'] = None,
                 azure_account: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAzureAccount'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionGitDependency'] = None,
                 google_cloud_account: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount'] = None,
                 id: Optional[str] = None,
                 inline_template: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 template: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionTemplate'] = None,
                 template_parameters: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param 'DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param 'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs' aws_account: (see below for nested schema)
        :param 'DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs' azure_account: (see below for nested schema)
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepApplyTerraformTemplateActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param 'DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs' google_cloud_account: (see below for nested schema)
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs'] packages: The package assocated with this action.
        :param 'DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str slug: The human-readable unique identifier for this resource.
        :param 'DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs' template: (see below for nested schema)
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> 'outputs.DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions':
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccount']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "aws_account")

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAzureAccount']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "azure_account")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "google_cloud_account")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[str]:
        return pulumi.get(self, "inline_template")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepApplyTerraformTemplateActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionTemplate']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[str]:
        return pulumi.get(self, "template_parameters")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAdditionalPluginDownloads":
            suggest = "allow_additional_plugin_downloads"
        elif key == "applyParameters":
            suggest = "apply_parameters"
        elif key == "initParameters":
            suggest = "init_parameters"
        elif key == "pluginCacheDirectory":
            suggest = "plugin_cache_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[bool] = None,
                 apply_parameters: Optional[str] = None,
                 init_parameters: Optional[str] = None,
                 plugin_cache_directory: Optional[str] = None,
                 workspace: Optional[str] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[bool]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[str]:
        return pulumi.get(self, "apply_parameters")

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[str]:
        return pulumi.get(self, "init_parameters")

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[str]:
        return pulumi.get(self, "plugin_cache_directory")

    @property
    @pulumi.getter
    def workspace(self) -> Optional[str]:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useInstanceRole":
            suggest = "use_instance_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionAwsAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: Optional[str] = None,
                 role: Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole'] = None,
                 use_instance_role: Optional[bool] = None,
                 variable: Optional[str] = None):
        """
        :param 'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs' role: (see below for nested schema)
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "roleSessionName":
            suggest = "role_session_name"
        elif key == "sessionDuration":
            suggest = "session_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 external_id: Optional[str] = None,
                 role_session_name: Optional[str] = None,
                 session_duration: Optional[int] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[str]:
        return pulumi.get(self, "role_session_name")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionAzureAccount(dict):
    def __init__(__self__, *,
                 variable: Optional[str] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 variable: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param bool impersonate_service_account: Impersonate service accounts
        :param str project: This sets GOOGLE_PROJECT environment variable
        :param str region: This sets GOOGLE_REGION environment variable
        :param str service_account_emails: This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        :param bool use_vm_service_account: When running in a Compute Engine virtual machine, use the associated VM service account
        :param str zone: This sets GOOGLE_ZONE environment variable
        """
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        """
        Impersonate service accounts
        """
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        This sets GOOGLE_PROJECT environment variable
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        This sets GOOGLE_REGION environment variable
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        """
        This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        """
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        """
        When running in a Compute Engine virtual machine, use the associated VM service account
        """
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        This sets GOOGLE_ZONE environment variable
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepApplyTerraformTemplateActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVariableFiles":
            suggest = "additional_variable_files"
        elif key == "runAutomaticFileSubstitution":
            suggest = "run_automatic_file_substitution"
        elif key == "targetFiles":
            suggest = "target_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepApplyTerraformTemplateActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_variable_files: Optional[str] = None,
                 directory: Optional[str] = None,
                 run_automatic_file_substitution: Optional[bool] = None,
                 target_files: Optional[str] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[str]:
        return pulumi.get(self, "additional_variable_files")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[str]:
        return pulumi.get(self, "target_files")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "secretValues":
            suggest = "secret_values"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "kubernetesObjectStatusCheckEnabled":
            suggest = "kubernetes_object_status_check_enabled"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secret_name: str,
                 secret_values: Mapping[str, str],
                 action_template: Optional['outputs.DeploymentProcessStepDeployKubernetesSecretActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepDeployKubernetesSecretActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 kubernetes_object_status_check_enabled: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param str secret_name: The name of the secret resource
        :param 'DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepDeployKubernetesSecretActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param bool kubernetes_object_status_check_enabled: Indicates the status of the Kubernetes Object Status feature
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if kubernetes_object_status_check_enabled is not None:
            pulumi.set(__self__, "kubernetes_object_status_check_enabled", kubernetes_object_status_check_enabled)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret resource
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "secret_values")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepDeployKubernetesSecretActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepDeployKubernetesSecretActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter(name="kubernetesObjectStatusCheckEnabled")
    def kubernetes_object_status_check_enabled(self) -> Optional[bool]:
        """
        Indicates the status of the Kubernetes Object Status feature
        """
        return pulumi.get(self, "kubernetes_object_status_check_enabled")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployKubernetesSecretActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepDeployKubernetesSecretActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployKubernetesSecretActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployPackageAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryPackage":
            suggest = "primary_package"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "windowsService":
            suggest = "windows_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 primary_package: 'outputs.DeploymentProcessStepDeployPackageActionPrimaryPackage',
                 action_template: Optional['outputs.DeploymentProcessStepDeployPackageActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepDeployPackageActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 windows_service: Optional['outputs.DeploymentProcessStepDeployPackageActionWindowsService'] = None):
        """
        :param str name: The name of this resource.
        :param 'DeploymentProcessStepDeployPackageActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param 'DeploymentProcessStepDeployPackageActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepDeployPackageActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepDeployPackageActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepDeployPackageActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param 'DeploymentProcessStepDeployPackageActionWindowsServiceArgs' windows_service: Deploy a windows service feature
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.DeploymentProcessStepDeployPackageActionPrimaryPackage':
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepDeployPackageActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepDeployPackageActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployPackageActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional['outputs.DeploymentProcessStepDeployPackageActionWindowsService']:
        """
        Deploy a windows service feature
        """
        return pulumi.get(self, "windows_service")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployPackageActionWindowsService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "startMode":
            suggest = "start_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployPackageActionWindowsService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 service_name: str,
                 arguments: Optional[str] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 service_account: Optional[str] = None,
                 start_mode: Optional[str] = None):
        """
        :param str executable_path: The path to the executable relative to the package installation directory
        :param str service_name: The name of the service
        :param str arguments: The command line arguments that will be passed to the service when it starts
        :param str custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param str custom_account_password: The password for the custom account
        :param str dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param str description: User-friendly description of the service (optional)
        :param str display_name: The display name of the service (optional)
        :param str service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param str start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "startMode":
            suggest = "start_mode"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 name: str,
                 primary_package: 'outputs.DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage',
                 service_name: str,
                 action_template: Optional['outputs.DeploymentProcessStepDeployWindowsServiceActionActionTemplate'] = None,
                 arguments: Optional[str] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionContainer']] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepDeployWindowsServiceActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 service_account: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 start_mode: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str executable_path: The path to the executable relative to the package installation directory
        :param str name: The name of this resource.
        :param 'DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param str service_name: The name of the service
        :param 'DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param str arguments: The command line arguments that will be passed to the service when it starts
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepDeployWindowsServiceActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param str custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param str custom_account_password: The password for the custom account
        :param str dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param str description: User-friendly description of the service (optional)
        :param str display_name: The display name of the service (optional)
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepDeployWindowsServiceActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepDeployWindowsServiceActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param str service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param str slug: The human-readable unique identifier for this resource.
        :param str start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage':
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepDeployWindowsServiceActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepDeployWindowsServiceActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepDeployWindowsServiceActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepManualInterventionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "responsibleTeams":
            suggest = "responsible_teams"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instructions: str,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepManualInterventionActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepManualInterventionActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 responsible_teams: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str instructions: The instructions for the user to follow
        :param str name: The name of this resource.
        :param 'DeploymentProcessStepManualInterventionActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepManualInterventionActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepManualInterventionActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepManualInterventionActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param str responsible_teams: The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> str:
        """
        The instructions for the user to follow
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepManualInterventionActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepManualInterventionActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepManualInterventionActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[str]:
        """
        The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        """
        return pulumi.get(self, "responsible_teams")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class DeploymentProcessStepManualInterventionActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepManualInterventionActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepManualInterventionActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepManualInterventionActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepManualInterventionActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptBody":
            suggest = "script_body"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "scriptSyntax":
            suggest = "script_syntax"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "variableSubstitutionInFiles":
            suggest = "variable_substitution_in_files"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepRunKubectlScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepRunKubectlScriptActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepRunKubectlScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_body: Optional[str] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 script_syntax: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 variable_substitution_in_files: Optional[str] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param 'DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepRunKubectlScriptActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepRunKubectlScriptActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepRunKubectlScriptActionPackageArgs'] packages: The package assocated with this action.
        :param 'DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str script_file_name: The script file name in the package
        :param str script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepRunKubectlScriptActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepRunKubectlScriptActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunKubectlScriptActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepRunKubectlScriptActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[str]:
        return pulumi.get(self, "script_syntax")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[str]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str name: The name of this resource.
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param bool extract_during_deployment: Whether to extract the package during deployment
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunKubectlScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunKubectlScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptBody":
            suggest = "script_body"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "scriptSyntax":
            suggest = "script_syntax"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "variableSubstitutionInFiles":
            suggest = "variable_substitution_in_files"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.DeploymentProcessStepRunScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.DeploymentProcessStepRunScriptActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionPackage']] = None,
                 primary_package: Optional['outputs.DeploymentProcessStepRunScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_body: Optional[str] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 script_syntax: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 variable_substitution_in_files: Optional[str] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param 'DeploymentProcessStepRunScriptActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['DeploymentProcessStepRunScriptActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'DeploymentProcessStepRunScriptActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['DeploymentProcessStepRunScriptActionPackageArgs'] packages: The package assocated with this action.
        :param 'DeploymentProcessStepRunScriptActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str script_file_name: The script file name in the package
        :param str script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.DeploymentProcessStepRunScriptActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.DeploymentProcessStepRunScriptActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.DeploymentProcessStepRunScriptActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.DeploymentProcessStepRunScriptActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
        pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")

        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[str]:
        return pulumi.get(self, "script_syntax")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[str]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str name: The name of this resource.
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param bool extract_during_deployment: Whether to extract the package during deployment
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class DeploymentProcessStepRunScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentProcessStepRunScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class ExternalFeedCreateReleaseTriggerPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentActionSlug":
            suggest = "deployment_action_slug"
        elif key == "packageReference":
            suggest = "package_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalFeedCreateReleaseTriggerPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalFeedCreateReleaseTriggerPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalFeedCreateReleaseTriggerPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action_slug: str,
                 package_reference: str):
        pulumi.set(__self__, "deployment_action_slug", deployment_action_slug)
        pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentActionSlug")
    def deployment_action_slug(self) -> str:
        return pulumi.get(self, "deployment_action_slug")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> str:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class ExternalFeedCreateReleaseTriggerPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentActionSlug":
            suggest = "deployment_action_slug"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExternalFeedCreateReleaseTriggerPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExternalFeedCreateReleaseTriggerPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExternalFeedCreateReleaseTriggerPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_action_slug: str):
        pulumi.set(__self__, "deployment_action_slug", deployment_action_slug)

    @property
    @pulumi.getter(name="deploymentActionSlug")
    def deployment_action_slug(self) -> str:
        return pulumi.get(self, "deployment_action_slug")


@pulumi.output_type
class KubernetesClusterDeploymentTargetAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")


@pulumi.output_type
class KubernetesClusterDeploymentTargetAwsAccountAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetAwsAccountAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetAwsAccountAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetAwsAccountAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 use_instance_role: Optional[bool] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")


@pulumi.output_type
class KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetAzureServicePrincipalAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 cluster_resource_group: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> str:
        return pulumi.get(self, "cluster_resource_group")


@pulumi.output_type
class KubernetesClusterDeploymentTargetCertificateAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificate":
            suggest = "client_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetCertificateAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetCertificateAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetCertificateAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate: Optional[str] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")


@pulumi.output_type
class KubernetesClusterDeploymentTargetContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.KubernetesClusterDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.KubernetesClusterDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class KubernetesClusterDeploymentTargetGcpAccountAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetGcpAccountAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetGcpAccountAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetGcpAccountAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 project: str,
                 impersonate_service_account: Optional[bool] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project", project)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class KubernetesClusterDeploymentTargetPodAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenPath":
            suggest = "token_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterDeploymentTargetPodAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterDeploymentTargetPodAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterDeploymentTargetPodAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 token_path: str):
        pulumi.set(__self__, "token_path", token_path)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> str:
        return pulumi.get(self, "token_path")


@pulumi.output_type
class ListeningTentacleDeploymentTargetTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListeningTentacleDeploymentTargetTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListeningTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListeningTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class MachinePolicyMachineCleanupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteMachinesBehavior":
            suggest = "delete_machines_behavior"
        elif key == "deleteMachinesElapsedTimespan":
            suggest = "delete_machines_elapsed_timespan"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineCleanupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineCleanupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineCleanupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_machines_behavior: Optional[str] = None,
                 delete_machines_elapsed_timespan: Optional[int] = None):
        """
        :param int delete_machines_elapsed_timespan: In nanoseconds.
        """
        if delete_machines_behavior is not None:
            pulumi.set(__self__, "delete_machines_behavior", delete_machines_behavior)
        if delete_machines_elapsed_timespan is not None:
            pulumi.set(__self__, "delete_machines_elapsed_timespan", delete_machines_elapsed_timespan)

    @property
    @pulumi.getter(name="deleteMachinesBehavior")
    def delete_machines_behavior(self) -> Optional[str]:
        return pulumi.get(self, "delete_machines_behavior")

    @property
    @pulumi.getter(name="deleteMachinesElapsedTimespan")
    def delete_machines_elapsed_timespan(self) -> Optional[int]:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "delete_machines_elapsed_timespan")


@pulumi.output_type
class MachinePolicyMachineConnectivityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "machineConnectivityBehavior":
            suggest = "machine_connectivity_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineConnectivityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineConnectivityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineConnectivityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 machine_connectivity_behavior: Optional[str] = None):
        if machine_connectivity_behavior is not None:
            pulumi.set(__self__, "machine_connectivity_behavior", machine_connectivity_behavior)

    @property
    @pulumi.getter(name="machineConnectivityBehavior")
    def machine_connectivity_behavior(self) -> Optional[str]:
        return pulumi.get(self, "machine_connectivity_behavior")


@pulumi.output_type
class MachinePolicyMachineHealthCheckPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bashHealthCheckPolicy":
            suggest = "bash_health_check_policy"
        elif key == "powershellHealthCheckPolicy":
            suggest = "powershell_health_check_policy"
        elif key == "healthCheckCron":
            suggest = "health_check_cron"
        elif key == "healthCheckCronTimezone":
            suggest = "health_check_cron_timezone"
        elif key == "healthCheckInterval":
            suggest = "health_check_interval"
        elif key == "healthCheckType":
            suggest = "health_check_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineHealthCheckPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineHealthCheckPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineHealthCheckPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bash_health_check_policy: 'outputs.MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy',
                 powershell_health_check_policy: 'outputs.MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy',
                 health_check_cron: Optional[str] = None,
                 health_check_cron_timezone: Optional[str] = None,
                 health_check_interval: Optional[int] = None,
                 health_check_type: Optional[str] = None):
        """
        :param int health_check_interval: In nanoseconds.
        """
        pulumi.set(__self__, "bash_health_check_policy", bash_health_check_policy)
        pulumi.set(__self__, "powershell_health_check_policy", powershell_health_check_policy)
        if health_check_cron is not None:
            pulumi.set(__self__, "health_check_cron", health_check_cron)
        if health_check_cron_timezone is not None:
            pulumi.set(__self__, "health_check_cron_timezone", health_check_cron_timezone)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)

    @property
    @pulumi.getter(name="bashHealthCheckPolicy")
    def bash_health_check_policy(self) -> 'outputs.MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy':
        return pulumi.get(self, "bash_health_check_policy")

    @property
    @pulumi.getter(name="powershellHealthCheckPolicy")
    def powershell_health_check_policy(self) -> 'outputs.MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy':
        return pulumi.get(self, "powershell_health_check_policy")

    @property
    @pulumi.getter(name="healthCheckCron")
    def health_check_cron(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron")

    @property
    @pulumi.getter(name="healthCheckCronTimezone")
    def health_check_cron_timezone(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron_timezone")

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[int]:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "health_check_interval")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[str]:
        return pulumi.get(self, "health_check_type")


@pulumi.output_type
class MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runType":
            suggest = "run_type"
        elif key == "scriptBody":
            suggest = "script_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runType":
            suggest = "run_type"
        elif key == "scriptBody":
            suggest = "script_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class MachinePolicyMachineUpdatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "calamariUpdateBehavior":
            suggest = "calamari_update_behavior"
        elif key == "kubernetesAgentUpdateBehavior":
            suggest = "kubernetes_agent_update_behavior"
        elif key == "tentacleUpdateAccountId":
            suggest = "tentacle_update_account_id"
        elif key == "tentacleUpdateBehavior":
            suggest = "tentacle_update_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachinePolicyMachineUpdatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachinePolicyMachineUpdatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachinePolicyMachineUpdatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calamari_update_behavior: Optional[str] = None,
                 kubernetes_agent_update_behavior: Optional[str] = None,
                 tentacle_update_account_id: Optional[str] = None,
                 tentacle_update_behavior: Optional[str] = None):
        """
        :param str calamari_update_behavior: The behaviour of how Calamari is updated. Valid values are `UpdateAlways`, `UpdateOnDeployment` and `UpdateOnNewMachine`.
        :param str kubernetes_agent_update_behavior: The behaviour of how Kubernetes agent machines are updated. Valid values are `NeverUpdate` and `Update`.
        :param str tentacle_update_account_id: The Account ID to perform any Tentacle updates under.
        :param str tentacle_update_behavior: The behaviour of how Tentacle machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        if calamari_update_behavior is not None:
            pulumi.set(__self__, "calamari_update_behavior", calamari_update_behavior)
        if kubernetes_agent_update_behavior is not None:
            pulumi.set(__self__, "kubernetes_agent_update_behavior", kubernetes_agent_update_behavior)
        if tentacle_update_account_id is not None:
            pulumi.set(__self__, "tentacle_update_account_id", tentacle_update_account_id)
        if tentacle_update_behavior is not None:
            pulumi.set(__self__, "tentacle_update_behavior", tentacle_update_behavior)

    @property
    @pulumi.getter(name="calamariUpdateBehavior")
    def calamari_update_behavior(self) -> Optional[str]:
        """
        The behaviour of how Calamari is updated. Valid values are `UpdateAlways`, `UpdateOnDeployment` and `UpdateOnNewMachine`.
        """
        return pulumi.get(self, "calamari_update_behavior")

    @property
    @pulumi.getter(name="kubernetesAgentUpdateBehavior")
    def kubernetes_agent_update_behavior(self) -> Optional[str]:
        """
        The behaviour of how Kubernetes agent machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        return pulumi.get(self, "kubernetes_agent_update_behavior")

    @property
    @pulumi.getter(name="tentacleUpdateAccountId")
    def tentacle_update_account_id(self) -> Optional[str]:
        """
        The Account ID to perform any Tentacle updates under.
        """
        return pulumi.get(self, "tentacle_update_account_id")

    @property
    @pulumi.getter(name="tentacleUpdateBehavior")
    def tentacle_update_behavior(self) -> Optional[str]:
        """
        The behaviour of how Tentacle machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        return pulumi.get(self, "tentacle_update_behavior")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.OfflinePackageDropDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.OfflinePackageDropDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.PollingTentacleDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.PollingTentacleDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.PollingTentacleDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class PollingTentacleDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class PollingTentacleDeploymentTargetTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingTentacleDeploymentTargetTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingTentacleDeploymentTargetTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ProjectScheduledTriggerContinuousDailySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "runAfter":
            suggest = "run_after"
        elif key == "runUntil":
            suggest = "run_until"
        elif key == "hourInterval":
            suggest = "hour_interval"
        elif key == "minuteInterval":
            suggest = "minute_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectScheduledTriggerContinuousDailySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectScheduledTriggerContinuousDailySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectScheduledTriggerContinuousDailySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_weeks: Sequence[str],
                 interval: str,
                 run_after: str,
                 run_until: str,
                 hour_interval: Optional[int] = None,
                 minute_interval: Optional[int] = None):
        """
        :param Sequence[str] days_of_weeks: The days of the week to run the trigger.
        :param str interval: The interval in minutes to run the trigger.
        :param str run_after: The time of day to start the trigger.
        :param str run_until: The time of day to end the trigger.
        :param int hour_interval: How often to run the trigger in hours. Only used when the interval is set to 'OnceHourly'.
        :param int minute_interval: How often to run the trigger in minutes. Only used when the interval is set to 'OnceEveryMinute'.
        """
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "run_after", run_after)
        pulumi.set(__self__, "run_until", run_until)
        if hour_interval is not None:
            pulumi.set(__self__, "hour_interval", hour_interval)
        if minute_interval is not None:
            pulumi.set(__self__, "minute_interval", minute_interval)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence[str]:
        """
        The days of the week to run the trigger.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter
    def interval(self) -> str:
        """
        The interval in minutes to run the trigger.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="runAfter")
    def run_after(self) -> str:
        """
        The time of day to start the trigger.
        """
        return pulumi.get(self, "run_after")

    @property
    @pulumi.getter(name="runUntil")
    def run_until(self) -> str:
        """
        The time of day to end the trigger.
        """
        return pulumi.get(self, "run_until")

    @property
    @pulumi.getter(name="hourInterval")
    def hour_interval(self) -> Optional[int]:
        """
        How often to run the trigger in hours. Only used when the interval is set to 'OnceHourly'.
        """
        return pulumi.get(self, "hour_interval")

    @property
    @pulumi.getter(name="minuteInterval")
    def minute_interval(self) -> Optional[int]:
        """
        How often to run the trigger in minutes. Only used when the interval is set to 'OnceEveryMinute'.
        """
        return pulumi.get(self, "minute_interval")


@pulumi.output_type
class ProjectScheduledTriggerCronExpressionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronExpression":
            suggest = "cron_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectScheduledTriggerCronExpressionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectScheduledTriggerCronExpressionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectScheduledTriggerCronExpressionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cron_expression: str):
        """
        :param str cron_expression: The cron expression for the schedule.
        """
        pulumi.set(__self__, "cron_expression", cron_expression)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> str:
        """
        The cron expression for the schedule.
        """
        return pulumi.get(self, "cron_expression")


@pulumi.output_type
class ProjectScheduledTriggerDaysPerMonthSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monthlyScheduleType":
            suggest = "monthly_schedule_type"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "dateOfMonth":
            suggest = "date_of_month"
        elif key == "dayNumberOfMonth":
            suggest = "day_number_of_month"
        elif key == "dayOfWeek":
            suggest = "day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectScheduledTriggerDaysPerMonthSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectScheduledTriggerDaysPerMonthSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectScheduledTriggerDaysPerMonthSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monthly_schedule_type: str,
                 start_time: str,
                 date_of_month: Optional[str] = None,
                 day_number_of_month: Optional[str] = None,
                 day_of_week: Optional[str] = None):
        """
        :param str monthly_schedule_type: The type of monthly schedule to run the trigger
        :param str start_time: The time of day to start the trigger.
        :param str date_of_month: Which date of the month to run the trigger. String number between 1 - 31 Incl. or L for the last day of the month.
        :param str day_number_of_month: Which ordinal day of the week to run the trigger on. String number between 1 - 4 Incl. or L for the last occurrence of day*of*week for the month.
        :param str day_of_week: Which day of the week to run the trigger on. Required when monthly*schedule*type is set to 'DayOfMonth'.
        """
        pulumi.set(__self__, "monthly_schedule_type", monthly_schedule_type)
        pulumi.set(__self__, "start_time", start_time)
        if date_of_month is not None:
            pulumi.set(__self__, "date_of_month", date_of_month)
        if day_number_of_month is not None:
            pulumi.set(__self__, "day_number_of_month", day_number_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter(name="monthlyScheduleType")
    def monthly_schedule_type(self) -> str:
        """
        The type of monthly schedule to run the trigger
        """
        return pulumi.get(self, "monthly_schedule_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time of day to start the trigger.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="dateOfMonth")
    def date_of_month(self) -> Optional[str]:
        """
        Which date of the month to run the trigger. String number between 1 - 31 Incl. or L for the last day of the month.
        """
        return pulumi.get(self, "date_of_month")

    @property
    @pulumi.getter(name="dayNumberOfMonth")
    def day_number_of_month(self) -> Optional[str]:
        """
        Which ordinal day of the week to run the trigger on. String number between 1 - 4 Incl. or L for the last occurrence of day*of*week for the month.
        """
        return pulumi.get(self, "day_number_of_month")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        """
        Which day of the week to run the trigger on. Required when monthly*schedule*type is set to 'DayOfMonth'.
        """
        return pulumi.get(self, "day_of_week")


@pulumi.output_type
class ProjectScheduledTriggerDeployLatestReleaseAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationEnvironmentId":
            suggest = "destination_environment_id"
        elif key == "sourceEnvironmentId":
            suggest = "source_environment_id"
        elif key == "shouldRedeploy":
            suggest = "should_redeploy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectScheduledTriggerDeployLatestReleaseAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectScheduledTriggerDeployLatestReleaseAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectScheduledTriggerDeployLatestReleaseAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_environment_id: str,
                 source_environment_id: str,
                 should_redeploy: Optional[bool] = None):
        """
        :param str destination_environment_id: The environment ID to deploy the selected release to.
        :param str source_environment_id: The environment ID to use when selecting the release to deploy from.
        :param bool should_redeploy: Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        pulumi.set(__self__, "destination_environment_id", destination_environment_id)
        pulumi.set(__self__, "source_environment_id", source_environment_id)
        if should_redeploy is not None:
            pulumi.set(__self__, "should_redeploy", should_redeploy)

    @property
    @pulumi.getter(name="destinationEnvironmentId")
    def destination_environment_id(self) -> str:
        """
        The environment ID to deploy the selected release to.
        """
        return pulumi.get(self, "destination_environment_id")

    @property
    @pulumi.getter(name="sourceEnvironmentId")
    def source_environment_id(self) -> str:
        """
        The environment ID to use when selecting the release to deploy from.
        """
        return pulumi.get(self, "source_environment_id")

    @property
    @pulumi.getter(name="shouldRedeploy")
    def should_redeploy(self) -> Optional[bool]:
        """
        Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        return pulumi.get(self, "should_redeploy")


@pulumi.output_type
class ProjectScheduledTriggerDeployNewReleaseAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationEnvironmentId":
            suggest = "destination_environment_id"
        elif key == "gitReference":
            suggest = "git_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectScheduledTriggerDeployNewReleaseAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectScheduledTriggerDeployNewReleaseAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectScheduledTriggerDeployNewReleaseAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_environment_id: str,
                 git_reference: Optional[str] = None):
        """
        :param str destination_environment_id: The environment ID to deploy the selected release to.
        :param str git_reference: The git reference to use when creating the release. Can be a branch, tag, or commit hash.
        """
        pulumi.set(__self__, "destination_environment_id", destination_environment_id)
        if git_reference is not None:
            pulumi.set(__self__, "git_reference", git_reference)

    @property
    @pulumi.getter(name="destinationEnvironmentId")
    def destination_environment_id(self) -> str:
        """
        The environment ID to deploy the selected release to.
        """
        return pulumi.get(self, "destination_environment_id")

    @property
    @pulumi.getter(name="gitReference")
    def git_reference(self) -> Optional[str]:
        """
        The git reference to use when creating the release. Can be a branch, tag, or commit hash.
        """
        return pulumi.get(self, "git_reference")


@pulumi.output_type
class ProjectScheduledTriggerOnceDailySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectScheduledTriggerOnceDailySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectScheduledTriggerOnceDailySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectScheduledTriggerOnceDailySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_weeks: Sequence[str],
                 start_time: str):
        """
        :param Sequence[str] days_of_weeks: The days of the week to run the trigger.
        :param str start_time: The time of day to start the trigger.
        """
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence[str]:
        """
        The days of the week to run the trigger.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The time of day to start the trigger.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class ProjectScheduledTriggerRunRunbookAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runbookId":
            suggest = "runbook_id"
        elif key == "targetEnvironmentIds":
            suggest = "target_environment_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectScheduledTriggerRunRunbookAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectScheduledTriggerRunRunbookAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectScheduledTriggerRunRunbookAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 runbook_id: str,
                 target_environment_ids: Sequence[str]):
        """
        :param str runbook_id: The ID of the runbook to run.
        :param Sequence[str] target_environment_ids: The IDs of the environments to run the runbook in.
        """
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "target_environment_ids", target_environment_ids)

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> str:
        """
        The ID of the runbook to run.
        """
        return pulumi.get(self, "runbook_id")

    @property
    @pulumi.getter(name="targetEnvironmentIds")
    def target_environment_ids(self) -> Sequence[str]:
        """
        The IDs of the environments to run the runbook in.
        """
        return pulumi.get(self, "target_environment_ids")


@pulumi.output_type
class RunbookProcessStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyTerraformTemplateActions":
            suggest = "apply_terraform_template_actions"
        elif key == "conditionExpression":
            suggest = "condition_expression"
        elif key == "deployKubernetesSecretActions":
            suggest = "deploy_kubernetes_secret_actions"
        elif key == "deployPackageActions":
            suggest = "deploy_package_actions"
        elif key == "deployWindowsServiceActions":
            suggest = "deploy_windows_service_actions"
        elif key == "manualInterventionActions":
            suggest = "manual_intervention_actions"
        elif key == "packageRequirement":
            suggest = "package_requirement"
        elif key == "runKubectlScriptActions":
            suggest = "run_kubectl_script_actions"
        elif key == "runScriptActions":
            suggest = "run_script_actions"
        elif key == "startTrigger":
            suggest = "start_trigger"
        elif key == "targetRoles":
            suggest = "target_roles"
        elif key == "windowSize":
            suggest = "window_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 actions: Optional[Sequence['outputs.RunbookProcessStepAction']] = None,
                 apply_terraform_template_actions: Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateAction']] = None,
                 condition: Optional[str] = None,
                 condition_expression: Optional[str] = None,
                 deploy_kubernetes_secret_actions: Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretAction']] = None,
                 deploy_package_actions: Optional[Sequence['outputs.RunbookProcessStepDeployPackageAction']] = None,
                 deploy_windows_service_actions: Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceAction']] = None,
                 id: Optional[str] = None,
                 manual_intervention_actions: Optional[Sequence['outputs.RunbookProcessStepManualInterventionAction']] = None,
                 package_requirement: Optional[str] = None,
                 properties: Optional[Mapping[str, Any]] = None,
                 run_kubectl_script_actions: Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptAction']] = None,
                 run_script_actions: Optional[Sequence['outputs.RunbookProcessStepRunScriptAction']] = None,
                 start_trigger: Optional[str] = None,
                 target_roles: Optional[Sequence[str]] = None,
                 window_size: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param Sequence['RunbookProcessStepApplyTerraformTemplateActionArgs'] apply_terraform_template_actions: (see below for nested schema)
        :param str condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param str condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param str id: The unique ID for this resource.
        :param str package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param str start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param Sequence[str] target_roles: The roles that this step run against, or runs on behalf of
        :param str window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.RunbookProcessStepAction']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateAction']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "apply_terraform_template_actions")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[str]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretAction']]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployPackageAction']]:
        return pulumi.get(self, "deploy_package_actions")

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceAction']]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepManualInterventionAction']]:
        return pulumi.get(self, "manual_intervention_actions")

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[str]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptAction']]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[Sequence['outputs.RunbookProcessStepRunScriptAction']]:
        return pulumi.get(self, "run_script_actions")

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[str]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[Sequence[str]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[str]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")


@pulumi.output_type
class RunbookProcessStepAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: str,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str action_type: The type of action
        :param str name: The name of this resource.
        :param 'RunbookProcessStepActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepActionPackageArgs'] packages: The package assocated with this action.
        :param 'RunbookProcessStepActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        The type of action
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class RunbookProcessStepActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str name: The name of this resource.
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param bool extract_during_deployment: Whether to extract the package during deployment
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedOptions":
            suggest = "advanced_options"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "awsAccount":
            suggest = "aws_account"
        elif key == "azureAccount":
            suggest = "azure_account"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "googleCloudAccount":
            suggest = "google_cloud_account"
        elif key == "inlineTemplate":
            suggest = "inline_template"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "templateParameters":
            suggest = "template_parameters"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced_options: 'outputs.RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions',
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionActionTemplate'] = None,
                 aws_account: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccount'] = None,
                 azure_account: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAzureAccount'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionGitDependency'] = None,
                 google_cloud_account: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount'] = None,
                 id: Optional[str] = None,
                 inline_template: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 template: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionTemplate'] = None,
                 template_parameters: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param 'RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param 'RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs' aws_account: (see below for nested schema)
        :param 'RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs' azure_account: (see below for nested schema)
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepApplyTerraformTemplateActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepApplyTerraformTemplateActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param 'RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs' google_cloud_account: (see below for nested schema)
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepApplyTerraformTemplateActionPackageArgs'] packages: The package assocated with this action.
        :param 'RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str slug: The human-readable unique identifier for this resource.
        :param 'RunbookProcessStepApplyTerraformTemplateActionTemplateArgs' template: (see below for nested schema)
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> 'outputs.RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions':
        return pulumi.get(self, "advanced_options")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccount']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "aws_account")

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAzureAccount']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "azure_account")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "google_cloud_account")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[str]:
        return pulumi.get(self, "inline_template")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepApplyTerraformTemplateActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter
    def template(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionTemplate']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[str]:
        return pulumi.get(self, "template_parameters")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAdditionalPluginDownloads":
            suggest = "allow_additional_plugin_downloads"
        elif key == "applyParameters":
            suggest = "apply_parameters"
        elif key == "initParameters":
            suggest = "init_parameters"
        elif key == "pluginCacheDirectory":
            suggest = "plugin_cache_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAdvancedOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[bool] = None,
                 apply_parameters: Optional[str] = None,
                 init_parameters: Optional[str] = None,
                 plugin_cache_directory: Optional[str] = None,
                 workspace: Optional[str] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[bool]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[str]:
        return pulumi.get(self, "apply_parameters")

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[str]:
        return pulumi.get(self, "init_parameters")

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[str]:
        return pulumi.get(self, "plugin_cache_directory")

    @property
    @pulumi.getter
    def workspace(self) -> Optional[str]:
        return pulumi.get(self, "workspace")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useInstanceRole":
            suggest = "use_instance_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionAwsAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: Optional[str] = None,
                 role: Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole'] = None,
                 use_instance_role: Optional[bool] = None,
                 variable: Optional[str] = None):
        """
        :param 'RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs' role: (see below for nested schema)
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional['outputs.RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole']:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "roleSessionName":
            suggest = "role_session_name"
        elif key == "sessionDuration":
            suggest = "session_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionAwsAccountRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 external_id: Optional[str] = None,
                 role_session_name: Optional[str] = None,
                 session_duration: Optional[int] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[str]:
        return pulumi.get(self, "role_session_name")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionAzureAccount(dict):
    def __init__(__self__, *,
                 variable: Optional[str] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 variable: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param bool impersonate_service_account: Impersonate service accounts
        :param str project: This sets GOOGLE_PROJECT environment variable
        :param str region: This sets GOOGLE_REGION environment variable
        :param str service_account_emails: This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        :param bool use_vm_service_account: When running in a Compute Engine virtual machine, use the associated VM service account
        :param str zone: This sets GOOGLE_ZONE environment variable
        """
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        """
        Impersonate service accounts
        """
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        This sets GOOGLE_PROJECT environment variable
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        This sets GOOGLE_REGION environment variable
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        """
        This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        """
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        """
        When running in a Compute Engine virtual machine, use the associated VM service account
        """
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        This sets GOOGLE_ZONE environment variable
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepApplyTerraformTemplateActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVariableFiles":
            suggest = "additional_variable_files"
        elif key == "runAutomaticFileSubstitution":
            suggest = "run_automatic_file_substitution"
        elif key == "targetFiles":
            suggest = "target_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepApplyTerraformTemplateActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepApplyTerraformTemplateActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_variable_files: Optional[str] = None,
                 directory: Optional[str] = None,
                 run_automatic_file_substitution: Optional[bool] = None,
                 target_files: Optional[str] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[str]:
        return pulumi.get(self, "additional_variable_files")

    @property
    @pulumi.getter
    def directory(self) -> Optional[str]:
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[str]:
        return pulumi.get(self, "target_files")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"
        elif key == "secretValues":
            suggest = "secret_values"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "kubernetesObjectStatusCheckEnabled":
            suggest = "kubernetes_object_status_check_enabled"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 secret_name: str,
                 secret_values: Mapping[str, str],
                 action_template: Optional['outputs.RunbookProcessStepDeployKubernetesSecretActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepDeployKubernetesSecretActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 kubernetes_object_status_check_enabled: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param str secret_name: The name of the secret resource
        :param 'RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepDeployKubernetesSecretActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepDeployKubernetesSecretActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param bool kubernetes_object_status_check_enabled: Indicates the status of the Kubernetes Object Status feature
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepDeployKubernetesSecretActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if kubernetes_object_status_check_enabled is not None:
            pulumi.set(__self__, "kubernetes_object_status_check_enabled", kubernetes_object_status_check_enabled)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        The name of the secret resource
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "secret_values")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepDeployKubernetesSecretActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepDeployKubernetesSecretActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter(name="kubernetesObjectStatusCheckEnabled")
    def kubernetes_object_status_check_enabled(self) -> Optional[bool]:
        """
        Indicates the status of the Kubernetes Object Status feature
        """
        return pulumi.get(self, "kubernetes_object_status_check_enabled")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployKubernetesSecretActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepDeployKubernetesSecretActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployKubernetesSecretActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployKubernetesSecretActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployPackageAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryPackage":
            suggest = "primary_package"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "windowsService":
            suggest = "windows_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 primary_package: 'outputs.RunbookProcessStepDeployPackageActionPrimaryPackage',
                 action_template: Optional['outputs.RunbookProcessStepDeployPackageActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepDeployPackageActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 windows_service: Optional['outputs.RunbookProcessStepDeployPackageActionWindowsService'] = None):
        """
        :param str name: The name of this resource.
        :param 'RunbookProcessStepDeployPackageActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param 'RunbookProcessStepDeployPackageActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepDeployPackageActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepDeployPackageActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepDeployPackageActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param 'RunbookProcessStepDeployPackageActionWindowsServiceArgs' windows_service: Deploy a windows service feature
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.RunbookProcessStepDeployPackageActionPrimaryPackage':
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepDeployPackageActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepDeployPackageActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployPackageActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional['outputs.RunbookProcessStepDeployPackageActionWindowsService']:
        """
        Deploy a windows service feature
        """
        return pulumi.get(self, "windows_service")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployPackageActionWindowsService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "startMode":
            suggest = "start_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployPackageActionWindowsService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployPackageActionWindowsService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 service_name: str,
                 arguments: Optional[str] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 service_account: Optional[str] = None,
                 start_mode: Optional[str] = None):
        """
        :param str executable_path: The path to the executable relative to the package installation directory
        :param str service_name: The name of the service
        :param str arguments: The command line arguments that will be passed to the service when it starts
        :param str custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param str custom_account_password: The password for the custom account
        :param str dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param str description: User-friendly description of the service (optional)
        :param str display_name: The display name of the service (optional)
        :param str service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param str start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executablePath":
            suggest = "executable_path"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "createOrUpdateService":
            suggest = "create_or_update_service"
        elif key == "customAccountName":
            suggest = "custom_account_name"
        elif key == "customAccountPassword":
            suggest = "custom_account_password"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "serviceAccount":
            suggest = "service_account"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "startMode":
            suggest = "start_mode"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 executable_path: str,
                 name: str,
                 primary_package: 'outputs.RunbookProcessStepDeployWindowsServiceActionPrimaryPackage',
                 service_name: str,
                 action_template: Optional['outputs.RunbookProcessStepDeployWindowsServiceActionActionTemplate'] = None,
                 arguments: Optional[str] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionContainer']] = None,
                 create_or_update_service: Optional[bool] = None,
                 custom_account_name: Optional[str] = None,
                 custom_account_password: Optional[str] = None,
                 dependencies: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepDeployWindowsServiceActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 service_account: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 start_mode: Optional[str] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str executable_path: The path to the executable relative to the package installation directory
        :param str name: The name of this resource.
        :param 'RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param str service_name: The name of the service
        :param 'RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param str arguments: The command line arguments that will be passed to the service when it starts
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepDeployWindowsServiceActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param str custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param str custom_account_password: The password for the custom account
        :param str dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param str description: User-friendly description of the service (optional)
        :param str display_name: The display name of the service (optional)
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepDeployWindowsServiceActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepDeployWindowsServiceActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param str service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param str slug: The human-readable unique identifier for this resource.
        :param str start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> str:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> 'outputs.RunbookProcessStepDeployWindowsServiceActionPrimaryPackage':
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepDeployWindowsServiceActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter
    def arguments(self) -> Optional[str]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[bool]:
        return pulumi.get(self, "create_or_update_service")

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[str]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[str]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[str]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepDeployWindowsServiceActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepDeployWindowsServiceActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[str]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepDeployWindowsServiceActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepDeployWindowsServiceActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepDeployWindowsServiceActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepManualInterventionAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "responsibleTeams":
            suggest = "responsible_teams"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instructions: str,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepManualInterventionActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepManualInterventionActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionPackage']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 responsible_teams: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param str instructions: The instructions for the user to follow
        :param str name: The name of this resource.
        :param 'RunbookProcessStepManualInterventionActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepManualInterventionActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepManualInterventionActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepManualInterventionActionPackageArgs'] packages: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param str responsible_teams: The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> str:
        """
        The instructions for the user to follow
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepManualInterventionActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepManualInterventionActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepManualInterventionActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[str]:
        """
        The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        """
        return pulumi.get(self, "responsible_teams")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class RunbookProcessStepManualInterventionActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepManualInterventionActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepManualInterventionActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepManualInterventionActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepManualInterventionActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepManualInterventionActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptBody":
            suggest = "script_body"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "scriptSyntax":
            suggest = "script_syntax"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "variableSubstitutionInFiles":
            suggest = "variable_substitution_in_files"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepRunKubectlScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepRunKubectlScriptActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepRunKubectlScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_body: Optional[str] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 script_syntax: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 variable_substitution_in_files: Optional[str] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param 'RunbookProcessStepRunKubectlScriptActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepRunKubectlScriptActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepRunKubectlScriptActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepRunKubectlScriptActionPackageArgs'] packages: The package assocated with this action.
        :param 'RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str script_file_name: The script file name in the package
        :param str script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepRunKubectlScriptActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepRunKubectlScriptActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepRunKubectlScriptActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepRunKubectlScriptActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[str]:
        return pulumi.get(self, "script_syntax")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[str]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str name: The name of this resource.
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param bool extract_during_deployment: Whether to extract the package during deployment
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunKubectlScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunKubectlScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunKubectlScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunScriptAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTemplate":
            suggest = "action_template"
        elif key == "canBeUsedForProjectVersioning":
            suggest = "can_be_used_for_project_versioning"
        elif key == "excludedEnvironments":
            suggest = "excluded_environments"
        elif key == "gitDependency":
            suggest = "git_dependency"
        elif key == "isDisabled":
            suggest = "is_disabled"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "primaryPackage":
            suggest = "primary_package"
        elif key == "runOnServer":
            suggest = "run_on_server"
        elif key == "scriptBody":
            suggest = "script_body"
        elif key == "scriptFileName":
            suggest = "script_file_name"
        elif key == "scriptParameters":
            suggest = "script_parameters"
        elif key == "scriptSource":
            suggest = "script_source"
        elif key == "scriptSyntax":
            suggest = "script_syntax"
        elif key == "sortOrder":
            suggest = "sort_order"
        elif key == "tenantTags":
            suggest = "tenant_tags"
        elif key == "variableSubstitutionInFiles":
            suggest = "variable_substitution_in_files"
        elif key == "workerPoolId":
            suggest = "worker_pool_id"
        elif key == "workerPoolVariable":
            suggest = "worker_pool_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action_template: Optional['outputs.RunbookProcessStepRunScriptActionActionTemplate'] = None,
                 can_be_used_for_project_versioning: Optional[bool] = None,
                 channels: Optional[Sequence[str]] = None,
                 condition: Optional[str] = None,
                 containers: Optional[Sequence['outputs.RunbookProcessStepRunScriptActionContainer']] = None,
                 environments: Optional[Sequence[str]] = None,
                 excluded_environments: Optional[Sequence[str]] = None,
                 features: Optional[Sequence[str]] = None,
                 git_dependency: Optional['outputs.RunbookProcessStepRunScriptActionGitDependency'] = None,
                 id: Optional[str] = None,
                 is_disabled: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 notes: Optional[str] = None,
                 packages: Optional[Sequence['outputs.RunbookProcessStepRunScriptActionPackage']] = None,
                 primary_package: Optional['outputs.RunbookProcessStepRunScriptActionPrimaryPackage'] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 run_on_server: Optional[bool] = None,
                 script_body: Optional[str] = None,
                 script_file_name: Optional[str] = None,
                 script_parameters: Optional[str] = None,
                 script_source: Optional[str] = None,
                 script_syntax: Optional[str] = None,
                 slug: Optional[str] = None,
                 sort_order: Optional[int] = None,
                 tenant_tags: Optional[Sequence[str]] = None,
                 variable_substitution_in_files: Optional[str] = None,
                 worker_pool_id: Optional[str] = None,
                 worker_pool_variable: Optional[str] = None):
        """
        :param str name: The name of this resource.
        :param 'RunbookProcessStepRunScriptActionActionTemplateArgs' action_template: Represents the template that is associated with this action.
        :param Sequence[str] channels: The channels associated with this deployment action.
        :param str condition: The condition associated with this deployment action.
        :param Sequence['RunbookProcessStepRunScriptActionContainerArgs'] containers: The deployment action container associated with this deployment action.
        :param Sequence[str] environments: The environments within which this deployment action will run.
        :param Sequence[str] excluded_environments: The environments that this step will be skipped in
        :param Sequence[str] features: A list of enabled features for this action.
        :param 'RunbookProcessStepRunScriptActionGitDependencyArgs' git_dependency: Configuration for resource sourcing from a git repository.
        :param str id: The ID of this resource.
        :param bool is_disabled: Indicates the disabled status of this deployment action.
        :param bool is_required: Indicates the required status of this deployment action.
        :param str notes: The notes associated with this deployment action.
        :param Sequence['RunbookProcessStepRunScriptActionPackageArgs'] packages: The package assocated with this action.
        :param 'RunbookProcessStepRunScriptActionPrimaryPackageArgs' primary_package: The package assocated with this action.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        :param bool run_on_server: Whether this step runs on a worker or on the target
        :param str script_file_name: The script file name in the package
        :param str script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param str slug: The human-readable unique identifier for this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param str worker_pool_id: The worker pool associated with this deployment action.
        :param str worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional['outputs.RunbookProcessStepRunScriptActionActionTemplate']:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.RunbookProcessStepRunScriptActionContainer']]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[Sequence[str]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @property
    @pulumi.getter
    def features(self) -> Optional[Sequence[str]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional['outputs.RunbookProcessStepRunScriptActionGitDependency']:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence['outputs.RunbookProcessStepRunScriptActionPackage']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional['outputs.RunbookProcessStepRunScriptActionPrimaryPackage']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
        pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")

        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[bool]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[str]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[str]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[str]:
        return pulumi.get(self, "script_source")

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[str]:
        return pulumi.get(self, "script_syntax")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[int]:
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[str]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[str]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[str]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")


@pulumi.output_type
class RunbookProcessStepRunScriptActionActionTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityActionTemplateId":
            suggest = "community_action_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionActionTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionActionTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 community_action_template_id: Optional[str] = None,
                 version: Optional[int] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[str]:
        return pulumi.get(self, "community_action_template_id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class RunbookProcessStepRunScriptActionContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class RunbookProcessStepRunScriptActionGitDependency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"
        elif key == "gitCredentialType":
            suggest = "git_credential_type"
        elif key == "repositoryUri":
            suggest = "repository_uri"
        elif key == "filePathFilters":
            suggest = "file_path_filters"
        elif key == "gitCredentialId":
            suggest = "git_credential_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionGitDependency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionGitDependency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionGitDependency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: str,
                 git_credential_type: str,
                 repository_uri: str,
                 file_path_filters: Optional[Sequence[str]] = None,
                 git_credential_id: Optional[str] = None):
        """
        :param str default_branch: Name of the default branch of the repository.
        :param str git_credential_type: The Git credential authentication type.
        :param str repository_uri: The Git URI for the repository where this resource is sourced from.
        :param Sequence[str] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param str git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> str:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> str:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[Sequence[str]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[str]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")


@pulumi.output_type
class RunbookProcessStepRunScriptActionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "extractDuringDeployment":
            suggest = "extract_during_deployment"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 extract_during_deployment: Optional[bool] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str name: The name of this resource.
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param bool extract_during_deployment: Whether to extract the package during deployment
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[bool]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class RunbookProcessStepRunScriptActionPrimaryPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageId":
            suggest = "package_id"
        elif key == "acquisitionLocation":
            suggest = "acquisition_location"
        elif key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RunbookProcessStepRunScriptActionPrimaryPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RunbookProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RunbookProcessStepRunScriptActionPrimaryPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_id: str,
                 acquisition_location: Optional[str] = None,
                 feed_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None):
        """
        :param str package_id: The ID of the package.
        :param str acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param str feed_id: The feed ID associated with this package reference.
        :param str id: The ID of this resource.
        :param str name: The name of this resource.
        :param Mapping[str, str] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[str]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationStyle":
            suggest = "communication_style"
        elif key == "aadClientCredentialSecret":
            suggest = "aad_client_credential_secret"
        elif key == "aadCredentialType":
            suggest = "aad_credential_type"
        elif key == "aadUserCredentialUsername":
            suggest = "aad_user_credential_username"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "applicationsDirectory":
            suggest = "applications_directory"
        elif key == "certificateSignatureAlgorithm":
            suggest = "certificate_signature_algorithm"
        elif key == "certificateStoreLocation":
            suggest = "certificate_store_location"
        elif key == "certificateStoreName":
            suggest = "certificate_store_name"
        elif key == "clientCertificateVariable":
            suggest = "client_certificate_variable"
        elif key == "cloudServiceName":
            suggest = "cloud_service_name"
        elif key == "clusterCertificate":
            suggest = "cluster_certificate"
        elif key == "clusterCertificatePath":
            suggest = "cluster_certificate_path"
        elif key == "clusterUrl":
            suggest = "cluster_url"
        elif key == "connectionEndpoint":
            suggest = "connection_endpoint"
        elif key == "containerOptions":
            suggest = "container_options"
        elif key == "defaultWorkerPoolId":
            suggest = "default_worker_pool_id"
        elif key == "dotNetCorePlatform":
            suggest = "dot_net_core_platform"
        elif key == "proxyId":
            suggest = "proxy_id"
        elif key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "runningInContainer":
            suggest = "running_in_container"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "serverCertificateThumbprint":
            suggest = "server_certificate_thumbprint"
        elif key == "skipTlsVerification":
            suggest = "skip_tls_verification"
        elif key == "storageAccountName":
            suggest = "storage_account_name"
        elif key == "swapIfPossible":
            suggest = "swap_if_possible"
        elif key == "tentacleVersionDetails":
            suggest = "tentacle_version_details"
        elif key == "useCurrentInstanceCount":
            suggest = "use_current_instance_count"
        elif key == "webAppName":
            suggest = "web_app_name"
        elif key == "webAppSlotName":
            suggest = "web_app_slot_name"
        elif key == "workingDirectory":
            suggest = "working_directory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_style: str,
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 authentication: Optional['outputs.SshConnectionDeploymentTargetEndpointAuthentication'] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 containers: Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointContainer']] = None,
                 default_worker_pool_id: Optional[str] = None,
                 destinations: Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointDestination']] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 tentacle_version_details: Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointTentacleVersionDetail']] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.SshConnectionDeploymentTargetEndpointAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[Sequence['outputs.SshConnectionDeploymentTargetEndpointTentacleVersionDetail']]:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "adminLogin":
            suggest = "admin_login"
        elif key == "assumeRole":
            suggest = "assume_role"
        elif key == "assumeRoleExternalId":
            suggest = "assume_role_external_id"
        elif key == "assumeRoleSessionDuration":
            suggest = "assume_role_session_duration"
        elif key == "assumedRoleArn":
            suggest = "assumed_role_arn"
        elif key == "assumedRoleSession":
            suggest = "assumed_role_session"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterResourceGroup":
            suggest = "cluster_resource_group"
        elif key == "impersonateServiceAccount":
            suggest = "impersonate_service_account"
        elif key == "serviceAccountEmails":
            suggest = "service_account_emails"
        elif key == "tokenPath":
            suggest = "token_path"
        elif key == "useInstanceRole":
            suggest = "use_instance_role"
        elif key == "useVmServiceAccount":
            suggest = "use_vm_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "feedId":
            suggest = "feed_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "dropFolderPath":
            suggest = "drop_folder_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class SshConnectionDeploymentTargetEndpointTentacleVersionDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upgradeLocked":
            suggest = "upgrade_locked"
        elif key == "upgradeRequired":
            suggest = "upgrade_required"
        elif key == "upgradeSuggested":
            suggest = "upgrade_suggested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SshConnectionDeploymentTargetEndpointTentacleVersionDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SshConnectionDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SshConnectionDeploymentTargetEndpointTentacleVersionDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upgrade_locked: Optional[bool] = None,
                 upgrade_required: Optional[bool] = None,
                 upgrade_suggested: Optional[bool] = None,
                 version: Optional[str] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[bool]:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class TeamExternalSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayIdAndName":
            suggest = "display_id_and_name"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamExternalSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamExternalSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamExternalSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_id_and_name: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        if display_id_and_name is not None:
            pulumi.set(__self__, "display_id_and_name", display_id_and_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayIdAndName")
    def display_id_and_name(self) -> Optional[bool]:
        return pulumi.get(self, "display_id_and_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class TeamUserRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spaceId":
            suggest = "space_id"
        elif key == "userRoleId":
            suggest = "user_role_id"
        elif key == "environmentIds":
            suggest = "environment_ids"
        elif key == "projectGroupIds":
            suggest = "project_group_ids"
        elif key == "projectIds":
            suggest = "project_ids"
        elif key == "teamId":
            suggest = "team_id"
        elif key == "tenantIds":
            suggest = "tenant_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TeamUserRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TeamUserRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TeamUserRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 space_id: str,
                 user_role_id: str,
                 environment_ids: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 project_group_ids: Optional[Sequence[str]] = None,
                 project_ids: Optional[Sequence[str]] = None,
                 team_id: Optional[str] = None,
                 tenant_ids: Optional[Sequence[str]] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "user_role_id", user_role_id)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project_group_ids is not None:
            pulumi.set(__self__, "project_group_ids", project_group_ids)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="userRoleId")
    def user_role_id(self) -> str:
        return pulumi.get(self, "user_role_id")

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectGroupIds")
    def project_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "project_group_ids")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[str]:
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenant_ids")


@pulumi.output_type
class UserIdentity(dict):
    def __init__(__self__, *,
                 claims: Optional[Sequence['outputs.UserIdentityClaim']] = None,
                 provider: Optional[str] = None):
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def claims(self) -> Optional[Sequence['outputs.UserIdentityClaim']]:
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")


@pulumi.output_type
class UserIdentityClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isIdentifyingClaim":
            suggest = "is_identifying_claim"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_identifying_claim: bool,
                 name: str,
                 value: str):
        """
        :param str name: The name of this resource.
        """
        pulumi.set(__self__, "is_identifying_claim", is_identifying_claim)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isIdentifyingClaim")
    def is_identifying_claim(self) -> bool:
        return pulumi.get(self, "is_identifying_claim")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 access_key: str,
                 account_type: str,
                 active_directory_endpoint_base_uri: str,
                 application_id: str,
                 authentication_endpoint: str,
                 azure_environment: str,
                 certificate_data: str,
                 certificate_thumbprint: str,
                 client_secret: str,
                 description: str,
                 environments: Sequence[str],
                 id: str,
                 name: str,
                 password: str,
                 private_key_file: str,
                 private_key_passphrase: str,
                 resource_manager_endpoint: str,
                 secret_key: str,
                 service_management_endpoint_base_uri: str,
                 service_management_endpoint_suffix: str,
                 space_id: str,
                 subscription_id: str,
                 tenant_id: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 token: str,
                 username: str):
        """
        :param str access_key: The access key associated with this resource.
        :param str account_type: Specifies the type of the account. Valid account types are `AmazonWebServicesAccount`, `AmazonWebServicesRoleAccount`, `AzureServicePrincipal`, `AzureOIDC`, `AzureSubscription`, `AmazonWebServicesOidcAccount`, `None`, `SshKeyPair`, `Token`, or `UsernamePassword`.
        :param str application_id: The application ID of this resource.
        :param str authentication_endpoint: The authentication endpoint URI for this resource.
        :param str azure_environment: The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        :param str description: The description of this account resource.
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str password: The password associated with this resource.
        :param str resource_manager_endpoint: The resource manager endpoint URI for this resource.
        :param str secret_key: The secret key associated with this resource.
        :param str space_id: The space ID associated with this resource.
        :param str subscription_id: The subscription ID of this resource.
        :param str tenant_id: The tenant ID of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str token: The token of this resource.
        :param str username: The username associated with this resource.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "active_directory_endpoint_base_uri", active_directory_endpoint_base_uri)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "authentication_endpoint", authentication_endpoint)
        pulumi.set(__self__, "azure_environment", azure_environment)
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "certificate_thumbprint", certificate_thumbprint)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "private_key_file", private_key_file)
        pulumi.set(__self__, "private_key_passphrase", private_key_passphrase)
        pulumi.set(__self__, "resource_manager_endpoint", resource_manager_endpoint)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "service_management_endpoint_base_uri", service_management_endpoint_base_uri)
        pulumi.set(__self__, "service_management_endpoint_suffix", service_management_endpoint_suffix)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        """
        The access key associated with this resource.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> str:
        """
        Specifies the type of the account. Valid account types are `AmazonWebServicesAccount`, `AmazonWebServicesRoleAccount`, `AzureServicePrincipal`, `AzureOIDC`, `AzureSubscription`, `AmazonWebServicesOidcAccount`, `None`, `SshKeyPair`, `Token`, or `UsernamePassword`.
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="activeDirectoryEndpointBaseUri")
    def active_directory_endpoint_base_uri(self) -> str:
        return pulumi.get(self, "active_directory_endpoint_base_uri")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        The application ID of this resource.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="authenticationEndpoint")
    def authentication_endpoint(self) -> str:
        """
        The authentication endpoint URI for this resource.
        """
        return pulumi.get(self, "authentication_endpoint")

    @property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> str:
        """
        The Azure environment associated with this resource. Valid Azure environments are `AzureCloud`, `AzureChinaCloud`, `AzureGermanCloud`, or `AzureUSGovernment`.
        """
        return pulumi.get(self, "azure_environment")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> str:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateThumbprint")
    def certificate_thumbprint(self) -> str:
        return pulumi.get(self, "certificate_thumbprint")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this account resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> str:
        return pulumi.get(self, "private_key_file")

    @property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> str:
        return pulumi.get(self, "private_key_passphrase")

    @property
    @pulumi.getter(name="resourceManagerEndpoint")
    def resource_manager_endpoint(self) -> str:
        """
        The resource manager endpoint URI for this resource.
        """
        return pulumi.get(self, "resource_manager_endpoint")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The secret key associated with this resource.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="serviceManagementEndpointBaseUri")
    def service_management_endpoint_base_uri(self) -> str:
        return pulumi.get(self, "service_management_endpoint_base_uri")

    @property
    @pulumi.getter(name="serviceManagementEndpointSuffix")
    def service_management_endpoint_suffix(self) -> str:
        return pulumi.get(self, "service_management_endpoint_suffix")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        The subscription ID of this resource.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of this resource.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The token of this resource.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cloud_service_name: str,
                 default_worker_pool_id: str,
                 endpoints: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 slot: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 storage_account_name: str,
                 swap_if_possible: bool,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 use_current_instance_count: bool):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "slot", slot)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> str:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter
    def slot(self) -> str:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> str:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> bool:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> bool:
        return pulumi.get(self, "use_current_instance_count")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetAzureCloudServiceDeploymentTargetsAzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 aad_client_credential_secret: str,
                 aad_credential_type: str,
                 aad_user_credential_password: str,
                 aad_user_credential_username: str,
                 certificate_store_location: str,
                 certificate_store_name: str,
                 client_certificate_variable: str,
                 connection_endpoint: str,
                 endpoints: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 security_mode: str,
                 server_certificate_thumbprint: str,
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        pulumi.set(__self__, "aad_user_credential_password", aad_user_credential_password)
        pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "security_mode", security_mode)
        pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> str:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> str:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialPassword")
    def aad_user_credential_password(self) -> str:
        return pulumi.get(self, "aad_user_credential_password")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> str:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> str:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> str:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> str:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> str:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> str:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> str:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetAzureServiceFabricClusterDeploymentTargetsAzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 endpoints: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 resource_group_name: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 web_app_name: str,
                 web_app_slot_name: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "web_app_name", web_app_name)
        pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> str:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> str:
        return pulumi.get(self, "web_app_slot_name")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetAzureWebAppDeploymentTargetsAzureWebAppDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 archived: str,
                 certificate_data: str,
                 certificate_data_format: str,
                 environments: Sequence[str],
                 has_private_key: bool,
                 id: str,
                 is_expired: bool,
                 issuer_common_name: str,
                 issuer_distinguished_name: str,
                 issuer_organization: str,
                 name: str,
                 not_after: str,
                 not_before: str,
                 notes: str,
                 password: str,
                 replaced_by: str,
                 self_signed: bool,
                 serial_number: str,
                 signature_algorithm_name: str,
                 space_id: str,
                 subject_alternative_names: Sequence[str],
                 subject_common_name: str,
                 subject_distinguished_name: str,
                 subject_organization: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 version: int):
        """
        :param str certificate_data: The encoded data of the certificate.
        :param str certificate_data_format: Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param bool has_private_key: Indicates if the certificate has a private key.
        :param str id: The unique ID for this resource.
        :param bool is_expired: Indicates if the certificate has expired.
        :param str name: The name of this resource.
        :param str password: The password associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "archived", archived)
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "certificate_data_format", certificate_data_format)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_private_key", has_private_key)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_expired", is_expired)
        pulumi.set(__self__, "issuer_common_name", issuer_common_name)
        pulumi.set(__self__, "issuer_distinguished_name", issuer_distinguished_name)
        pulumi.set(__self__, "issuer_organization", issuer_organization)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "not_before", not_before)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "replaced_by", replaced_by)
        pulumi.set(__self__, "self_signed", self_signed)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm_name", signature_algorithm_name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        pulumi.set(__self__, "subject_common_name", subject_common_name)
        pulumi.set(__self__, "subject_distinguished_name", subject_distinguished_name)
        pulumi.set(__self__, "subject_organization", subject_organization)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def archived(self) -> str:
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> str:
        """
        The encoded data of the certificate.
        """
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateDataFormat")
    def certificate_data_format(self) -> str:
        """
        Specifies the archive file format used for storing cryptography objects in the certificate. Valid formats are `Der`, `Pem`, `Pkcs12`, or `Unknown`.
        """
        return pulumi.get(self, "certificate_data_format")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasPrivateKey")
    def has_private_key(self) -> bool:
        """
        Indicates if the certificate has a private key.
        """
        return pulumi.get(self, "has_private_key")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExpired")
    def is_expired(self) -> bool:
        """
        Indicates if the certificate has expired.
        """
        return pulumi.get(self, "is_expired")

    @property
    @pulumi.getter(name="issuerCommonName")
    def issuer_common_name(self) -> str:
        return pulumi.get(self, "issuer_common_name")

    @property
    @pulumi.getter(name="issuerDistinguishedName")
    def issuer_distinguished_name(self) -> str:
        return pulumi.get(self, "issuer_distinguished_name")

    @property
    @pulumi.getter(name="issuerOrganization")
    def issuer_organization(self) -> str:
        return pulumi.get(self, "issuer_organization")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> str:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> str:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter
    def notes(self) -> str:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="replacedBy")
    def replaced_by(self) -> str:
        return pulumi.get(self, "replaced_by")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> bool:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="signatureAlgorithmName")
    def signature_algorithm_name(self) -> str:
        return pulumi.get(self, "signature_algorithm_name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Sequence[str]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCommonName")
    def subject_common_name(self) -> str:
        return pulumi.get(self, "subject_common_name")

    @property
    @pulumi.getter(name="subjectDistinguishedName")
    def subject_distinguished_name(self) -> str:
        return pulumi.get(self, "subject_distinguished_name")

    @property
    @pulumi.getter(name="subjectOrganization")
    def subject_organization(self) -> str:
        return pulumi.get(self, "subject_organization")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetChannelsChannelResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 is_default: bool,
                 lifecycle_id: str,
                 name: str,
                 project_id: str,
                 rules: Sequence['outputs.GetChannelsChannelRuleResult'],
                 space_id: str,
                 tenant_tags: Sequence[str]):
        """
        :param str description: The description of this channel.
        :param str id: The unique ID for this resource.
        :param bool is_default: Indicates if this is the default channel for the associated project.
        :param str lifecycle_id: The lifecycle ID associated with this channel.
        :param str name: The name of this resource.
        :param str project_id: The project ID associated with this channel.
        :param Sequence['GetChannelsChannelRuleArgs'] rules: A list of rules associated with this channel.
        :param str space_id: The space ID associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "lifecycle_id", lifecycle_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this channel.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates if this is the default channel for the associated project.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="lifecycleId")
    def lifecycle_id(self) -> str:
        """
        The lifecycle ID associated with this channel.
        """
        return pulumi.get(self, "lifecycle_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The project ID associated with this channel.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetChannelsChannelRuleResult']:
        """
        A list of rules associated with this channel.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")


@pulumi.output_type
class GetChannelsChannelRuleResult(dict):
    def __init__(__self__, *,
                 action_packages: Sequence['outputs.GetChannelsChannelRuleActionPackageResult'],
                 id: str,
                 tag: Optional[str] = None,
                 version_range: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_packages", action_packages)
        pulumi.set(__self__, "id", id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter(name="actionPackages")
    def action_packages(self) -> Sequence['outputs.GetChannelsChannelRuleActionPackageResult']:
        return pulumi.get(self, "action_packages")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetChannelsChannelRuleActionPackageResult(dict):
    def __init__(__self__, *,
                 deployment_action: Optional[str] = None,
                 package_reference: Optional[str] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[str]:
        return pulumi.get(self, "deployment_action")

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[str]:
        return pulumi.get(self, "package_reference")


@pulumi.output_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 default_worker_pool_id: str,
                 endpoints: Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetCloudRegionDeploymentTargetsCloudRegionDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 endpoints: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetDeploymentTargetsDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetKubernetesAgentDeploymentTargetsKubernetesAgentDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 agent_helm_release_name: str,
                 agent_kubernetes_namespace: str,
                 agent_tentacle_version: str,
                 agent_upgrade_status: str,
                 agent_version: str,
                 communication_mode: str,
                 default_namespace: str,
                 environments: Sequence[str],
                 id: str,
                 is_disabled: bool,
                 machine_policy_id: str,
                 name: str,
                 roles: Sequence[str],
                 space_id: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 upgrade_locked: bool,
                 uri: str):
        """
        :param str agent_helm_release_name: Name of the Helm release that the agent belongs to.
        :param str agent_kubernetes_namespace: Name of the Kubernetes namespace where the agent is installed.
        :param str agent_tentacle_version: Current Tentacle version of the agent
        :param str agent_upgrade_status: Current upgrade availability status of the agent. One of 'NoUpgrades', 'UpgradeAvailable', 'UpgradeSuggested', 'UpgradeRequired'
        :param str agent_version: Current Helm chart version of the agent.
        :param str communication_mode: The communication mode used by the Kubernetes agent to communicate with Octopus Server. Currently, the only supported value is 'Polling'.
        :param str default_namespace: Optional default namespace that will be used when using Kubernetes deployment steps, can be overrides within step configurations.
        :param Sequence[str] environments: A list of environment IDs this Kubernetes agent can deploy to.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: Whether the Kubernetes agent is disabled. If the agent is disabled, it will not be included in any deployments.
        :param str machine_policy_id: Optional ID of the machine policy that the Kubernetes agent will use. If not provided the default machine policy will be used.
        :param str name: The name of this resource.
        :param Sequence[str] roles: A list of target roles that are associated to this Kubernetes agent.
        :param str space_id: The space ID associated with this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str thumbprint: The thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent. This is the same thumbprint that was used when installing the agent.
        :param bool upgrade_locked: If enabled the Kubernetes agent will not automatically upgrade and will stay on the currently installed version, even if the associated machine policy is configured to automatically upgrade.
        :param str uri: The URI of the Kubernetes agent's used by the server to queue messages. This is the same subscription uri that was used when installing the agent.
        """
        pulumi.set(__self__, "agent_helm_release_name", agent_helm_release_name)
        pulumi.set(__self__, "agent_kubernetes_namespace", agent_kubernetes_namespace)
        pulumi.set(__self__, "agent_tentacle_version", agent_tentacle_version)
        pulumi.set(__self__, "agent_upgrade_status", agent_upgrade_status)
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "communication_mode", communication_mode)
        pulumi.set(__self__, "default_namespace", default_namespace)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="agentHelmReleaseName")
    def agent_helm_release_name(self) -> str:
        """
        Name of the Helm release that the agent belongs to.
        """
        return pulumi.get(self, "agent_helm_release_name")

    @property
    @pulumi.getter(name="agentKubernetesNamespace")
    def agent_kubernetes_namespace(self) -> str:
        """
        Name of the Kubernetes namespace where the agent is installed.
        """
        return pulumi.get(self, "agent_kubernetes_namespace")

    @property
    @pulumi.getter(name="agentTentacleVersion")
    def agent_tentacle_version(self) -> str:
        """
        Current Tentacle version of the agent
        """
        return pulumi.get(self, "agent_tentacle_version")

    @property
    @pulumi.getter(name="agentUpgradeStatus")
    def agent_upgrade_status(self) -> str:
        """
        Current upgrade availability status of the agent. One of 'NoUpgrades', 'UpgradeAvailable', 'UpgradeSuggested', 'UpgradeRequired'
        """
        return pulumi.get(self, "agent_upgrade_status")

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> str:
        """
        Current Helm chart version of the agent.
        """
        return pulumi.get(self, "agent_version")

    @property
    @pulumi.getter(name="communicationMode")
    def communication_mode(self) -> str:
        """
        The communication mode used by the Kubernetes agent to communicate with Octopus Server. Currently, the only supported value is 'Polling'.
        """
        return pulumi.get(self, "communication_mode")

    @property
    @pulumi.getter(name="defaultNamespace")
    def default_namespace(self) -> str:
        """
        Optional default namespace that will be used when using Kubernetes deployment steps, can be overrides within step configurations.
        """
        return pulumi.get(self, "default_namespace")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs this Kubernetes agent can deploy to.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        Whether the Kubernetes agent is disabled. If the agent is disabled, it will not be included in any deployments.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        """
        Optional ID of the machine policy that the Kubernetes agent will use. If not provided the default machine policy will be used.
        """
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A list of target roles that are associated to this Kubernetes agent.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent. This is the same thumbprint that was used when installing the agent.
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        """
        If enabled the Kubernetes agent will not automatically upgrade and will stay on the currently installed version, even if the associated machine policy is configured to automatically upgrade.
        """
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The URI of the Kubernetes agent's used by the server to queue messages. This is the same subscription uri that was used when installing the agent.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetKubernetesAgentWorkersKubernetesAgentWorkerResult(dict):
    def __init__(__self__, *,
                 agent_helm_release_name: str,
                 agent_kubernetes_namespace: str,
                 agent_tentacle_version: str,
                 agent_upgrade_status: str,
                 agent_version: str,
                 communication_mode: str,
                 id: str,
                 is_disabled: bool,
                 machine_policy_id: str,
                 name: str,
                 space_id: str,
                 thumbprint: str,
                 upgrade_locked: bool,
                 uri: str,
                 worker_pool_ids: Sequence[str]):
        """
        :param str agent_helm_release_name: Name of the Helm release that the agent belongs to.
        :param str agent_kubernetes_namespace: Name of the Kubernetes namespace where the agent is installed.
        :param str agent_tentacle_version: Current Tentacle version of the agent
        :param str agent_upgrade_status: Current upgrade availability status of the agent. One of 'NoUpgrades', 'UpgradeAvailable', 'UpgradeSuggested', 'UpgradeRequired'
        :param str agent_version: Current Helm chart version of the agent.
        :param str communication_mode: The communication mode used by the Kubernetes agent to communicate with Octopus Server. Currently, the only supported value is 'Polling'.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: Whether the Kubernetes agent is disabled. If the agent is disabled, it will not be included in any deployments.
        :param str machine_policy_id: Optional ID of the machine policy that the Kubernetes agent will use. If not provided the default machine policy will be used.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str thumbprint: The thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent. This is the same thumbprint that was used when installing the agent.
        :param bool upgrade_locked: If enabled the Kubernetes agent will not automatically upgrade and will stay on the currently installed version, even if the associated machine policy is configured to automatically upgrade.
        :param str uri: The URI of the Kubernetes agent's used by the server to queue messages. This is the same subscription uri that was used when installing the agent.
        :param Sequence[str] worker_pool_ids: A list of worker pool Ids specifying the pools in which this worker belongs
        """
        pulumi.set(__self__, "agent_helm_release_name", agent_helm_release_name)
        pulumi.set(__self__, "agent_kubernetes_namespace", agent_kubernetes_namespace)
        pulumi.set(__self__, "agent_tentacle_version", agent_tentacle_version)
        pulumi.set(__self__, "agent_upgrade_status", agent_upgrade_status)
        pulumi.set(__self__, "agent_version", agent_version)
        pulumi.set(__self__, "communication_mode", communication_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "worker_pool_ids", worker_pool_ids)

    @property
    @pulumi.getter(name="agentHelmReleaseName")
    def agent_helm_release_name(self) -> str:
        """
        Name of the Helm release that the agent belongs to.
        """
        return pulumi.get(self, "agent_helm_release_name")

    @property
    @pulumi.getter(name="agentKubernetesNamespace")
    def agent_kubernetes_namespace(self) -> str:
        """
        Name of the Kubernetes namespace where the agent is installed.
        """
        return pulumi.get(self, "agent_kubernetes_namespace")

    @property
    @pulumi.getter(name="agentTentacleVersion")
    def agent_tentacle_version(self) -> str:
        """
        Current Tentacle version of the agent
        """
        return pulumi.get(self, "agent_tentacle_version")

    @property
    @pulumi.getter(name="agentUpgradeStatus")
    def agent_upgrade_status(self) -> str:
        """
        Current upgrade availability status of the agent. One of 'NoUpgrades', 'UpgradeAvailable', 'UpgradeSuggested', 'UpgradeRequired'
        """
        return pulumi.get(self, "agent_upgrade_status")

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> str:
        """
        Current Helm chart version of the agent.
        """
        return pulumi.get(self, "agent_version")

    @property
    @pulumi.getter(name="communicationMode")
    def communication_mode(self) -> str:
        """
        The communication mode used by the Kubernetes agent to communicate with Octopus Server. Currently, the only supported value is 'Polling'.
        """
        return pulumi.get(self, "communication_mode")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        Whether the Kubernetes agent is disabled. If the agent is disabled, it will not be included in any deployments.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        """
        Optional ID of the machine policy that the Kubernetes agent will use. If not provided the default machine policy will be used.
        """
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent. This is the same thumbprint that was used when installing the agent.
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        """
        If enabled the Kubernetes agent will not automatically upgrade and will stay on the currently installed version, even if the associated machine policy is configured to automatically upgrade.
        """
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The URI of the Kubernetes agent's used by the server to queue messages. This is the same subscription uri that was used when installing the agent.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="workerPoolIds")
    def worker_pool_ids(self) -> Sequence[str]:
        """
        A list of worker pool Ids specifying the pools in which this worker belongs
        """
        return pulumi.get(self, "worker_pool_ids")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult'],
                 aws_account_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult'],
                 azure_service_principal_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult'],
                 certificate_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult'],
                 cluster_certificate: str,
                 cluster_certificate_path: str,
                 cluster_url: str,
                 container_options: str,
                 containers: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult'],
                 default_worker_pool_id: str,
                 endpoints: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 gcp_account_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult'],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 namespace: str,
                 operating_system: str,
                 pod_authentications: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetPodAuthenticationResult'],
                 proxy_id: str,
                 roles: Sequence[str],
                 running_in_container: bool,
                 shell_name: str,
                 shell_version: str,
                 skip_tls_verification: bool,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "aws_account_authentications", aws_account_authentications)
        pulumi.set(__self__, "azure_service_principal_authentications", azure_service_principal_authentications)
        pulumi.set(__self__, "certificate_authentications", certificate_authentications)
        pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "container_options", container_options)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "gcp_account_authentications", gcp_account_authentications)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "pod_authentications", pod_authentications)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "running_in_container", running_in_container)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter(name="awsAccountAuthentications")
    def aws_account_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult']:
        return pulumi.get(self, "aws_account_authentications")

    @property
    @pulumi.getter(name="azureServicePrincipalAuthentications")
    def azure_service_principal_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult']:
        return pulumi.get(self, "azure_service_principal_authentications")

    @property
    @pulumi.getter(name="certificateAuthentications")
    def certificate_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult']:
        return pulumi.get(self, "certificate_authentications")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> str:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> str:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> str:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> str:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> str:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="gcpAccountAuthentications")
    def gcp_account_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult']:
        return pulumi.get(self, "gcp_account_authentications")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="podAuthentications")
    def pod_authentications(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetPodAuthenticationResult']:
        return pulumi.get(self, "pod_authentications")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> bool:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> bool:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAwsAccountAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 use_instance_role: Optional[bool] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 cluster_resource_group: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> str:
        return pulumi.get(self, "cluster_resource_group")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetCertificateAuthenticationResult(dict):
    def __init__(__self__, *,
                 client_certificate: Optional[str] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetGcpAccountAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 cluster_name: str,
                 project: str,
                 impersonate_service_account: Optional[bool] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project", project)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetKubernetesClusterDeploymentTargetsKubernetesClusterDeploymentTargetPodAuthenticationResult(dict):
    def __init__(__self__, *,
                 token_path: str):
        pulumi.set(__self__, "token_path", token_path)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> str:
        return pulumi.get(self, "token_path")


@pulumi.output_type
class GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 certificate_signature_algorithm: str,
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 proxy_id: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 tentacle_url: str,
                 tentacle_version_details: Sequence['outputs.GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult'],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this listening tentacle.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param bool is_disabled: Represents the disabled status of this deployment target.
        :param bool is_in_process: Represents the in-process status of this deployment target.
        :param str machine_policy_id: The machine policy ID that is associated with this deployment target.
        :param str name: The name of this resource.
        :param str operating_system: The operating system that is associated with this deployment target.
        :param str proxy_id: The proxy ID that is associated with this deployment target.
        :param Sequence[str] roles: A list of role IDs that are associated with this deployment target.
        :param str shell_name: The shell name associated with this deployment target.
        :param str shell_version: The shell version associated with this deployment target.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        :param str tentacle_url: The tenant URL of this deployment target.
        :param str thumbprint: The thumbprint of this deployment target.
        :param str uri: The URI of this deployment target.
        """
        pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "tentacle_url", tentacle_url)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> str:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this listening tentacle.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        """
        Represents the disabled status of this deployment target.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        """
        Represents the in-process status of this deployment target.
        """
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        """
        The machine policy ID that is associated with this deployment target.
        """
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        """
        The operating system that is associated with this deployment target.
        """
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        The proxy ID that is associated with this deployment target.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        A list of role IDs that are associated with this deployment target.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        """
        The shell name associated with this deployment target.
        """
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        """
        The shell version associated with this deployment target.
        """
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter(name="tentacleUrl")
    def tentacle_url(self) -> str:
        """
        The tenant URL of this deployment target.
        """
        return pulumi.get(self, "tentacle_url")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        """
        The thumbprint of this deployment target.
        """
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The URI of this deployment target.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetListeningTentacleDeploymentTargetsListeningTentacleDeploymentTargetTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyResult(dict):
    def __init__(__self__, *,
                 connection_connect_timeout: int,
                 connection_retry_count_limit: int,
                 connection_retry_sleep_interval: int,
                 connection_retry_time_limit: int,
                 description: str,
                 id: str,
                 is_default: bool,
                 machine_cleanup_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult'],
                 machine_connectivity_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult'],
                 machine_health_check_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult'],
                 machine_update_policies: Sequence['outputs.GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult'],
                 name: str,
                 polling_request_queue_timeout: int,
                 space_id: str):
        """
        :param int connection_connect_timeout: In nanoseconds. Minimum value: 10000000000 (10 seconds).
        :param int connection_retry_sleep_interval: In nanoseconds.
        :param int connection_retry_time_limit: In nanoseconds.
        :param str description: The description of this machine policy.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param int polling_request_queue_timeout: In nanoseconds.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "connection_connect_timeout", connection_connect_timeout)
        pulumi.set(__self__, "connection_retry_count_limit", connection_retry_count_limit)
        pulumi.set(__self__, "connection_retry_sleep_interval", connection_retry_sleep_interval)
        pulumi.set(__self__, "connection_retry_time_limit", connection_retry_time_limit)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "machine_cleanup_policies", machine_cleanup_policies)
        pulumi.set(__self__, "machine_connectivity_policies", machine_connectivity_policies)
        pulumi.set(__self__, "machine_health_check_policies", machine_health_check_policies)
        pulumi.set(__self__, "machine_update_policies", machine_update_policies)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "polling_request_queue_timeout", polling_request_queue_timeout)
        pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="connectionConnectTimeout")
    def connection_connect_timeout(self) -> int:
        """
        In nanoseconds. Minimum value: 10000000000 (10 seconds).
        """
        return pulumi.get(self, "connection_connect_timeout")

    @property
    @pulumi.getter(name="connectionRetryCountLimit")
    def connection_retry_count_limit(self) -> int:
        return pulumi.get(self, "connection_retry_count_limit")

    @property
    @pulumi.getter(name="connectionRetrySleepInterval")
    def connection_retry_sleep_interval(self) -> int:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "connection_retry_sleep_interval")

    @property
    @pulumi.getter(name="connectionRetryTimeLimit")
    def connection_retry_time_limit(self) -> int:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "connection_retry_time_limit")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this machine policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="machineCleanupPolicies")
    def machine_cleanup_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult']:
        return pulumi.get(self, "machine_cleanup_policies")

    @property
    @pulumi.getter(name="machineConnectivityPolicies")
    def machine_connectivity_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult']:
        return pulumi.get(self, "machine_connectivity_policies")

    @property
    @pulumi.getter(name="machineHealthCheckPolicies")
    def machine_health_check_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult']:
        return pulumi.get(self, "machine_health_check_policies")

    @property
    @pulumi.getter(name="machineUpdatePolicies")
    def machine_update_policies(self) -> Sequence['outputs.GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult']:
        return pulumi.get(self, "machine_update_policies")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pollingRequestQueueTimeout")
    def polling_request_queue_timeout(self) -> int:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "polling_request_queue_timeout")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineCleanupPolicyResult(dict):
    def __init__(__self__, *,
                 delete_machines_elapsed_timespan: int,
                 delete_machines_behavior: Optional[str] = None):
        """
        :param int delete_machines_elapsed_timespan: In nanoseconds.
        """
        pulumi.set(__self__, "delete_machines_elapsed_timespan", delete_machines_elapsed_timespan)
        if delete_machines_behavior is not None:
            pulumi.set(__self__, "delete_machines_behavior", delete_machines_behavior)

    @property
    @pulumi.getter(name="deleteMachinesElapsedTimespan")
    def delete_machines_elapsed_timespan(self) -> int:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "delete_machines_elapsed_timespan")

    @property
    @pulumi.getter(name="deleteMachinesBehavior")
    def delete_machines_behavior(self) -> Optional[str]:
        return pulumi.get(self, "delete_machines_behavior")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineConnectivityPolicyResult(dict):
    def __init__(__self__, *,
                 machine_connectivity_behavior: Optional[str] = None):
        if machine_connectivity_behavior is not None:
            pulumi.set(__self__, "machine_connectivity_behavior", machine_connectivity_behavior)

    @property
    @pulumi.getter(name="machineConnectivityBehavior")
    def machine_connectivity_behavior(self) -> Optional[str]:
        return pulumi.get(self, "machine_connectivity_behavior")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyResult(dict):
    def __init__(__self__, *,
                 bash_health_check_policy: 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult',
                 powershell_health_check_policy: 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult',
                 health_check_cron: Optional[str] = None,
                 health_check_cron_timezone: Optional[str] = None,
                 health_check_interval: Optional[int] = None,
                 health_check_type: Optional[str] = None):
        """
        :param int health_check_interval: In nanoseconds.
        """
        pulumi.set(__self__, "bash_health_check_policy", bash_health_check_policy)
        pulumi.set(__self__, "powershell_health_check_policy", powershell_health_check_policy)
        if health_check_cron is not None:
            pulumi.set(__self__, "health_check_cron", health_check_cron)
        if health_check_cron_timezone is not None:
            pulumi.set(__self__, "health_check_cron_timezone", health_check_cron_timezone)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)

    @property
    @pulumi.getter(name="bashHealthCheckPolicy")
    def bash_health_check_policy(self) -> 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult':
        return pulumi.get(self, "bash_health_check_policy")

    @property
    @pulumi.getter(name="powershellHealthCheckPolicy")
    def powershell_health_check_policy(self) -> 'outputs.GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult':
        return pulumi.get(self, "powershell_health_check_policy")

    @property
    @pulumi.getter(name="healthCheckCron")
    def health_check_cron(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron")

    @property
    @pulumi.getter(name="healthCheckCronTimezone")
    def health_check_cron_timezone(self) -> Optional[str]:
        return pulumi.get(self, "health_check_cron_timezone")

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[int]:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "health_check_interval")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[str]:
        return pulumi.get(self, "health_check_type")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyResult(dict):
    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyResult(dict):
    def __init__(__self__, *,
                 run_type: Optional[str] = None,
                 script_body: Optional[str] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[str]:
        return pulumi.get(self, "run_type")

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[str]:
        return pulumi.get(self, "script_body")


@pulumi.output_type
class GetMachinePoliciesMachinePolicyMachineUpdatePolicyResult(dict):
    def __init__(__self__, *,
                 calamari_update_behavior: Optional[str] = None,
                 kubernetes_agent_update_behavior: Optional[str] = None,
                 tentacle_update_account_id: Optional[str] = None,
                 tentacle_update_behavior: Optional[str] = None):
        """
        :param str calamari_update_behavior: The behaviour of how Calamari is updated. Valid values are `UpdateAlways`, `UpdateOnDeployment` and `UpdateOnNewMachine`.
        :param str kubernetes_agent_update_behavior: The behaviour of how Kubernetes agent machines are updated. Valid values are `NeverUpdate` and `Update`.
        :param str tentacle_update_account_id: The Account ID to perform any Tentacle updates under.
        :param str tentacle_update_behavior: The behaviour of how Tentacle machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        if calamari_update_behavior is not None:
            pulumi.set(__self__, "calamari_update_behavior", calamari_update_behavior)
        if kubernetes_agent_update_behavior is not None:
            pulumi.set(__self__, "kubernetes_agent_update_behavior", kubernetes_agent_update_behavior)
        if tentacle_update_account_id is not None:
            pulumi.set(__self__, "tentacle_update_account_id", tentacle_update_account_id)
        if tentacle_update_behavior is not None:
            pulumi.set(__self__, "tentacle_update_behavior", tentacle_update_behavior)

    @property
    @pulumi.getter(name="calamariUpdateBehavior")
    def calamari_update_behavior(self) -> Optional[str]:
        """
        The behaviour of how Calamari is updated. Valid values are `UpdateAlways`, `UpdateOnDeployment` and `UpdateOnNewMachine`.
        """
        return pulumi.get(self, "calamari_update_behavior")

    @property
    @pulumi.getter(name="kubernetesAgentUpdateBehavior")
    def kubernetes_agent_update_behavior(self) -> Optional[str]:
        """
        The behaviour of how Kubernetes agent machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        return pulumi.get(self, "kubernetes_agent_update_behavior")

    @property
    @pulumi.getter(name="tentacleUpdateAccountId")
    def tentacle_update_account_id(self) -> Optional[str]:
        """
        The Account ID to perform any Tentacle updates under.
        """
        return pulumi.get(self, "tentacle_update_account_id")

    @property
    @pulumi.getter(name="tentacleUpdateBehavior")
    def tentacle_update_behavior(self) -> Optional[str]:
        """
        The behaviour of how Tentacle machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        return pulumi.get(self, "tentacle_update_behavior")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 applications_directory: str,
                 destinations: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult'],
                 endpoints: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str,
                 working_directory: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "applications_directory", applications_directory)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> str:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> str:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetOfflinePackageDropDeploymentTargetsOfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 certificate_signature_algorithm: str,
                 endpoints: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 has_latest_calamari: bool,
                 health_status: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 tentacle_url: str,
                 tentacle_version_details: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult'],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "tentacle_url", tentacle_url)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> str:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter(name="tentacleUrl")
    def tentacle_url(self) -> str:
        return pulumi.get(self, "tentacle_url")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPollingTentacleDeploymentTargetsPollingTentacleDeploymentTargetTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 dot_net_core_platform: str,
                 endpoints: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult'],
                 environments: Sequence[str],
                 fingerprint: str,
                 has_latest_calamari: bool,
                 health_status: str,
                 host: str,
                 id: str,
                 is_disabled: bool,
                 is_in_process: bool,
                 machine_policy_id: str,
                 name: str,
                 operating_system: str,
                 port: int,
                 proxy_id: str,
                 roles: Sequence[str],
                 shell_name: str,
                 shell_version: str,
                 space_id: str,
                 status: str,
                 status_summary: str,
                 tenant_tags: Sequence[str],
                 tenanted_deployment_participation: str,
                 tenants: Sequence[str],
                 thumbprint: str,
                 uri: str):
        """
        :param Sequence[str] environments: A list of environment IDs associated with this resource.
        :param str health_status: Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param str space_id: The space ID associated with this resource.
        :param str status: The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        :param str status_summary: A summary elaborating on the status of this resource.
        :param Sequence[str] tenant_tags: A list of tenant tags associated with this resource.
        :param str tenanted_deployment_participation: The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        :param Sequence[str] tenants: A list of tenant IDs associated with this resource.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "has_latest_calamari", has_latest_calamari)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_disabled", is_disabled)
        pulumi.set(__self__, "is_in_process", is_in_process)
        pulumi.set(__self__, "machine_policy_id", machine_policy_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operating_system", operating_system)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "shell_name", shell_name)
        pulumi.set(__self__, "shell_version", shell_version)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_summary", status_summary)
        pulumi.set(__self__, "tenant_tags", tenant_tags)
        pulumi.set(__self__, "tenanted_deployment_participation", tenanted_deployment_participation)
        pulumi.set(__self__, "tenants", tenants)
        pulumi.set(__self__, "thumbprint", thumbprint)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> str:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def environments(self) -> Sequence[str]:
        """
        A list of environment IDs associated with this resource.
        """
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="hasLatestCalamari")
    def has_latest_calamari(self) -> bool:
        return pulumi.get(self, "has_latest_calamari")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Represents the health status of this deployment target. Valid health statuses are `HasWarnings`, `Healthy`, `Unavailable`, `Unhealthy`, or `Unknown`.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> bool:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter(name="isInProcess")
    def is_in_process(self) -> bool:
        return pulumi.get(self, "is_in_process")

    @property
    @pulumi.getter(name="machinePolicyId")
    def machine_policy_id(self) -> str:
        return pulumi.get(self, "machine_policy_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> str:
        return pulumi.get(self, "operating_system")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="shellName")
    def shell_name(self) -> str:
        return pulumi.get(self, "shell_name")

    @property
    @pulumi.getter(name="shellVersion")
    def shell_version(self) -> str:
        return pulumi.get(self, "shell_version")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of this resource. Valid statuses are `CalamariNeedsUpgrade`, `Disabled`, `NeedsUpgrade`, `Offline`, `Online`, or `Unknown`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusSummary")
    def status_summary(self) -> str:
        """
        A summary elaborating on the status of this resource.
        """
        return pulumi.get(self, "status_summary")

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Sequence[str]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @property
    @pulumi.getter(name="tenantedDeploymentParticipation")
    def tenanted_deployment_participation(self) -> str:
        """
        The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.
        """
        return pulumi.get(self, "tenanted_deployment_participation")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        """
        A list of tenant IDs associated with this resource.
        """
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter
    def thumbprint(self) -> str:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointResult(dict):
    def __init__(__self__, *,
                 authentication: 'outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult',
                 communication_style: str,
                 containers: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult'],
                 destinations: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult'],
                 id: str,
                 tentacle_version_details: Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult'],
                 aad_client_credential_secret: Optional[str] = None,
                 aad_credential_type: Optional[str] = None,
                 aad_user_credential_username: Optional[str] = None,
                 account_id: Optional[str] = None,
                 applications_directory: Optional[str] = None,
                 certificate_signature_algorithm: Optional[str] = None,
                 certificate_store_location: Optional[str] = None,
                 certificate_store_name: Optional[str] = None,
                 client_certificate_variable: Optional[str] = None,
                 cloud_service_name: Optional[str] = None,
                 cluster_certificate: Optional[str] = None,
                 cluster_certificate_path: Optional[str] = None,
                 cluster_url: Optional[str] = None,
                 connection_endpoint: Optional[str] = None,
                 container_options: Optional[str] = None,
                 default_worker_pool_id: Optional[str] = None,
                 dot_net_core_platform: Optional[str] = None,
                 fingerprint: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 proxy_id: Optional[str] = None,
                 resource_group_name: Optional[str] = None,
                 running_in_container: Optional[bool] = None,
                 security_mode: Optional[str] = None,
                 server_certificate_thumbprint: Optional[str] = None,
                 skip_tls_verification: Optional[bool] = None,
                 slot: Optional[str] = None,
                 storage_account_name: Optional[str] = None,
                 swap_if_possible: Optional[bool] = None,
                 thumbprint: Optional[str] = None,
                 uri: Optional[str] = None,
                 use_current_instance_count: Optional[bool] = None,
                 web_app_name: Optional[str] = None,
                 web_app_slot_name: Optional[str] = None,
                 working_directory: Optional[str] = None):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "communication_style", communication_style)
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def authentication(self) -> 'outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult':
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> str:
        return pulumi.get(self, "communication_style")

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult']:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult']:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Sequence['outputs.GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult']:
        return pulumi.get(self, "tentacle_version_details")

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[str]:
        return pulumi.get(self, "aad_client_credential_secret")

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[str]:
        return pulumi.get(self, "aad_credential_type")

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[str]:
        return pulumi.get(self, "aad_user_credential_username")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[str]:
        return pulumi.get(self, "applications_directory")

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_location")

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_name")

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate_variable")

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[str]:
        return pulumi.get(self, "cloud_service_name")

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate")

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[str]:
        return pulumi.get(self, "cluster_certificate_path")

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[str]:
        return pulumi.get(self, "cluster_url")

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "connection_endpoint")

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[str]:
        return pulumi.get(self, "container_options")

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[str]:
        return pulumi.get(self, "default_worker_pool_id")

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[str]:
        return pulumi.get(self, "dot_net_core_platform")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[bool]:
        return pulumi.get(self, "running_in_container")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[bool]:
        return pulumi.get(self, "skip_tls_verification")

    @property
    @pulumi.getter
    def slot(self) -> Optional[str]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[bool]:
        return pulumi.get(self, "swap_if_possible")

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[str]:
        return pulumi.get(self, "thumbprint")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[bool]:
        return pulumi.get(self, "use_current_instance_count")

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_name")

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[str]:
        return pulumi.get(self, "web_app_slot_name")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[str]:
        return pulumi.get(self, "working_directory")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointAuthenticationResult(dict):
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 admin_login: Optional[str] = None,
                 assume_role: Optional[bool] = None,
                 assume_role_external_id: Optional[str] = None,
                 assume_role_session_duration: Optional[int] = None,
                 assumed_role_arn: Optional[str] = None,
                 assumed_role_session: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_resource_group: Optional[str] = None,
                 impersonate_service_account: Optional[bool] = None,
                 project: Optional[str] = None,
                 region: Optional[str] = None,
                 service_account_emails: Optional[str] = None,
                 token_path: Optional[str] = None,
                 use_instance_role: Optional[bool] = None,
                 use_vm_service_account: Optional[bool] = None,
                 zone: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[str]:
        return pulumi.get(self, "admin_login")

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[bool]:
        return pulumi.get(self, "assume_role")

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_external_id")

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[int]:
        return pulumi.get(self, "assume_role_session_duration")

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_arn")

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[str]:
        return pulumi.get(self, "assumed_role_session")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "cluster_resource_group")

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "impersonate_service_account")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[str]:
        return pulumi.get(self, "service_account_emails")

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[str]:
        return pulumi.get(self, "token_path")

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_instance_role")

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[bool]:
        return pulumi.get(self, "use_vm_service_account")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointContainerResult(dict):
    def __init__(__self__, *,
                 feed_id: Optional[str] = None,
                 image: Optional[str] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[str]:
        return pulumi.get(self, "feed_id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointDestinationResult(dict):
    def __init__(__self__, *,
                 destination_type: Optional[str] = None,
                 drop_folder_path: Optional[str] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[str]:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[str]:
        return pulumi.get(self, "drop_folder_path")


@pulumi.output_type
class GetSshConnectionDeploymentTargetsSshConnectionDeploymentTargetEndpointTentacleVersionDetailResult(dict):
    def __init__(__self__, *,
                 upgrade_locked: bool,
                 upgrade_required: bool,
                 upgrade_suggested: bool,
                 version: str):
        pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        pulumi.set(__self__, "upgrade_required", upgrade_required)
        pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> bool:
        return pulumi.get(self, "upgrade_locked")

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> bool:
        return pulumi.get(self, "upgrade_required")

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> bool:
        return pulumi.get(self, "upgrade_suggested")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetTeamsTeamResult(dict):
    def __init__(__self__, *,
                 can_be_deleted: bool,
                 can_be_renamed: bool,
                 can_change_members: bool,
                 can_change_roles: bool,
                 description: str,
                 external_security_groups: Sequence['outputs.GetTeamsTeamExternalSecurityGroupResult'],
                 id: str,
                 name: str,
                 space_id: str,
                 users: Sequence[str]):
        """
        :param str description: The user-friendly description of this team.
        :param str id: The unique ID for this resource.
        :param str name: The name of this team.
        :param str space_id: The space associated with this team.
        :param Sequence[str] users: A list of user IDs designated to be members of this team.
        """
        pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        pulumi.set(__self__, "can_be_renamed", can_be_renamed)
        pulumi.set(__self__, "can_change_members", can_change_members)
        pulumi.set(__self__, "can_change_roles", can_change_roles)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_security_groups", external_security_groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> bool:
        return pulumi.get(self, "can_be_deleted")

    @property
    @pulumi.getter(name="canBeRenamed")
    def can_be_renamed(self) -> bool:
        return pulumi.get(self, "can_be_renamed")

    @property
    @pulumi.getter(name="canChangeMembers")
    def can_change_members(self) -> bool:
        return pulumi.get(self, "can_change_members")

    @property
    @pulumi.getter(name="canChangeRoles")
    def can_change_roles(self) -> bool:
        return pulumi.get(self, "can_change_roles")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The user-friendly description of this team.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalSecurityGroups")
    def external_security_groups(self) -> Sequence['outputs.GetTeamsTeamExternalSecurityGroupResult']:
        return pulumi.get(self, "external_security_groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space associated with this team.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        """
        A list of user IDs designated to be members of this team.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetTeamsTeamExternalSecurityGroupResult(dict):
    def __init__(__self__, *,
                 display_id_and_name: bool,
                 display_name: str,
                 id: str):
        """
        :param str id: The unique ID for this resource.
        """
        pulumi.set(__self__, "display_id_and_name", display_id_and_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayIdAndName")
    def display_id_and_name(self) -> bool:
        return pulumi.get(self, "display_id_and_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetUserRolesUserRoleResult(dict):
    def __init__(__self__, *,
                 can_be_deleted: bool,
                 description: str,
                 granted_space_permissions: Sequence[str],
                 granted_system_permissions: Sequence[str],
                 id: str,
                 name: str,
                 space_permission_descriptions: Sequence[str],
                 supported_restrictions: Sequence[str],
                 system_permission_descriptions: Sequence[str]):
        """
        :param str description: The description of this user role.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        """
        pulumi.set(__self__, "can_be_deleted", can_be_deleted)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "granted_space_permissions", granted_space_permissions)
        pulumi.set(__self__, "granted_system_permissions", granted_system_permissions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "space_permission_descriptions", space_permission_descriptions)
        pulumi.set(__self__, "supported_restrictions", supported_restrictions)
        pulumi.set(__self__, "system_permission_descriptions", system_permission_descriptions)

    @property
    @pulumi.getter(name="canBeDeleted")
    def can_be_deleted(self) -> bool:
        return pulumi.get(self, "can_be_deleted")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this user role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantedSpacePermissions")
    def granted_space_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "granted_space_permissions")

    @property
    @pulumi.getter(name="grantedSystemPermissions")
    def granted_system_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "granted_system_permissions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="spacePermissionDescriptions")
    def space_permission_descriptions(self) -> Sequence[str]:
        return pulumi.get(self, "space_permission_descriptions")

    @property
    @pulumi.getter(name="supportedRestrictions")
    def supported_restrictions(self) -> Sequence[str]:
        return pulumi.get(self, "supported_restrictions")

    @property
    @pulumi.getter(name="systemPermissionDescriptions")
    def system_permission_descriptions(self) -> Sequence[str]:
        return pulumi.get(self, "system_permission_descriptions")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 can_password_be_edited: bool,
                 display_name: str,
                 email_address: str,
                 id: str,
                 identities: Sequence['outputs.GetUsersUserIdentityResult'],
                 is_active: bool,
                 is_requestor: bool,
                 is_service: bool,
                 password: str,
                 username: str):
        """
        :param str display_name: The display name of this resource.
        :param str email_address: The email address of this resource.
        :param str id: The unique ID for this resource.
        :param str password: The password associated with this resource.
        :param str username: The username associated with this resource.
        """
        pulumi.set(__self__, "can_password_be_edited", can_password_be_edited)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "email_address", email_address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identities", identities)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "is_requestor", is_requestor)
        pulumi.set(__self__, "is_service", is_service)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="canPasswordBeEdited")
    def can_password_be_edited(self) -> bool:
        return pulumi.get(self, "can_password_be_edited")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of this resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> str:
        """
        The email address of this resource.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetUsersUserIdentityResult']:
        return pulumi.get(self, "identities")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isRequestor")
    def is_requestor(self) -> bool:
        return pulumi.get(self, "is_requestor")

    @property
    @pulumi.getter(name="isService")
    def is_service(self) -> bool:
        return pulumi.get(self, "is_service")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password associated with this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with this resource.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUsersUserIdentityResult(dict):
    def __init__(__self__, *,
                 claims: Optional[Sequence['outputs.GetUsersUserIdentityClaimResult']] = None,
                 provider: Optional[str] = None):
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def claims(self) -> Optional[Sequence['outputs.GetUsersUserIdentityClaimResult']]:
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        return pulumi.get(self, "provider")


@pulumi.output_type
class GetUsersUserIdentityClaimResult(dict):
    def __init__(__self__, *,
                 is_identifying_claim: bool,
                 name: str,
                 value: str):
        """
        :param str name: The name of this resource.
        """
        pulumi.set(__self__, "is_identifying_claim", is_identifying_claim)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isIdentifyingClaim")
    def is_identifying_claim(self) -> bool:
        return pulumi.get(self, "is_identifying_claim")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWorkerPoolsWorkerPoolResult(dict):
    def __init__(__self__, *,
                 can_add_workers: bool,
                 description: str,
                 id: str,
                 is_default: bool,
                 name: str,
                 sort_order: int,
                 space_id: str,
                 worker_pool_type: str,
                 worker_type: str):
        """
        :param str description: The description of this worker pool.
        :param str id: The unique ID for this resource.
        :param str name: The name of this resource.
        :param int sort_order: The order number to sort a dynamic worker pool.
        :param str space_id: The space ID associated with this resource.
        """
        pulumi.set(__self__, "can_add_workers", can_add_workers)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_order", sort_order)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "worker_pool_type", worker_pool_type)
        pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="canAddWorkers")
    def can_add_workers(self) -> bool:
        return pulumi.get(self, "can_add_workers")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this worker pool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> int:
        """
        The order number to sort a dynamic worker pool.
        """
        return pulumi.get(self, "sort_order")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        """
        The space ID associated with this resource.
        """
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="workerPoolType")
    def worker_pool_type(self) -> str:
        return pulumi.get(self, "worker_pool_type")

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> str:
        return pulumi.get(self, "worker_type")


