# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExternalFeedCreateReleaseTriggerArgs', 'ExternalFeedCreateReleaseTrigger']

@pulumi.input_type
class ExternalFeedCreateReleaseTriggerArgs:
    def __init__(__self__, *,
                 channel_id: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]]] = None,
                 primary_packages: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExternalFeedCreateReleaseTrigger resource.
        :param pulumi.Input[str] channel_id: The ID of the channel in which the release will be created if the action type is CreateRelease.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[bool] is_disabled: Disables the trigger from being run when set.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]] packages: List of referenced packages that will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]] primary_packages: List of deployment actions for which the primary packages will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[str] space_id: The space ID associated with the project to attach the trigger.
        """
        pulumi.set(__self__, "channel_id", channel_id)
        pulumi.set(__self__, "project_id", project_id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_packages is not None:
            pulumi.set(__self__, "primary_packages", primary_packages)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Input[str]:
        """
        The ID of the channel in which the release will be created if the action type is CreateRelease.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Disables the trigger from being run when set.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]]]:
        """
        List of referenced packages that will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackages")
    def primary_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]]:
        """
        List of deployment actions for which the primary packages will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        """
        return pulumi.get(self, "primary_packages")

    @primary_packages.setter
    def primary_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]]):
        pulumi.set(self, "primary_packages", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with the project to attach the trigger.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


@pulumi.input_type
class _ExternalFeedCreateReleaseTriggerState:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]]] = None,
                 primary_packages: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExternalFeedCreateReleaseTrigger resources.
        :param pulumi.Input[str] channel_id: The ID of the channel in which the release will be created if the action type is CreateRelease.
        :param pulumi.Input[bool] is_disabled: Disables the trigger from being run when set.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]] packages: List of referenced packages that will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]] primary_packages: List of deployment actions for which the primary packages will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[str] space_id: The space ID associated with the project to attach the trigger.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_packages is not None:
            pulumi.set(__self__, "primary_packages", primary_packages)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the channel in which the release will be created if the action type is CreateRelease.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Disables the trigger from being run when set.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]]]:
        """
        List of referenced packages that will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackages")
    def primary_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]]:
        """
        List of deployment actions for which the primary packages will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        """
        return pulumi.get(self, "primary_packages")

    @primary_packages.setter
    def primary_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]]):
        pulumi.set(self, "primary_packages", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        """
        The space ID associated with the project to attach the trigger.
        """
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)


class ExternalFeedCreateReleaseTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPackageArgs']]]]] = None,
                 primary_packages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages External feed triggers (release creation type) in Octopus Deploy.

        ## Import

        ```sh
        $ pulumi import octopusdeploy:index/externalFeedCreateReleaseTrigger:ExternalFeedCreateReleaseTrigger [options] octopusdeploy_external_feed_create_release_trigger.<name> <trigger-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: The ID of the channel in which the release will be created if the action type is CreateRelease.
        :param pulumi.Input[bool] is_disabled: Disables the trigger from being run when set.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPackageArgs']]]] packages: List of referenced packages that will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]] primary_packages: List of deployment actions for which the primary packages will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[str] space_id: The space ID associated with the project to attach the trigger.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalFeedCreateReleaseTriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages External feed triggers (release creation type) in Octopus Deploy.

        ## Import

        ```sh
        $ pulumi import octopusdeploy:index/externalFeedCreateReleaseTrigger:ExternalFeedCreateReleaseTrigger [options] octopusdeploy_external_feed_create_release_trigger.<name> <trigger-id>
        ```

        :param str resource_name: The name of the resource.
        :param ExternalFeedCreateReleaseTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalFeedCreateReleaseTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPackageArgs']]]]] = None,
                 primary_packages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalFeedCreateReleaseTriggerArgs.__new__(ExternalFeedCreateReleaseTriggerArgs)

            if channel_id is None and not opts.urn:
                raise TypeError("Missing required property 'channel_id'")
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["is_disabled"] = is_disabled
            __props__.__dict__["name"] = name
            __props__.__dict__["packages"] = packages
            __props__.__dict__["primary_packages"] = primary_packages
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["space_id"] = space_id
        super(ExternalFeedCreateReleaseTrigger, __self__).__init__(
            'octopusdeploy:index/externalFeedCreateReleaseTrigger:ExternalFeedCreateReleaseTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            is_disabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            packages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPackageArgs']]]]] = None,
            primary_packages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            space_id: Optional[pulumi.Input[str]] = None) -> 'ExternalFeedCreateReleaseTrigger':
        """
        Get an existing ExternalFeedCreateReleaseTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: The ID of the channel in which the release will be created if the action type is CreateRelease.
        :param pulumi.Input[bool] is_disabled: Disables the trigger from being run when set.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPackageArgs']]]] packages: List of referenced packages that will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExternalFeedCreateReleaseTriggerPrimaryPackageArgs']]]] primary_packages: List of deployment actions for which the primary packages will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        :param pulumi.Input[str] project_id: The ID of the project to attach the trigger.
        :param pulumi.Input[str] space_id: The space ID associated with the project to attach the trigger.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalFeedCreateReleaseTriggerState.__new__(_ExternalFeedCreateReleaseTriggerState)

        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["is_disabled"] = is_disabled
        __props__.__dict__["name"] = name
        __props__.__dict__["packages"] = packages
        __props__.__dict__["primary_packages"] = primary_packages
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["space_id"] = space_id
        return ExternalFeedCreateReleaseTrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[str]:
        """
        The ID of the channel in which the release will be created if the action type is CreateRelease.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Disables the trigger from being run when set.
        """
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def packages(self) -> pulumi.Output[Optional[Sequence['outputs.ExternalFeedCreateReleaseTriggerPackage']]]:
        """
        List of referenced packages that will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        """
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="primaryPackages")
    def primary_packages(self) -> pulumi.Output[Optional[Sequence['outputs.ExternalFeedCreateReleaseTriggerPrimaryPackage']]]:
        """
        List of deployment actions for which the primary packages will cause the trigger to fire. New versions of any of the packages you select will trigger release creation.
        """
        return pulumi.get(self, "primary_packages")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The ID of the project to attach the trigger.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[Optional[str]]:
        """
        The space ID associated with the project to attach the trigger.
        """
        return pulumi.get(self, "space_id")

