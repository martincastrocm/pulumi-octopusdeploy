# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PollingSubscriptionIdArgs', 'PollingSubscriptionId']

@pulumi.input_type
class PollingSubscriptionIdArgs:
    def __init__(__self__, *,
                 dependencies: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a PollingSubscriptionId resource.
        :param pulumi.Input[Mapping[str, Any]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "dependencies", value)


@pulumi.input_type
class _PollingSubscriptionIdState:
    def __init__(__self__, *,
                 dependencies: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 polling_uri: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PollingSubscriptionId resources.
        :param pulumi.Input[Mapping[str, Any]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        :param pulumi.Input[str] polling_uri: The URI of the polling subscription ID.
        """
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if polling_uri is not None:
            pulumi.set(__self__, "polling_uri", polling_uri)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter(name="pollingUri")
    def polling_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the polling subscription ID.
        """
        return pulumi.get(self, "polling_uri")

    @polling_uri.setter
    def polling_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_uri", value)


class PollingSubscriptionId(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dependencies: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        A unique polling subscription ID that can be used by polling tentacles.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.PollingSubscriptionId("example")
        example_with_dependencies = octopusdeploy.PollingSubscriptionId("exampleWithDependencies", dependencies={
            "target": octopusdeploy_kubernetes_agent_deployment_target["example"]["id"],
        })
        # Usage
        agent = octopusdeploy.KubernetesAgentDeploymentTarget("agent",
            environments=["environments-1"],
            roles=[
                "role-1",
                "role-2",
            ],
            thumbprint="96203ED84246201C26A2F4360D7CBC36AC1D232D",
            uri=example_with_dependencies.polling_uri)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PollingSubscriptionIdArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A unique polling subscription ID that can be used by polling tentacles.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_octopusdeploy as octopusdeploy

        example = octopusdeploy.PollingSubscriptionId("example")
        example_with_dependencies = octopusdeploy.PollingSubscriptionId("exampleWithDependencies", dependencies={
            "target": octopusdeploy_kubernetes_agent_deployment_target["example"]["id"],
        })
        # Usage
        agent = octopusdeploy.KubernetesAgentDeploymentTarget("agent",
            environments=["environments-1"],
            roles=[
                "role-1",
                "role-2",
            ],
            thumbprint="96203ED84246201C26A2F4360D7CBC36AC1D232D",
            uri=example_with_dependencies.polling_uri)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param PollingSubscriptionIdArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PollingSubscriptionIdArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dependencies: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PollingSubscriptionIdArgs.__new__(PollingSubscriptionIdArgs)

            __props__.__dict__["dependencies"] = dependencies
            __props__.__dict__["polling_uri"] = None
        super(PollingSubscriptionId, __self__).__init__(
            'octopusdeploy:index/pollingSubscriptionId:PollingSubscriptionId',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dependencies: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            polling_uri: Optional[pulumi.Input[str]] = None) -> 'PollingSubscriptionId':
        """
        Get an existing PollingSubscriptionId resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        :param pulumi.Input[str] polling_uri: The URI of the polling subscription ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PollingSubscriptionIdState.__new__(_PollingSubscriptionIdState)

        __props__.__dict__["dependencies"] = dependencies
        __props__.__dict__["polling_uri"] = polling_uri
        return PollingSubscriptionId(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def dependencies(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter(name="pollingUri")
    def polling_uri(self) -> pulumi.Output[str]:
        """
        The URI of the polling subscription ID.
        """
        return pulumi.get(self, "polling_uri")

