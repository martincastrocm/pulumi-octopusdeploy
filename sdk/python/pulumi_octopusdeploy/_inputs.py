# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AzureCloudServiceDeploymentTargetEndpointArgs',
    'AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs',
    'AzureCloudServiceDeploymentTargetEndpointContainerArgs',
    'AzureCloudServiceDeploymentTargetEndpointDestinationArgs',
    'AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs',
    'AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs',
    'AzureWebAppDeploymentTargetEndpointArgs',
    'AzureWebAppDeploymentTargetEndpointAuthenticationArgs',
    'AzureWebAppDeploymentTargetEndpointContainerArgs',
    'AzureWebAppDeploymentTargetEndpointDestinationArgs',
    'AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs',
    'ChannelRuleArgs',
    'ChannelRuleActionPackageArgs',
    'CloudRegionDeploymentTargetEndpointArgs',
    'CloudRegionDeploymentTargetEndpointAuthenticationArgs',
    'CloudRegionDeploymentTargetEndpointContainerArgs',
    'CloudRegionDeploymentTargetEndpointDestinationArgs',
    'CloudRegionDeploymentTargetEndpointTentacleVersionDetailArgs',
    'DeploymentProcessStepArgs',
    'DeploymentProcessStepActionArgs',
    'DeploymentProcessStepActionActionTemplateArgs',
    'DeploymentProcessStepActionContainerArgs',
    'DeploymentProcessStepActionGitDependencyArgs',
    'DeploymentProcessStepActionPackageArgs',
    'DeploymentProcessStepActionPrimaryPackageArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionContainerArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionGitDependencyArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionPackageArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs',
    'DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionContainerArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionGitDependencyArgs',
    'DeploymentProcessStepDeployKubernetesSecretActionPackageArgs',
    'DeploymentProcessStepDeployPackageActionArgs',
    'DeploymentProcessStepDeployPackageActionActionTemplateArgs',
    'DeploymentProcessStepDeployPackageActionContainerArgs',
    'DeploymentProcessStepDeployPackageActionGitDependencyArgs',
    'DeploymentProcessStepDeployPackageActionPackageArgs',
    'DeploymentProcessStepDeployPackageActionPrimaryPackageArgs',
    'DeploymentProcessStepDeployPackageActionWindowsServiceArgs',
    'DeploymentProcessStepDeployWindowsServiceActionArgs',
    'DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs',
    'DeploymentProcessStepDeployWindowsServiceActionContainerArgs',
    'DeploymentProcessStepDeployWindowsServiceActionGitDependencyArgs',
    'DeploymentProcessStepDeployWindowsServiceActionPackageArgs',
    'DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs',
    'DeploymentProcessStepManualInterventionActionArgs',
    'DeploymentProcessStepManualInterventionActionActionTemplateArgs',
    'DeploymentProcessStepManualInterventionActionContainerArgs',
    'DeploymentProcessStepManualInterventionActionGitDependencyArgs',
    'DeploymentProcessStepManualInterventionActionPackageArgs',
    'DeploymentProcessStepRunKubectlScriptActionArgs',
    'DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs',
    'DeploymentProcessStepRunKubectlScriptActionContainerArgs',
    'DeploymentProcessStepRunKubectlScriptActionGitDependencyArgs',
    'DeploymentProcessStepRunKubectlScriptActionPackageArgs',
    'DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs',
    'DeploymentProcessStepRunScriptActionArgs',
    'DeploymentProcessStepRunScriptActionActionTemplateArgs',
    'DeploymentProcessStepRunScriptActionContainerArgs',
    'DeploymentProcessStepRunScriptActionGitDependencyArgs',
    'DeploymentProcessStepRunScriptActionPackageArgs',
    'DeploymentProcessStepRunScriptActionPrimaryPackageArgs',
    'ExternalFeedCreateReleaseTriggerPackageArgs',
    'ExternalFeedCreateReleaseTriggerPrimaryPackageArgs',
    'KubernetesClusterDeploymentTargetAuthenticationArgs',
    'KubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs',
    'KubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs',
    'KubernetesClusterDeploymentTargetCertificateAuthenticationArgs',
    'KubernetesClusterDeploymentTargetContainerArgs',
    'KubernetesClusterDeploymentTargetEndpointArgs',
    'KubernetesClusterDeploymentTargetEndpointAuthenticationArgs',
    'KubernetesClusterDeploymentTargetEndpointContainerArgs',
    'KubernetesClusterDeploymentTargetEndpointDestinationArgs',
    'KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs',
    'KubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs',
    'KubernetesClusterDeploymentTargetPodAuthenticationArgs',
    'ListeningTentacleDeploymentTargetTentacleVersionDetailArgs',
    'MachinePolicyMachineCleanupPolicyArgs',
    'MachinePolicyMachineConnectivityPolicyArgs',
    'MachinePolicyMachineHealthCheckPolicyArgs',
    'MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs',
    'MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs',
    'MachinePolicyMachineUpdatePolicyArgs',
    'OfflinePackageDropDeploymentTargetDestinationArgs',
    'OfflinePackageDropDeploymentTargetEndpointArgs',
    'OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs',
    'OfflinePackageDropDeploymentTargetEndpointContainerArgs',
    'OfflinePackageDropDeploymentTargetEndpointDestinationArgs',
    'OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs',
    'PollingTentacleDeploymentTargetEndpointArgs',
    'PollingTentacleDeploymentTargetEndpointAuthenticationArgs',
    'PollingTentacleDeploymentTargetEndpointContainerArgs',
    'PollingTentacleDeploymentTargetEndpointDestinationArgs',
    'PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs',
    'PollingTentacleDeploymentTargetTentacleVersionDetailArgs',
    'ProjectScheduledTriggerContinuousDailyScheduleArgs',
    'ProjectScheduledTriggerCronExpressionScheduleArgs',
    'ProjectScheduledTriggerDaysPerMonthScheduleArgs',
    'ProjectScheduledTriggerDeployLatestReleaseActionArgs',
    'ProjectScheduledTriggerDeployNewReleaseActionArgs',
    'ProjectScheduledTriggerOnceDailyScheduleArgs',
    'ProjectScheduledTriggerRunRunbookActionArgs',
    'RunbookProcessStepArgs',
    'RunbookProcessStepActionArgs',
    'RunbookProcessStepActionActionTemplateArgs',
    'RunbookProcessStepActionContainerArgs',
    'RunbookProcessStepActionGitDependencyArgs',
    'RunbookProcessStepActionPackageArgs',
    'RunbookProcessStepActionPrimaryPackageArgs',
    'RunbookProcessStepApplyTerraformTemplateActionArgs',
    'RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs',
    'RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs',
    'RunbookProcessStepApplyTerraformTemplateActionContainerArgs',
    'RunbookProcessStepApplyTerraformTemplateActionGitDependencyArgs',
    'RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs',
    'RunbookProcessStepApplyTerraformTemplateActionPackageArgs',
    'RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs',
    'RunbookProcessStepApplyTerraformTemplateActionTemplateArgs',
    'RunbookProcessStepDeployKubernetesSecretActionArgs',
    'RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs',
    'RunbookProcessStepDeployKubernetesSecretActionContainerArgs',
    'RunbookProcessStepDeployKubernetesSecretActionGitDependencyArgs',
    'RunbookProcessStepDeployKubernetesSecretActionPackageArgs',
    'RunbookProcessStepDeployPackageActionArgs',
    'RunbookProcessStepDeployPackageActionActionTemplateArgs',
    'RunbookProcessStepDeployPackageActionContainerArgs',
    'RunbookProcessStepDeployPackageActionGitDependencyArgs',
    'RunbookProcessStepDeployPackageActionPackageArgs',
    'RunbookProcessStepDeployPackageActionPrimaryPackageArgs',
    'RunbookProcessStepDeployPackageActionWindowsServiceArgs',
    'RunbookProcessStepDeployWindowsServiceActionArgs',
    'RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs',
    'RunbookProcessStepDeployWindowsServiceActionContainerArgs',
    'RunbookProcessStepDeployWindowsServiceActionGitDependencyArgs',
    'RunbookProcessStepDeployWindowsServiceActionPackageArgs',
    'RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs',
    'RunbookProcessStepManualInterventionActionArgs',
    'RunbookProcessStepManualInterventionActionActionTemplateArgs',
    'RunbookProcessStepManualInterventionActionContainerArgs',
    'RunbookProcessStepManualInterventionActionGitDependencyArgs',
    'RunbookProcessStepManualInterventionActionPackageArgs',
    'RunbookProcessStepRunKubectlScriptActionArgs',
    'RunbookProcessStepRunKubectlScriptActionActionTemplateArgs',
    'RunbookProcessStepRunKubectlScriptActionContainerArgs',
    'RunbookProcessStepRunKubectlScriptActionGitDependencyArgs',
    'RunbookProcessStepRunKubectlScriptActionPackageArgs',
    'RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs',
    'RunbookProcessStepRunScriptActionArgs',
    'RunbookProcessStepRunScriptActionActionTemplateArgs',
    'RunbookProcessStepRunScriptActionContainerArgs',
    'RunbookProcessStepRunScriptActionGitDependencyArgs',
    'RunbookProcessStepRunScriptActionPackageArgs',
    'RunbookProcessStepRunScriptActionPrimaryPackageArgs',
    'SshConnectionDeploymentTargetEndpointArgs',
    'SshConnectionDeploymentTargetEndpointAuthenticationArgs',
    'SshConnectionDeploymentTargetEndpointContainerArgs',
    'SshConnectionDeploymentTargetEndpointDestinationArgs',
    'SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs',
    'TeamExternalSecurityGroupArgs',
    'TeamUserRoleArgs',
    'UserIdentityArgs',
    'UserIdentityClaimArgs',
]

@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class AzureCloudServiceDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class AzureServiceFabricClusterDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['AzureWebAppDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['AzureWebAppDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['AzureWebAppDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class AzureWebAppDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ChannelRuleArgs:
    def __init__(__self__, *,
                 action_packages: pulumi.Input[Sequence[pulumi.Input['ChannelRuleActionPackageArgs']]],
                 id: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "action_packages", action_packages)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter(name="actionPackages")
    def action_packages(self) -> pulumi.Input[Sequence[pulumi.Input['ChannelRuleActionPackageArgs']]]:
        return pulumi.get(self, "action_packages")

    @action_packages.setter
    def action_packages(self, value: pulumi.Input[Sequence[pulumi.Input['ChannelRuleActionPackageArgs']]]):
        pulumi.set(self, "action_packages", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class ChannelRuleActionPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[pulumi.Input[str]] = None,
                 package_reference: Optional[pulumi.Input[str]] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class CloudRegionDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['CloudRegionDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['CloudRegionDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['CloudRegionDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudRegionDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class CloudRegionDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class CloudRegionDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class CloudRegionDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class CloudRegionDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionArgs']]]] = None,
                 apply_terraform_template_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionArgs']]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 deploy_kubernetes_secret_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionArgs']]]] = None,
                 deploy_package_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionArgs']]]] = None,
                 deploy_windows_service_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 manual_intervention_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionArgs']]]] = None,
                 package_requirement: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 run_kubectl_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionArgs']]]] = None,
                 run_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionArgs']]]] = None,
                 start_trigger: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 window_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionArgs']]] apply_terraform_template_actions: (see below for nested schema)
        :param pulumi.Input[str] condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param pulumi.Input[str] condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[str] package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param pulumi.Input[str] start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_roles: The roles that this step run against, or runs on behalf of
        :param pulumi.Input[str] window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionArgs']]]]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "apply_terraform_template_actions")

    @apply_terraform_template_actions.setter
    def apply_terraform_template_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionArgs']]]]):
        pulumi.set(self, "apply_terraform_template_actions", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_expression", value)

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionArgs']]]]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @deploy_kubernetes_secret_actions.setter
    def deploy_kubernetes_secret_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionArgs']]]]):
        pulumi.set(self, "deploy_kubernetes_secret_actions", value)

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionArgs']]]]:
        return pulumi.get(self, "deploy_package_actions")

    @deploy_package_actions.setter
    def deploy_package_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionArgs']]]]):
        pulumi.set(self, "deploy_package_actions", value)

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionArgs']]]]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @deploy_windows_service_actions.setter
    def deploy_windows_service_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionArgs']]]]):
        pulumi.set(self, "deploy_windows_service_actions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionArgs']]]]:
        return pulumi.get(self, "manual_intervention_actions")

    @manual_intervention_actions.setter
    def manual_intervention_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionArgs']]]]):
        pulumi.set(self, "manual_intervention_actions", value)

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @package_requirement.setter
    def package_requirement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_requirement", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionArgs']]]]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @run_kubectl_script_actions.setter
    def run_kubectl_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionArgs']]]]):
        pulumi.set(self, "run_kubectl_script_actions", value)

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionArgs']]]]:
        return pulumi.get(self, "run_script_actions")

    @run_script_actions.setter
    def run_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionArgs']]]]):
        pulumi.set(self, "run_script_actions", value)

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @start_trigger.setter
    def start_trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_trigger", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window_size", value)


@pulumi.input_type
class DeploymentProcessStepActionArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action_type: The type of action
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['DeploymentProcessStepActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['DeploymentProcessStepActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        The type of action
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class DeploymentProcessStepActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[bool] extract_during_deployment: Whether to extract the package during deployment
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionArgs:
    def __init__(__self__, *,
                 advanced_options: pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs'],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs']] = None,
                 aws_account: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs']] = None,
                 azure_account: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGitDependencyArgs']] = None,
                 google_cloud_account: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 inline_template: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 template: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs']] = None,
                 template_parameters: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs'] aws_account: (see below for nested schema)
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs'] azure_account: (see below for nested schema)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs'] google_cloud_account: (see below for nested schema)
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs'] template: (see below for nested schema)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']:
        return pulumi.get(self, "advanced_options")

    @advanced_options.setter
    def advanced_options(self, value: pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']):
        pulumi.set(self, "advanced_options", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "aws_account")

    @aws_account.setter
    def aws_account(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs']]):
        pulumi.set(self, "aws_account", value)

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "azure_account")

    @azure_account.setter
    def azure_account(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs']]):
        pulumi.set(self, "azure_account", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "google_cloud_account")

    @google_cloud_account.setter
    def google_cloud_account(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]):
        pulumi.set(self, "google_cloud_account", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inline_template")

    @inline_template.setter
    def inline_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inline_template", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs']]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_parameters")

    @template_parameters.setter
    def template_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_parameters", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs:
    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[pulumi.Input[bool]] = None,
                 apply_parameters: Optional[pulumi.Input[str]] = None,
                 init_parameters: Optional[pulumi.Input[str]] = None,
                 plugin_cache_directory: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @allow_additional_plugin_downloads.setter
    def allow_additional_plugin_downloads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_additional_plugin_downloads", value)

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apply_parameters")

    @apply_parameters.setter
    def apply_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_parameters", value)

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "init_parameters")

    @init_parameters.setter
    def init_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_parameters", value)

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin_cache_directory")

    @plugin_cache_directory.setter
    def plugin_cache_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_cache_directory", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccountArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs'] role: (see below for nested schema)
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 role_session_name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_session_name")

    @role_session_name.setter
    def role_session_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_session_name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_duration", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionAzureAccountArgs:
    def __init__(__self__, *,
                 variable: Optional[pulumi.Input[str]] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs:
    def __init__(__self__, *,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] impersonate_service_account: Impersonate service accounts
        :param pulumi.Input[str] project: This sets GOOGLE_PROJECT environment variable
        :param pulumi.Input[str] region: This sets GOOGLE_REGION environment variable
        :param pulumi.Input[str] service_account_emails: This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        :param pulumi.Input[bool] use_vm_service_account: When running in a Compute Engine virtual machine, use the associated VM service account
        :param pulumi.Input[str] zone: This sets GOOGLE_ZONE environment variable
        """
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        """
        Impersonate service accounts
        """
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE_PROJECT environment variable
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE_REGION environment variable
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        """
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        """
        When running in a Compute Engine virtual machine, use the associated VM service account
        """
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE_ZONE environment variable
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepApplyTerraformTemplateActionTemplateArgs:
    def __init__(__self__, *,
                 additional_variable_files: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 run_automatic_file_substitution: Optional[pulumi.Input[bool]] = None,
                 target_files: Optional[pulumi.Input[str]] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_variable_files")

    @additional_variable_files.setter
    def additional_variable_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_variable_files", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @run_automatic_file_substitution.setter
    def run_automatic_file_substitution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_automatic_file_substitution", value)

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_files")

    @target_files.setter
    def target_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_files", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 secret_values: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 kubernetes_object_status_check_enabled: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] secret_name: The name of the secret resource
        :param pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[bool] kubernetes_object_status_check_enabled: Indicates the status of the Kubernetes Object Status feature
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if kubernetes_object_status_check_enabled is not None:
            pulumi.set(__self__, "kubernetes_object_status_check_enabled", kubernetes_object_status_check_enabled)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the secret resource
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "secret_values")

    @secret_values.setter
    def secret_values(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "secret_values", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter(name="kubernetesObjectStatusCheckEnabled")
    def kubernetes_object_status_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the status of the Kubernetes Object Status feature
        """
        return pulumi.get(self, "kubernetes_object_status_check_enabled")

    @kubernetes_object_status_check_enabled.setter
    def kubernetes_object_status_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubernetes_object_status_check_enabled", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployKubernetesSecretActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepDeployKubernetesSecretActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['DeploymentProcessStepDeployPackageActionPrimaryPackageArgs'],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 windows_service: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionWindowsServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['DeploymentProcessStepDeployPackageActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input['DeploymentProcessStepDeployPackageActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepDeployPackageActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input['DeploymentProcessStepDeployPackageActionWindowsServiceArgs'] windows_service: Deploy a windows service feature
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['DeploymentProcessStepDeployPackageActionPrimaryPackageArgs']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['DeploymentProcessStepDeployPackageActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployPackageActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionWindowsServiceArgs']]:
        """
        Deploy a windows service feature
        """
        return pulumi.get(self, "windows_service")

    @windows_service.setter
    def windows_service(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployPackageActionWindowsServiceArgs']]):
        pulumi.set(self, "windows_service", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployPackageActionWindowsServiceArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 arguments: Optional[pulumi.Input[str]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] executable_path: The path to the executable relative to the package installation directory
        :param pulumi.Input[str] service_name: The name of the service
        :param pulumi.Input[str] arguments: The command line arguments that will be passed to the service when it starts
        :param pulumi.Input[str] custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param pulumi.Input[str] custom_account_password: The password for the custom account
        :param pulumi.Input[str] dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param pulumi.Input[str] description: User-friendly description of the service (optional)
        :param pulumi.Input[str] display_name: The display name of the service (optional)
        :param pulumi.Input[str] service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param pulumi.Input[str] start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs'],
                 service_name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs']] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionContainerArgs']]]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] executable_path: The path to the executable relative to the package installation directory
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[str] service_name: The name of the service
        :param pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[str] arguments: The command line arguments that will be passed to the service when it starts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[str] custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param pulumi.Input[str] custom_account_password: The password for the custom account
        :param pulumi.Input[str] dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param pulumi.Input[str] description: User-friendly description of the service (optional)
        :param pulumi.Input[str] display_name: The display name of the service (optional)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[str] service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[str] start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepDeployWindowsServiceActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepDeployWindowsServiceActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionArgs:
    def __init__(__self__, *,
                 instructions: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 responsible_teams: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] instructions: The instructions for the user to follow
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['DeploymentProcessStepManualInterventionActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepManualInterventionActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[str] responsible_teams: The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> pulumi.Input[str]:
        """
        The instructions for the user to follow
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: pulumi.Input[str]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepManualInterventionActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepManualInterventionActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[pulumi.Input[str]]:
        """
        The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        """
        return pulumi.get(self, "responsible_teams")

    @responsible_teams.setter
    def responsible_teams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "responsible_teams", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepManualInterventionActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_body: Optional[pulumi.Input[str]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 script_syntax: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variable_substitution_in_files: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepRunKubectlScriptActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] script_file_name: The script file name in the package
        :param pulumi.Input[str] script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_syntax")

    @script_syntax.setter
    def script_syntax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_syntax", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[pulumi.Input[str]]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @variable_substitution_in_files.setter
    def variable_substitution_in_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_substitution_in_files", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[bool] extract_during_deployment: Whether to extract the package during deployment
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunKubectlScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_body: Optional[pulumi.Input[str]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 script_syntax: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variable_substitution_in_files: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['DeploymentProcessStepRunScriptActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['DeploymentProcessStepRunScriptActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['DeploymentProcessStepRunScriptActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] script_file_name: The script file name in the package
        :param pulumi.Input[str] script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
            pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['DeploymentProcessStepRunScriptActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['DeploymentProcessStepRunScriptActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentProcessStepRunScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['DeploymentProcessStepRunScriptActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['DeploymentProcessStepRunScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
        pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")

        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_syntax")

    @script_syntax.setter
    def script_syntax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_syntax", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[pulumi.Input[str]]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @variable_substitution_in_files.setter
    def variable_substitution_in_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_substitution_in_files", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[bool] extract_during_deployment: Whether to extract the package during deployment
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class DeploymentProcessStepRunScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class ExternalFeedCreateReleaseTriggerPackageArgs:
    def __init__(__self__, *,
                 deployment_action_slug: pulumi.Input[str],
                 package_reference: pulumi.Input[str]):
        pulumi.set(__self__, "deployment_action_slug", deployment_action_slug)
        pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentActionSlug")
    def deployment_action_slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_action_slug")

    @deployment_action_slug.setter
    def deployment_action_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_action_slug", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class ExternalFeedCreateReleaseTriggerPrimaryPackageArgs:
    def __init__(__self__, *,
                 deployment_action_slug: pulumi.Input[str]):
        pulumi.set(__self__, "deployment_action_slug", deployment_action_slug)

    @property
    @pulumi.getter(name="deploymentActionSlug")
    def deployment_action_slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_action_slug")

    @deployment_action_slug.setter
    def deployment_action_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_action_slug", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetAwsAccountAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetAzureServicePrincipalAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 cluster_resource_group: pulumi.Input[str]):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_resource_group", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetCertificateAuthenticationArgs:
    def __init__(__self__, *,
                 client_certificate: Optional[pulumi.Input[str]] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['KubernetesClusterDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['KubernetesClusterDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['KubernetesClusterDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetGcpAccountAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 project: pulumi.Input[str],
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "project", project)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class KubernetesClusterDeploymentTargetPodAuthenticationArgs:
    def __init__(__self__, *,
                 token_path: pulumi.Input[str]):
        pulumi.set(__self__, "token_path", token_path)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_path", value)


@pulumi.input_type
class ListeningTentacleDeploymentTargetTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MachinePolicyMachineCleanupPolicyArgs:
    def __init__(__self__, *,
                 delete_machines_behavior: Optional[pulumi.Input[str]] = None,
                 delete_machines_elapsed_timespan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] delete_machines_elapsed_timespan: In nanoseconds.
        """
        if delete_machines_behavior is not None:
            pulumi.set(__self__, "delete_machines_behavior", delete_machines_behavior)
        if delete_machines_elapsed_timespan is not None:
            pulumi.set(__self__, "delete_machines_elapsed_timespan", delete_machines_elapsed_timespan)

    @property
    @pulumi.getter(name="deleteMachinesBehavior")
    def delete_machines_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_machines_behavior")

    @delete_machines_behavior.setter
    def delete_machines_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_machines_behavior", value)

    @property
    @pulumi.getter(name="deleteMachinesElapsedTimespan")
    def delete_machines_elapsed_timespan(self) -> Optional[pulumi.Input[int]]:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "delete_machines_elapsed_timespan")

    @delete_machines_elapsed_timespan.setter
    def delete_machines_elapsed_timespan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_machines_elapsed_timespan", value)


@pulumi.input_type
class MachinePolicyMachineConnectivityPolicyArgs:
    def __init__(__self__, *,
                 machine_connectivity_behavior: Optional[pulumi.Input[str]] = None):
        if machine_connectivity_behavior is not None:
            pulumi.set(__self__, "machine_connectivity_behavior", machine_connectivity_behavior)

    @property
    @pulumi.getter(name="machineConnectivityBehavior")
    def machine_connectivity_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_connectivity_behavior")

    @machine_connectivity_behavior.setter
    def machine_connectivity_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_connectivity_behavior", value)


@pulumi.input_type
class MachinePolicyMachineHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 bash_health_check_policy: pulumi.Input['MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs'],
                 powershell_health_check_policy: pulumi.Input['MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs'],
                 health_check_cron: Optional[pulumi.Input[str]] = None,
                 health_check_cron_timezone: Optional[pulumi.Input[str]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] health_check_interval: In nanoseconds.
        """
        pulumi.set(__self__, "bash_health_check_policy", bash_health_check_policy)
        pulumi.set(__self__, "powershell_health_check_policy", powershell_health_check_policy)
        if health_check_cron is not None:
            pulumi.set(__self__, "health_check_cron", health_check_cron)
        if health_check_cron_timezone is not None:
            pulumi.set(__self__, "health_check_cron_timezone", health_check_cron_timezone)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)

    @property
    @pulumi.getter(name="bashHealthCheckPolicy")
    def bash_health_check_policy(self) -> pulumi.Input['MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs']:
        return pulumi.get(self, "bash_health_check_policy")

    @bash_health_check_policy.setter
    def bash_health_check_policy(self, value: pulumi.Input['MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs']):
        pulumi.set(self, "bash_health_check_policy", value)

    @property
    @pulumi.getter(name="powershellHealthCheckPolicy")
    def powershell_health_check_policy(self) -> pulumi.Input['MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs']:
        return pulumi.get(self, "powershell_health_check_policy")

    @powershell_health_check_policy.setter
    def powershell_health_check_policy(self, value: pulumi.Input['MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs']):
        pulumi.set(self, "powershell_health_check_policy", value)

    @property
    @pulumi.getter(name="healthCheckCron")
    def health_check_cron(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_cron")

    @health_check_cron.setter
    def health_check_cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_cron", value)

    @property
    @pulumi.getter(name="healthCheckCronTimezone")
    def health_check_cron_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_cron_timezone")

    @health_check_cron_timezone.setter
    def health_check_cron_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_cron_timezone", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[int]]:
        """
        In nanoseconds.
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)


@pulumi.input_type
class MachinePolicyMachineHealthCheckPolicyBashHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 run_type: Optional[pulumi.Input[str]] = None,
                 script_body: Optional[pulumi.Input[str]] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_type")

    @run_type.setter
    def run_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_type", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)


@pulumi.input_type
class MachinePolicyMachineHealthCheckPolicyPowershellHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 run_type: Optional[pulumi.Input[str]] = None,
                 script_body: Optional[pulumi.Input[str]] = None):
        if run_type is not None:
            pulumi.set(__self__, "run_type", run_type)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_type")

    @run_type.setter
    def run_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_type", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)


@pulumi.input_type
class MachinePolicyMachineUpdatePolicyArgs:
    def __init__(__self__, *,
                 calamari_update_behavior: Optional[pulumi.Input[str]] = None,
                 kubernetes_agent_update_behavior: Optional[pulumi.Input[str]] = None,
                 tentacle_update_account_id: Optional[pulumi.Input[str]] = None,
                 tentacle_update_behavior: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] calamari_update_behavior: The behaviour of how Calamari is updated. Valid values are `UpdateAlways`, `UpdateOnDeployment` and `UpdateOnNewMachine`.
        :param pulumi.Input[str] kubernetes_agent_update_behavior: The behaviour of how Kubernetes agent machines are updated. Valid values are `NeverUpdate` and `Update`.
        :param pulumi.Input[str] tentacle_update_account_id: The Account ID to perform any Tentacle updates under.
        :param pulumi.Input[str] tentacle_update_behavior: The behaviour of how Tentacle machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        if calamari_update_behavior is not None:
            pulumi.set(__self__, "calamari_update_behavior", calamari_update_behavior)
        if kubernetes_agent_update_behavior is not None:
            pulumi.set(__self__, "kubernetes_agent_update_behavior", kubernetes_agent_update_behavior)
        if tentacle_update_account_id is not None:
            pulumi.set(__self__, "tentacle_update_account_id", tentacle_update_account_id)
        if tentacle_update_behavior is not None:
            pulumi.set(__self__, "tentacle_update_behavior", tentacle_update_behavior)

    @property
    @pulumi.getter(name="calamariUpdateBehavior")
    def calamari_update_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The behaviour of how Calamari is updated. Valid values are `UpdateAlways`, `UpdateOnDeployment` and `UpdateOnNewMachine`.
        """
        return pulumi.get(self, "calamari_update_behavior")

    @calamari_update_behavior.setter
    def calamari_update_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "calamari_update_behavior", value)

    @property
    @pulumi.getter(name="kubernetesAgentUpdateBehavior")
    def kubernetes_agent_update_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The behaviour of how Kubernetes agent machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        return pulumi.get(self, "kubernetes_agent_update_behavior")

    @kubernetes_agent_update_behavior.setter
    def kubernetes_agent_update_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_agent_update_behavior", value)

    @property
    @pulumi.getter(name="tentacleUpdateAccountId")
    def tentacle_update_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Account ID to perform any Tentacle updates under.
        """
        return pulumi.get(self, "tentacle_update_account_id")

    @tentacle_update_account_id.setter
    def tentacle_update_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tentacle_update_account_id", value)

    @property
    @pulumi.getter(name="tentacleUpdateBehavior")
    def tentacle_update_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The behaviour of how Tentacle machines are updated. Valid values are `NeverUpdate` and `Update`.
        """
        return pulumi.get(self, "tentacle_update_behavior")

    @tentacle_update_behavior.setter
    def tentacle_update_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tentacle_update_behavior", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class OfflinePackageDropDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['PollingTentacleDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['PollingTentacleDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['PollingTentacleDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PollingTentacleDeploymentTargetTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ProjectScheduledTriggerContinuousDailyScheduleArgs:
    def __init__(__self__, *,
                 days_of_weeks: pulumi.Input[Sequence[pulumi.Input[str]]],
                 interval: pulumi.Input[str],
                 run_after: pulumi.Input[str],
                 run_until: pulumi.Input[str],
                 hour_interval: Optional[pulumi.Input[int]] = None,
                 minute_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] days_of_weeks: The days of the week to run the trigger.
        :param pulumi.Input[str] interval: The interval in minutes to run the trigger.
        :param pulumi.Input[str] run_after: The time of day to start the trigger.
        :param pulumi.Input[str] run_until: The time of day to end the trigger.
        :param pulumi.Input[int] hour_interval: How often to run the trigger in hours. Only used when the interval is set to 'OnceHourly'.
        :param pulumi.Input[int] minute_interval: How often to run the trigger in minutes. Only used when the interval is set to 'OnceEveryMinute'.
        """
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "run_after", run_after)
        pulumi.set(__self__, "run_until", run_until)
        if hour_interval is not None:
            pulumi.set(__self__, "hour_interval", hour_interval)
        if minute_interval is not None:
            pulumi.set(__self__, "minute_interval", minute_interval)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The days of the week to run the trigger.
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "days_of_weeks", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[str]:
        """
        The interval in minutes to run the trigger.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="runAfter")
    def run_after(self) -> pulumi.Input[str]:
        """
        The time of day to start the trigger.
        """
        return pulumi.get(self, "run_after")

    @run_after.setter
    def run_after(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_after", value)

    @property
    @pulumi.getter(name="runUntil")
    def run_until(self) -> pulumi.Input[str]:
        """
        The time of day to end the trigger.
        """
        return pulumi.get(self, "run_until")

    @run_until.setter
    def run_until(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_until", value)

    @property
    @pulumi.getter(name="hourInterval")
    def hour_interval(self) -> Optional[pulumi.Input[int]]:
        """
        How often to run the trigger in hours. Only used when the interval is set to 'OnceHourly'.
        """
        return pulumi.get(self, "hour_interval")

    @hour_interval.setter
    def hour_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour_interval", value)

    @property
    @pulumi.getter(name="minuteInterval")
    def minute_interval(self) -> Optional[pulumi.Input[int]]:
        """
        How often to run the trigger in minutes. Only used when the interval is set to 'OnceEveryMinute'.
        """
        return pulumi.get(self, "minute_interval")

    @minute_interval.setter
    def minute_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minute_interval", value)


@pulumi.input_type
class ProjectScheduledTriggerCronExpressionScheduleArgs:
    def __init__(__self__, *,
                 cron_expression: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cron_expression: The cron expression for the schedule.
        """
        pulumi.set(__self__, "cron_expression", cron_expression)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> pulumi.Input[str]:
        """
        The cron expression for the schedule.
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "cron_expression", value)


@pulumi.input_type
class ProjectScheduledTriggerDaysPerMonthScheduleArgs:
    def __init__(__self__, *,
                 monthly_schedule_type: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 date_of_month: Optional[pulumi.Input[str]] = None,
                 day_number_of_month: Optional[pulumi.Input[str]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] monthly_schedule_type: The type of monthly schedule to run the trigger
        :param pulumi.Input[str] start_time: The time of day to start the trigger.
        :param pulumi.Input[str] date_of_month: Which date of the month to run the trigger. String number between 1 - 31 Incl. or L for the last day of the month.
        :param pulumi.Input[str] day_number_of_month: Which ordinal day of the week to run the trigger on. String number between 1 - 4 Incl. or L for the last occurrence of day*of*week for the month.
        :param pulumi.Input[str] day_of_week: Which day of the week to run the trigger on. Required when monthly*schedule*type is set to 'DayOfMonth'.
        """
        pulumi.set(__self__, "monthly_schedule_type", monthly_schedule_type)
        pulumi.set(__self__, "start_time", start_time)
        if date_of_month is not None:
            pulumi.set(__self__, "date_of_month", date_of_month)
        if day_number_of_month is not None:
            pulumi.set(__self__, "day_number_of_month", day_number_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter(name="monthlyScheduleType")
    def monthly_schedule_type(self) -> pulumi.Input[str]:
        """
        The type of monthly schedule to run the trigger
        """
        return pulumi.get(self, "monthly_schedule_type")

    @monthly_schedule_type.setter
    def monthly_schedule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "monthly_schedule_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        The time of day to start the trigger.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="dateOfMonth")
    def date_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        Which date of the month to run the trigger. String number between 1 - 31 Incl. or L for the last day of the month.
        """
        return pulumi.get(self, "date_of_month")

    @date_of_month.setter
    def date_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_of_month", value)

    @property
    @pulumi.getter(name="dayNumberOfMonth")
    def day_number_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        Which ordinal day of the week to run the trigger on. String number between 1 - 4 Incl. or L for the last occurrence of day*of*week for the month.
        """
        return pulumi.get(self, "day_number_of_month")

    @day_number_of_month.setter
    def day_number_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_number_of_month", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        Which day of the week to run the trigger on. Required when monthly*schedule*type is set to 'DayOfMonth'.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)


@pulumi.input_type
class ProjectScheduledTriggerDeployLatestReleaseActionArgs:
    def __init__(__self__, *,
                 destination_environment_id: pulumi.Input[str],
                 source_environment_id: pulumi.Input[str],
                 should_redeploy: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] destination_environment_id: The environment ID to deploy the selected release to.
        :param pulumi.Input[str] source_environment_id: The environment ID to use when selecting the release to deploy from.
        :param pulumi.Input[bool] should_redeploy: Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        pulumi.set(__self__, "destination_environment_id", destination_environment_id)
        pulumi.set(__self__, "source_environment_id", source_environment_id)
        if should_redeploy is not None:
            pulumi.set(__self__, "should_redeploy", should_redeploy)

    @property
    @pulumi.getter(name="destinationEnvironmentId")
    def destination_environment_id(self) -> pulumi.Input[str]:
        """
        The environment ID to deploy the selected release to.
        """
        return pulumi.get(self, "destination_environment_id")

    @destination_environment_id.setter
    def destination_environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_environment_id", value)

    @property
    @pulumi.getter(name="sourceEnvironmentId")
    def source_environment_id(self) -> pulumi.Input[str]:
        """
        The environment ID to use when selecting the release to deploy from.
        """
        return pulumi.get(self, "source_environment_id")

    @source_environment_id.setter
    def source_environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_environment_id", value)

    @property
    @pulumi.getter(name="shouldRedeploy")
    def should_redeploy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to re-deploy to the deployment targets even if they are already up-to-date with the current deployment.
        """
        return pulumi.get(self, "should_redeploy")

    @should_redeploy.setter
    def should_redeploy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_redeploy", value)


@pulumi.input_type
class ProjectScheduledTriggerDeployNewReleaseActionArgs:
    def __init__(__self__, *,
                 destination_environment_id: pulumi.Input[str],
                 git_reference: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination_environment_id: The environment ID to deploy the selected release to.
        :param pulumi.Input[str] git_reference: The git reference to use when creating the release. Can be a branch, tag, or commit hash.
        """
        pulumi.set(__self__, "destination_environment_id", destination_environment_id)
        if git_reference is not None:
            pulumi.set(__self__, "git_reference", git_reference)

    @property
    @pulumi.getter(name="destinationEnvironmentId")
    def destination_environment_id(self) -> pulumi.Input[str]:
        """
        The environment ID to deploy the selected release to.
        """
        return pulumi.get(self, "destination_environment_id")

    @destination_environment_id.setter
    def destination_environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_environment_id", value)

    @property
    @pulumi.getter(name="gitReference")
    def git_reference(self) -> Optional[pulumi.Input[str]]:
        """
        The git reference to use when creating the release. Can be a branch, tag, or commit hash.
        """
        return pulumi.get(self, "git_reference")

    @git_reference.setter
    def git_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_reference", value)


@pulumi.input_type
class ProjectScheduledTriggerOnceDailyScheduleArgs:
    def __init__(__self__, *,
                 days_of_weeks: pulumi.Input[Sequence[pulumi.Input[str]]],
                 start_time: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] days_of_weeks: The days of the week to run the trigger.
        :param pulumi.Input[str] start_time: The time of day to start the trigger.
        """
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The days of the week to run the trigger.
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "days_of_weeks", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        The time of day to start the trigger.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class ProjectScheduledTriggerRunRunbookActionArgs:
    def __init__(__self__, *,
                 runbook_id: pulumi.Input[str],
                 target_environment_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] runbook_id: The ID of the runbook to run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_environment_ids: The IDs of the environments to run the runbook in.
        """
        pulumi.set(__self__, "runbook_id", runbook_id)
        pulumi.set(__self__, "target_environment_ids", target_environment_ids)

    @property
    @pulumi.getter(name="runbookId")
    def runbook_id(self) -> pulumi.Input[str]:
        """
        The ID of the runbook to run.
        """
        return pulumi.get(self, "runbook_id")

    @runbook_id.setter
    def runbook_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "runbook_id", value)

    @property
    @pulumi.getter(name="targetEnvironmentIds")
    def target_environment_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The IDs of the environments to run the runbook in.
        """
        return pulumi.get(self, "target_environment_ids")

    @target_environment_ids.setter
    def target_environment_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "target_environment_ids", value)


@pulumi.input_type
class RunbookProcessStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionArgs']]]] = None,
                 apply_terraform_template_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionArgs']]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 deploy_kubernetes_secret_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionArgs']]]] = None,
                 deploy_package_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionArgs']]]] = None,
                 deploy_windows_service_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 manual_intervention_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionArgs']]]] = None,
                 package_requirement: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 run_kubectl_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionArgs']]]] = None,
                 run_script_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionArgs']]]] = None,
                 start_trigger: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 window_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionArgs']]] apply_terraform_template_actions: (see below for nested schema)
        :param pulumi.Input[str] condition: When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        :param pulumi.Input[str] condition_expression: The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[str] package_requirement: Whether to run this step before or after package acquisition (if possible)
        :param pulumi.Input[str] start_trigger: Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_roles: The roles that this step run against, or runs on behalf of
        :param pulumi.Input[str] window_size: The maximum number of targets to deploy to simultaneously
        """
        pulumi.set(__self__, "name", name)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if apply_terraform_template_actions is not None:
            pulumi.set(__self__, "apply_terraform_template_actions", apply_terraform_template_actions)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if deploy_kubernetes_secret_actions is not None:
            pulumi.set(__self__, "deploy_kubernetes_secret_actions", deploy_kubernetes_secret_actions)
        if deploy_package_actions is not None:
            pulumi.set(__self__, "deploy_package_actions", deploy_package_actions)
        if deploy_windows_service_actions is not None:
            pulumi.set(__self__, "deploy_windows_service_actions", deploy_windows_service_actions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manual_intervention_actions is not None:
            pulumi.set(__self__, "manual_intervention_actions", manual_intervention_actions)
        if package_requirement is not None:
            pulumi.set(__self__, "package_requirement", package_requirement)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_kubectl_script_actions is not None:
            pulumi.set(__self__, "run_kubectl_script_actions", run_kubectl_script_actions)
        if run_script_actions is not None:
            pulumi.set(__self__, "run_script_actions", run_script_actions)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="applyTerraformTemplateActions")
    def apply_terraform_template_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionArgs']]]]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "apply_terraform_template_actions")

    @apply_terraform_template_actions.setter
    def apply_terraform_template_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionArgs']]]]):
        pulumi.set(self, "apply_terraform_template_actions", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        When to run the step, one of 'Success', 'Failure', 'Always' or 'Variable'
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression to evaluate to determine whether to run this step when 'condition' is 'Variable'
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_expression", value)

    @property
    @pulumi.getter(name="deployKubernetesSecretActions")
    def deploy_kubernetes_secret_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionArgs']]]]:
        return pulumi.get(self, "deploy_kubernetes_secret_actions")

    @deploy_kubernetes_secret_actions.setter
    def deploy_kubernetes_secret_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionArgs']]]]):
        pulumi.set(self, "deploy_kubernetes_secret_actions", value)

    @property
    @pulumi.getter(name="deployPackageActions")
    def deploy_package_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionArgs']]]]:
        return pulumi.get(self, "deploy_package_actions")

    @deploy_package_actions.setter
    def deploy_package_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionArgs']]]]):
        pulumi.set(self, "deploy_package_actions", value)

    @property
    @pulumi.getter(name="deployWindowsServiceActions")
    def deploy_windows_service_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionArgs']]]]:
        return pulumi.get(self, "deploy_windows_service_actions")

    @deploy_windows_service_actions.setter
    def deploy_windows_service_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionArgs']]]]):
        pulumi.set(self, "deploy_windows_service_actions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="manualInterventionActions")
    def manual_intervention_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionArgs']]]]:
        return pulumi.get(self, "manual_intervention_actions")

    @manual_intervention_actions.setter
    def manual_intervention_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionArgs']]]]):
        pulumi.set(self, "manual_intervention_actions", value)

    @property
    @pulumi.getter(name="packageRequirement")
    def package_requirement(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step before or after package acquisition (if possible)
        """
        return pulumi.get(self, "package_requirement")

    @package_requirement.setter
    def package_requirement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_requirement", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runKubectlScriptActions")
    def run_kubectl_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionArgs']]]]:
        return pulumi.get(self, "run_kubectl_script_actions")

    @run_kubectl_script_actions.setter
    def run_kubectl_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionArgs']]]]):
        pulumi.set(self, "run_kubectl_script_actions", value)

    @property
    @pulumi.getter(name="runScriptActions")
    def run_script_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionArgs']]]]:
        return pulumi.get(self, "run_script_actions")

    @run_script_actions.setter
    def run_script_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionArgs']]]]):
        pulumi.set(self, "run_script_actions", value)

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run this step after the previous step ('StartAfterPrevious') or at the same time as the previous step ('StartWithPrevious')
        """
        return pulumi.get(self, "start_trigger")

    @start_trigger.setter
    def start_trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_trigger", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles that this step run against, or runs on behalf of
        """
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)

    @property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of targets to deploy to simultaneously
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window_size", value)


@pulumi.input_type
class RunbookProcessStepActionArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action_type: The type of action
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['RunbookProcessStepActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['RunbookProcessStepActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        The type of action
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class RunbookProcessStepActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[bool] extract_during_deployment: Whether to extract the package during deployment
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionArgs:
    def __init__(__self__, *,
                 advanced_options: pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs'],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs']] = None,
                 aws_account: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs']] = None,
                 azure_account: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGitDependencyArgs']] = None,
                 google_cloud_account: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 inline_template: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 template: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionTemplateArgs']] = None,
                 template_parameters: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs'] aws_account: (see below for nested schema)
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs'] azure_account: (see below for nested schema)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs'] google_cloud_account: (see below for nested schema)
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionTemplateArgs'] template: (see below for nested schema)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "advanced_options", advanced_options)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if aws_account is not None:
            pulumi.set(__self__, "aws_account", aws_account)
        if azure_account is not None:
            pulumi.set(__self__, "azure_account", azure_account)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if google_cloud_account is not None:
            pulumi.set(__self__, "google_cloud_account", google_cloud_account)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inline_template is not None:
            pulumi.set(__self__, "inline_template", inline_template)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if template_parameters is not None:
            pulumi.set(__self__, "template_parameters", template_parameters)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']:
        return pulumi.get(self, "advanced_options")

    @advanced_options.setter
    def advanced_options(self, value: pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs']):
        pulumi.set(self, "advanced_options", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="awsAccount")
    def aws_account(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "aws_account")

    @aws_account.setter
    def aws_account(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs']]):
        pulumi.set(self, "aws_account", value)

    @property
    @pulumi.getter(name="azureAccount")
    def azure_account(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "azure_account")

    @azure_account.setter
    def azure_account(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs']]):
        pulumi.set(self, "azure_account", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter(name="googleCloudAccount")
    def google_cloud_account(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "google_cloud_account")

    @google_cloud_account.setter
    def google_cloud_account(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs']]):
        pulumi.set(self, "google_cloud_account", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inlineTemplate")
    def inline_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inline_template")

    @inline_template.setter
    def inline_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inline_template", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionTemplateArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionTemplateArgs']]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="templateParameters")
    def template_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_parameters")

    @template_parameters.setter
    def template_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_parameters", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAdvancedOptionsArgs:
    def __init__(__self__, *,
                 allow_additional_plugin_downloads: Optional[pulumi.Input[bool]] = None,
                 apply_parameters: Optional[pulumi.Input[str]] = None,
                 init_parameters: Optional[pulumi.Input[str]] = None,
                 plugin_cache_directory: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        if allow_additional_plugin_downloads is not None:
            pulumi.set(__self__, "allow_additional_plugin_downloads", allow_additional_plugin_downloads)
        if apply_parameters is not None:
            pulumi.set(__self__, "apply_parameters", apply_parameters)
        if init_parameters is not None:
            pulumi.set(__self__, "init_parameters", init_parameters)
        if plugin_cache_directory is not None:
            pulumi.set(__self__, "plugin_cache_directory", plugin_cache_directory)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="allowAdditionalPluginDownloads")
    def allow_additional_plugin_downloads(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_additional_plugin_downloads")

    @allow_additional_plugin_downloads.setter
    def allow_additional_plugin_downloads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_additional_plugin_downloads", value)

    @property
    @pulumi.getter(name="applyParameters")
    def apply_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apply_parameters")

    @apply_parameters.setter
    def apply_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_parameters", value)

    @property
    @pulumi.getter(name="initParameters")
    def init_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "init_parameters")

    @init_parameters.setter
    def init_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "init_parameters", value)

    @property
    @pulumi.getter(name="pluginCacheDirectory")
    def plugin_cache_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin_cache_directory")

    @plugin_cache_directory.setter
    def plugin_cache_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_cache_directory", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccountArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs'] role: (see below for nested schema)
        """
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]:
        """
        (see below for nested schema)
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs']]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAwsAccountRoleArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 role_session_name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if role_session_name is not None:
            pulumi.set(__self__, "role_session_name", role_session_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleSessionName")
    def role_session_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_session_name")

    @role_session_name.setter
    def role_session_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_session_name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_duration", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionAzureAccountArgs:
    def __init__(__self__, *,
                 variable: Optional[pulumi.Input[str]] = None):
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionGoogleCloudAccountArgs:
    def __init__(__self__, *,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 variable: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] impersonate_service_account: Impersonate service accounts
        :param pulumi.Input[str] project: This sets GOOGLE_PROJECT environment variable
        :param pulumi.Input[str] region: This sets GOOGLE_REGION environment variable
        :param pulumi.Input[str] service_account_emails: This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        :param pulumi.Input[bool] use_vm_service_account: When running in a Compute Engine virtual machine, use the associated VM service account
        :param pulumi.Input[str] zone: This sets GOOGLE_ZONE environment variable
        """
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        """
        Impersonate service accounts
        """
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE_PROJECT environment variable
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE_REGION environment variable
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE*IMPERSONATE*SERVICE_ACCOUNT environment variable
        """
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        """
        When running in a Compute Engine virtual machine, use the associated VM service account
        """
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        This sets GOOGLE_ZONE environment variable
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepApplyTerraformTemplateActionTemplateArgs:
    def __init__(__self__, *,
                 additional_variable_files: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 run_automatic_file_substitution: Optional[pulumi.Input[bool]] = None,
                 target_files: Optional[pulumi.Input[str]] = None):
        if additional_variable_files is not None:
            pulumi.set(__self__, "additional_variable_files", additional_variable_files)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if run_automatic_file_substitution is not None:
            pulumi.set(__self__, "run_automatic_file_substitution", run_automatic_file_substitution)
        if target_files is not None:
            pulumi.set(__self__, "target_files", target_files)

    @property
    @pulumi.getter(name="additionalVariableFiles")
    def additional_variable_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_variable_files")

    @additional_variable_files.setter
    def additional_variable_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_variable_files", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter(name="runAutomaticFileSubstitution")
    def run_automatic_file_substitution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_automatic_file_substitution")

    @run_automatic_file_substitution.setter
    def run_automatic_file_substitution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_automatic_file_substitution", value)

    @property
    @pulumi.getter(name="targetFiles")
    def target_files(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_files")

    @target_files.setter
    def target_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_files", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 secret_values: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 action_template: Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 kubernetes_object_status_check_enabled: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] secret_name: The name of the secret resource
        :param pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[bool] kubernetes_object_status_check_enabled: Indicates the status of the Kubernetes Object Status feature
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_values", secret_values)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if kubernetes_object_status_check_enabled is not None:
            pulumi.set(__self__, "kubernetes_object_status_check_enabled", kubernetes_object_status_check_enabled)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the secret resource
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretValues")
    def secret_values(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "secret_values")

    @secret_values.setter
    def secret_values(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "secret_values", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter(name="kubernetesObjectStatusCheckEnabled")
    def kubernetes_object_status_check_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the status of the Kubernetes Object Status feature
        """
        return pulumi.get(self, "kubernetes_object_status_check_enabled")

    @kubernetes_object_status_check_enabled.setter
    def kubernetes_object_status_check_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubernetes_object_status_check_enabled", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployKubernetesSecretActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepDeployKubernetesSecretActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['RunbookProcessStepDeployPackageActionPrimaryPackageArgs'],
                 action_template: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 windows_service: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionWindowsServiceArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['RunbookProcessStepDeployPackageActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input['RunbookProcessStepDeployPackageActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepDeployPackageActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input['RunbookProcessStepDeployPackageActionWindowsServiceArgs'] windows_service: Deploy a windows service feature
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if windows_service is not None:
            pulumi.set(__self__, "windows_service", windows_service)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['RunbookProcessStepDeployPackageActionPrimaryPackageArgs']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['RunbookProcessStepDeployPackageActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepDeployPackageActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepDeployPackageActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployPackageActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="windowsService")
    def windows_service(self) -> Optional[pulumi.Input['RunbookProcessStepDeployPackageActionWindowsServiceArgs']]:
        """
        Deploy a windows service feature
        """
        return pulumi.get(self, "windows_service")

    @windows_service.setter
    def windows_service(self, value: Optional[pulumi.Input['RunbookProcessStepDeployPackageActionWindowsServiceArgs']]):
        pulumi.set(self, "windows_service", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployPackageActionWindowsServiceArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 arguments: Optional[pulumi.Input[str]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] executable_path: The path to the executable relative to the package installation directory
        :param pulumi.Input[str] service_name: The name of the service
        :param pulumi.Input[str] arguments: The command line arguments that will be passed to the service when it starts
        :param pulumi.Input[str] custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param pulumi.Input[str] custom_account_password: The password for the custom account
        :param pulumi.Input[str] dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param pulumi.Input[str] description: User-friendly description of the service (optional)
        :param pulumi.Input[str] display_name: The display name of the service (optional)
        :param pulumi.Input[str] service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param pulumi.Input[str] start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "service_name", service_name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionArgs:
    def __init__(__self__, *,
                 executable_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_package: pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs'],
                 service_name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs']] = None,
                 arguments: Optional[pulumi.Input[str]] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionContainerArgs']]]] = None,
                 create_or_update_service: Optional[pulumi.Input[bool]] = None,
                 custom_account_name: Optional[pulumi.Input[str]] = None,
                 custom_account_password: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] executable_path: The path to the executable relative to the package installation directory
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[str] service_name: The name of the service
        :param pulumi.Input['RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[str] arguments: The command line arguments that will be passed to the service when it starts
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[str] custom_account_name: The Windows/domain account of the custom user that the service will run under
        :param pulumi.Input[str] custom_account_password: The password for the custom account
        :param pulumi.Input[str] dependencies: Any dependencies that the service has. Separate the names using forward slashes (/).
        :param pulumi.Input[str] description: User-friendly description of the service (optional)
        :param pulumi.Input[str] display_name: The display name of the service (optional)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepDeployWindowsServiceActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[str] service_account: Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[str] start_mode: When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "executable_path", executable_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_package", primary_package)
        pulumi.set(__self__, "service_name", service_name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if create_or_update_service is not None:
            pulumi.set(__self__, "create_or_update_service", create_or_update_service)
        if custom_account_name is not None:
            pulumi.set(__self__, "custom_account_name", custom_account_name)
        if custom_account_password is not None:
            pulumi.set(__self__, "custom_account_password", custom_account_password)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter(name="executablePath")
    def executable_path(self) -> pulumi.Input[str]:
        """
        The path to the executable relative to the package installation directory
        """
        return pulumi.get(self, "executable_path")

    @executable_path.setter
    def executable_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "executable_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs']:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs']):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[str]]:
        """
        The command line arguments that will be passed to the service when it starts
        """
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="createOrUpdateService")
    def create_or_update_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_or_update_service")

    @create_or_update_service.setter
    def create_or_update_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_or_update_service", value)

    @property
    @pulumi.getter(name="customAccountName")
    def custom_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Windows/domain account of the custom user that the service will run under
        """
        return pulumi.get(self, "custom_account_name")

    @custom_account_name.setter
    def custom_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_name", value)

    @property
    @pulumi.getter(name="customAccountPassword")
    def custom_account_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the custom account
        """
        return pulumi.get(self, "custom_account_password")

    @custom_account_password.setter
    def custom_account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_account_password", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[str]]:
        """
        Any dependencies that the service has. Separate the names using forward slashes (/).
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-friendly description of the service (optional)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the service (optional)
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepDeployWindowsServiceActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        Which built-in account will the service run under. Can be LocalSystem, NT Authority\\NetworkService, NT Authority\\LocalService, _CUSTOM or an expression
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        """
        When will the service start. Can be auto, delayed-auto, manual, unchanged or an expression
        """
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepDeployWindowsServiceActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionArgs:
    def __init__(__self__, *,
                 instructions: pulumi.Input[str],
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepManualInterventionActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepManualInterventionActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionPackageArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 responsible_teams: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] instructions: The instructions for the user to follow
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['RunbookProcessStepManualInterventionActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepManualInterventionActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[str] responsible_teams: The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        """
        pulumi.set(__self__, "instructions", instructions)
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if responsible_teams is not None:
            pulumi.set(__self__, "responsible_teams", responsible_teams)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def instructions(self) -> pulumi.Input[str]:
        """
        The instructions for the user to follow
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: pulumi.Input[str]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepManualInterventionActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepManualInterventionActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepManualInterventionActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepManualInterventionActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepManualInterventionActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="responsibleTeams")
    def responsible_teams(self) -> Optional[pulumi.Input[str]]:
        """
        The teams responsible to resolve this step. If no teams are specified, all users who have permission to deploy the project can resolve it.
        """
        return pulumi.get(self, "responsible_teams")

    @responsible_teams.setter
    def responsible_teams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "responsible_teams", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepManualInterventionActionPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_body: Optional[pulumi.Input[str]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 script_syntax: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variable_substitution_in_files: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['RunbookProcessStepRunKubectlScriptActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepRunKubectlScriptActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] script_file_name: The script file name in the package
        :param pulumi.Input[str] script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_syntax")

    @script_syntax.setter
    def script_syntax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_syntax", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[pulumi.Input[str]]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @variable_substitution_in_files.setter
    def variable_substitution_in_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_substitution_in_files", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[bool] extract_during_deployment: Whether to extract the package during deployment
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunKubectlScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_template: Optional[pulumi.Input['RunbookProcessStepRunScriptActionActionTemplateArgs']] = None,
                 can_be_used_for_project_versioning: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionContainerArgs']]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_dependency: Optional[pulumi.Input['RunbookProcessStepRunScriptActionGitDependencyArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 packages: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionPackageArgs']]]] = None,
                 primary_package: Optional[pulumi.Input['RunbookProcessStepRunScriptActionPrimaryPackageArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 run_on_server: Optional[pulumi.Input[bool]] = None,
                 script_body: Optional[pulumi.Input[str]] = None,
                 script_file_name: Optional[pulumi.Input[str]] = None,
                 script_parameters: Optional[pulumi.Input[str]] = None,
                 script_source: Optional[pulumi.Input[str]] = None,
                 script_syntax: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input[int]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variable_substitution_in_files: Optional[pulumi.Input[str]] = None,
                 worker_pool_id: Optional[pulumi.Input[str]] = None,
                 worker_pool_variable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['RunbookProcessStepRunScriptActionActionTemplateArgs'] action_template: Represents the template that is associated with this action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: The channels associated with this deployment action.
        :param pulumi.Input[str] condition: The condition associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionContainerArgs']]] containers: The deployment action container associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: The environments within which this deployment action will run.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_environments: The environments that this step will be skipped in
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: A list of enabled features for this action.
        :param pulumi.Input['RunbookProcessStepRunScriptActionGitDependencyArgs'] git_dependency: Configuration for resource sourcing from a git repository.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[bool] is_disabled: Indicates the disabled status of this deployment action.
        :param pulumi.Input[bool] is_required: Indicates the required status of this deployment action.
        :param pulumi.Input[str] notes: The notes associated with this deployment action.
        :param pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionPackageArgs']]] packages: The package assocated with this action.
        :param pulumi.Input['RunbookProcessStepRunScriptActionPrimaryPackageArgs'] primary_package: The package assocated with this action.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        :param pulumi.Input[bool] run_on_server: Whether this step runs on a worker or on the target
        :param pulumi.Input[str] script_file_name: The script file name in the package
        :param pulumi.Input[str] script_parameters: Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        :param pulumi.Input[str] slug: The human-readable unique identifier for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags associated with this resource.
        :param pulumi.Input[str] variable_substitution_in_files: A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        :param pulumi.Input[str] worker_pool_id: The worker pool associated with this deployment action.
        :param pulumi.Input[str] worker_pool_variable: The worker pool variable associated with this deployment action.
        """
        pulumi.set(__self__, "name", name)
        if action_template is not None:
            pulumi.set(__self__, "action_template", action_template)
        if can_be_used_for_project_versioning is not None:
            pulumi.set(__self__, "can_be_used_for_project_versioning", can_be_used_for_project_versioning)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if excluded_environments is not None:
            pulumi.set(__self__, "excluded_environments", excluded_environments)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if git_dependency is not None:
            pulumi.set(__self__, "git_dependency", git_dependency)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if primary_package is not None:
            pulumi.set(__self__, "primary_package", primary_package)
        if properties is not None:
            warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
            pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if run_on_server is not None:
            pulumi.set(__self__, "run_on_server", run_on_server)
        if script_body is not None:
            pulumi.set(__self__, "script_body", script_body)
        if script_file_name is not None:
            pulumi.set(__self__, "script_file_name", script_file_name)
        if script_parameters is not None:
            pulumi.set(__self__, "script_parameters", script_parameters)
        if script_source is not None:
            pulumi.set(__self__, "script_source", script_source)
        if script_syntax is not None:
            pulumi.set(__self__, "script_syntax", script_syntax)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if sort_order is not None:
            pulumi.set(__self__, "sort_order", sort_order)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)
        if variable_substitution_in_files is not None:
            pulumi.set(__self__, "variable_substitution_in_files", variable_substitution_in_files)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_variable is not None:
            pulumi.set(__self__, "worker_pool_variable", worker_pool_variable)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionTemplate")
    def action_template(self) -> Optional[pulumi.Input['RunbookProcessStepRunScriptActionActionTemplateArgs']]:
        """
        Represents the template that is associated with this action.
        """
        return pulumi.get(self, "action_template")

    @action_template.setter
    def action_template(self, value: Optional[pulumi.Input['RunbookProcessStepRunScriptActionActionTemplateArgs']]):
        pulumi.set(self, "action_template", value)

    @property
    @pulumi.getter(name="canBeUsedForProjectVersioning")
    def can_be_used_for_project_versioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_be_used_for_project_versioning")

    @can_be_used_for_project_versioning.setter
    def can_be_used_for_project_versioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_be_used_for_project_versioning", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The channels associated with this deployment action.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The condition associated with this deployment action.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionContainerArgs']]]]:
        """
        The deployment action container associated with this deployment action.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments within which this deployment action will run.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter(name="excludedEnvironments")
    def excluded_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The environments that this step will be skipped in
        """
        return pulumi.get(self, "excluded_environments")

    @excluded_environments.setter
    def excluded_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_environments", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of enabled features for this action.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="gitDependency")
    def git_dependency(self) -> Optional[pulumi.Input['RunbookProcessStepRunScriptActionGitDependencyArgs']]:
        """
        Configuration for resource sourcing from a git repository.
        """
        return pulumi.get(self, "git_dependency")

    @git_dependency.setter
    def git_dependency(self, value: Optional[pulumi.Input['RunbookProcessStepRunScriptActionGitDependencyArgs']]):
        pulumi.set(self, "git_dependency", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the disabled status of this deployment action.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates the required status of this deployment action.
        """
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        The notes associated with this deployment action.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionPackageArgs']]]]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "packages")

    @packages.setter
    def packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RunbookProcessStepRunScriptActionPackageArgs']]]]):
        pulumi.set(self, "packages", value)

    @property
    @pulumi.getter(name="primaryPackage")
    def primary_package(self) -> Optional[pulumi.Input['RunbookProcessStepRunScriptActionPrimaryPackageArgs']]:
        """
        The package assocated with this action.
        """
        return pulumi.get(self, "primary_package")

    @primary_package.setter
    def primary_package(self, value: Optional[pulumi.Input['RunbookProcessStepRunScriptActionPrimaryPackageArgs']]):
        pulumi.set(self, "primary_package", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        warnings.warn("""This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""", DeprecationWarning)
        pulumi.log.warn("""properties is deprecated: This attribute is deprecated and will be removed in a future release. Please use the attributes that match the properties that are stored to this map.""")

        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="runOnServer")
    def run_on_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this step runs on a worker or on the target
        """
        return pulumi.get(self, "run_on_server")

    @run_on_server.setter
    def run_on_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_server", value)

    @property
    @pulumi.getter(name="scriptBody")
    def script_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_body")

    @script_body.setter
    def script_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_body", value)

    @property
    @pulumi.getter(name="scriptFileName")
    def script_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The script file name in the package
        """
        return pulumi.get(self, "script_file_name")

    @script_file_name.setter
    def script_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_file_name", value)

    @property
    @pulumi.getter(name="scriptParameters")
    def script_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Parameters expected by the script. Use platform specific calling convention. e.g. -Path #{VariableStoringPath} for PowerShell or -- #{VariableStoringPath} for ScriptCS
        """
        return pulumi.get(self, "script_parameters")

    @script_parameters.setter
    def script_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_parameters", value)

    @property
    @pulumi.getter(name="scriptSource")
    def script_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_source")

    @script_source.setter
    def script_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_source", value)

    @property
    @pulumi.getter(name="scriptSyntax")
    def script_syntax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_syntax")

    @script_syntax.setter
    def script_syntax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_syntax", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable unique identifier for this resource.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags associated with this resource.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)

    @property
    @pulumi.getter(name="variableSubstitutionInFiles")
    def variable_substitution_in_files(self) -> Optional[pulumi.Input[str]]:
        """
        A newline-separated list of file names to transform, relative to the package contents. Extended wildcard syntax is supported.
        """
        return pulumi.get(self, "variable_substitution_in_files")

    @variable_substitution_in_files.setter
    def variable_substitution_in_files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_substitution_in_files", value)

    @property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_id", value)

    @property
    @pulumi.getter(name="workerPoolVariable")
    def worker_pool_variable(self) -> Optional[pulumi.Input[str]]:
        """
        The worker pool variable associated with this deployment action.
        """
        return pulumi.get(self, "worker_pool_variable")

    @worker_pool_variable.setter
    def worker_pool_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_pool_variable", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionActionTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 community_action_template_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if community_action_template_id is not None:
            pulumi.set(__self__, "community_action_template_id", community_action_template_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="communityActionTemplateId")
    def community_action_template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_action_template_id")

    @community_action_template_id.setter
    def community_action_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_action_template_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionGitDependencyArgs:
    def __init__(__self__, *,
                 default_branch: pulumi.Input[str],
                 git_credential_type: pulumi.Input[str],
                 repository_uri: pulumi.Input[str],
                 file_path_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 git_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Name of the default branch of the repository.
        :param pulumi.Input[str] git_credential_type: The Git credential authentication type.
        :param pulumi.Input[str] repository_uri: The Git URI for the repository where this resource is sourced from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_path_filters: List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        :param pulumi.Input[str] git_credential_id: ID of an existing Git credential.
        """
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "git_credential_type", git_credential_type)
        pulumi.set(__self__, "repository_uri", repository_uri)
        if file_path_filters is not None:
            pulumi.set(__self__, "file_path_filters", file_path_filters)
        if git_credential_id is not None:
            pulumi.set(__self__, "git_credential_id", git_credential_id)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Input[str]:
        """
        Name of the default branch of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="gitCredentialType")
    def git_credential_type(self) -> pulumi.Input[str]:
        """
        The Git credential authentication type.
        """
        return pulumi.get(self, "git_credential_type")

    @git_credential_type.setter
    def git_credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_type", value)

    @property
    @pulumi.getter(name="repositoryUri")
    def repository_uri(self) -> pulumi.Input[str]:
        """
        The Git URI for the repository where this resource is sourced from.
        """
        return pulumi.get(self, "repository_uri")

    @repository_uri.setter
    def repository_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_uri", value)

    @property
    @pulumi.getter(name="filePathFilters")
    def file_path_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file path filters used to narrow down the directory where files are to be sourced from. Supports glob patten syntax.
        """
        return pulumi.get(self, "file_path_filters")

    @file_path_filters.setter
    def file_path_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_path_filters", value)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of an existing Git credential.
        """
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_credential_id", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionPackageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 extract_during_deployment: Optional[pulumi.Input[bool]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[bool] extract_during_deployment: Whether to extract the package during deployment
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if extract_during_deployment is not None:
            pulumi.set(__self__, "extract_during_deployment", extract_during_deployment)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="extractDuringDeployment")
    def extract_during_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to extract the package during deployment
        """
        return pulumi.get(self, "extract_during_deployment")

    @extract_during_deployment.setter
    def extract_during_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract_during_deployment", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class RunbookProcessStepRunScriptActionPrimaryPackageArgs:
    def __init__(__self__, *,
                 package_id: pulumi.Input[str],
                 acquisition_location: Optional[pulumi.Input[str]] = None,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] package_id: The ID of the package.
        :param pulumi.Input[str] acquisition_location: Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        :param pulumi.Input[str] feed_id: The feed ID associated with this package reference.
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: A list of properties associated with this package.
        """
        pulumi.set(__self__, "package_id", package_id)
        if acquisition_location is not None:
            pulumi.set(__self__, "acquisition_location", acquisition_location)
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        """
        The ID of the package.
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter(name="acquisitionLocation")
    def acquisition_location(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to acquire this package on the server ('Server'), target ('ExecutionTarget') or not at all ('NotAcquired'). Can be an expression
        """
        return pulumi.get(self, "acquisition_location")

    @acquisition_location.setter
    def acquisition_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acquisition_location", value)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        """
        The feed ID associated with this package reference.
        """
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A list of properties associated with this package.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointArgs:
    def __init__(__self__, *,
                 communication_style: pulumi.Input[str],
                 aad_client_credential_secret: Optional[pulumi.Input[str]] = None,
                 aad_credential_type: Optional[pulumi.Input[str]] = None,
                 aad_user_credential_username: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 applications_directory: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['SshConnectionDeploymentTargetEndpointAuthenticationArgs']] = None,
                 certificate_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 certificate_store_location: Optional[pulumi.Input[str]] = None,
                 certificate_store_name: Optional[pulumi.Input[str]] = None,
                 client_certificate_variable: Optional[pulumi.Input[str]] = None,
                 cloud_service_name: Optional[pulumi.Input[str]] = None,
                 cluster_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_certificate_path: Optional[pulumi.Input[str]] = None,
                 cluster_url: Optional[pulumi.Input[str]] = None,
                 connection_endpoint: Optional[pulumi.Input[str]] = None,
                 container_options: Optional[pulumi.Input[str]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointContainerArgs']]]] = None,
                 default_worker_pool_id: Optional[pulumi.Input[str]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointDestinationArgs']]]] = None,
                 dot_net_core_platform: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 running_in_container: Optional[pulumi.Input[bool]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server_certificate_thumbprint: Optional[pulumi.Input[str]] = None,
                 skip_tls_verification: Optional[pulumi.Input[bool]] = None,
                 slot: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None,
                 swap_if_possible: Optional[pulumi.Input[bool]] = None,
                 tentacle_version_details: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 use_current_instance_count: Optional[pulumi.Input[bool]] = None,
                 web_app_name: Optional[pulumi.Input[str]] = None,
                 web_app_slot_name: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        pulumi.set(__self__, "communication_style", communication_style)
        if aad_client_credential_secret is not None:
            pulumi.set(__self__, "aad_client_credential_secret", aad_client_credential_secret)
        if aad_credential_type is not None:
            pulumi.set(__self__, "aad_credential_type", aad_credential_type)
        if aad_user_credential_username is not None:
            pulumi.set(__self__, "aad_user_credential_username", aad_user_credential_username)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if applications_directory is not None:
            pulumi.set(__self__, "applications_directory", applications_directory)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if certificate_signature_algorithm is not None:
            pulumi.set(__self__, "certificate_signature_algorithm", certificate_signature_algorithm)
        if certificate_store_location is not None:
            pulumi.set(__self__, "certificate_store_location", certificate_store_location)
        if certificate_store_name is not None:
            pulumi.set(__self__, "certificate_store_name", certificate_store_name)
        if client_certificate_variable is not None:
            pulumi.set(__self__, "client_certificate_variable", client_certificate_variable)
        if cloud_service_name is not None:
            pulumi.set(__self__, "cloud_service_name", cloud_service_name)
        if cluster_certificate is not None:
            pulumi.set(__self__, "cluster_certificate", cluster_certificate)
        if cluster_certificate_path is not None:
            pulumi.set(__self__, "cluster_certificate_path", cluster_certificate_path)
        if cluster_url is not None:
            pulumi.set(__self__, "cluster_url", cluster_url)
        if connection_endpoint is not None:
            pulumi.set(__self__, "connection_endpoint", connection_endpoint)
        if container_options is not None:
            pulumi.set(__self__, "container_options", container_options)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if default_worker_pool_id is not None:
            pulumi.set(__self__, "default_worker_pool_id", default_worker_pool_id)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if dot_net_core_platform is not None:
            pulumi.set(__self__, "dot_net_core_platform", dot_net_core_platform)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if running_in_container is not None:
            pulumi.set(__self__, "running_in_container", running_in_container)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server_certificate_thumbprint is not None:
            pulumi.set(__self__, "server_certificate_thumbprint", server_certificate_thumbprint)
        if skip_tls_verification is not None:
            pulumi.set(__self__, "skip_tls_verification", skip_tls_verification)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)
        if swap_if_possible is not None:
            pulumi.set(__self__, "swap_if_possible", swap_if_possible)
        if tentacle_version_details is not None:
            pulumi.set(__self__, "tentacle_version_details", tentacle_version_details)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_current_instance_count is not None:
            pulumi.set(__self__, "use_current_instance_count", use_current_instance_count)
        if web_app_name is not None:
            pulumi.set(__self__, "web_app_name", web_app_name)
        if web_app_slot_name is not None:
            pulumi.set(__self__, "web_app_slot_name", web_app_slot_name)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="communicationStyle")
    def communication_style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "communication_style")

    @communication_style.setter
    def communication_style(self, value: pulumi.Input[str]):
        pulumi.set(self, "communication_style", value)

    @property
    @pulumi.getter(name="aadClientCredentialSecret")
    def aad_client_credential_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_credential_secret")

    @aad_client_credential_secret.setter
    def aad_client_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_credential_secret", value)

    @property
    @pulumi.getter(name="aadCredentialType")
    def aad_credential_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_credential_type")

    @aad_credential_type.setter
    def aad_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_credential_type", value)

    @property
    @pulumi.getter(name="aadUserCredentialUsername")
    def aad_user_credential_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_user_credential_username")

    @aad_user_credential_username.setter
    def aad_user_credential_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_user_credential_username", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="applicationsDirectory")
    def applications_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "applications_directory")

    @applications_directory.setter
    def applications_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applications_directory", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['SshConnectionDeploymentTargetEndpointAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['SshConnectionDeploymentTargetEndpointAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="certificateSignatureAlgorithm")
    def certificate_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_signature_algorithm")

    @certificate_signature_algorithm.setter
    def certificate_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_signature_algorithm", value)

    @property
    @pulumi.getter(name="certificateStoreLocation")
    def certificate_store_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_location")

    @certificate_store_location.setter
    def certificate_store_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_location", value)

    @property
    @pulumi.getter(name="certificateStoreName")
    def certificate_store_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_store_name")

    @certificate_store_name.setter
    def certificate_store_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_store_name", value)

    @property
    @pulumi.getter(name="clientCertificateVariable")
    def client_certificate_variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate_variable")

    @client_certificate_variable.setter
    def client_certificate_variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_variable", value)

    @property
    @pulumi.getter(name="cloudServiceName")
    def cloud_service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_service_name")

    @cloud_service_name.setter
    def cloud_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_service_name", value)

    @property
    @pulumi.getter(name="clusterCertificate")
    def cluster_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate")

    @cluster_certificate.setter
    def cluster_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate", value)

    @property
    @pulumi.getter(name="clusterCertificatePath")
    def cluster_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_certificate_path")

    @cluster_certificate_path.setter
    def cluster_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_certificate_path", value)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter(name="connectionEndpoint")
    def connection_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_endpoint")

    @connection_endpoint.setter
    def connection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_endpoint", value)

    @property
    @pulumi.getter(name="containerOptions")
    def container_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_options")

    @container_options.setter
    def container_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_options", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="defaultWorkerPoolId")
    def default_worker_pool_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_worker_pool_id")

    @default_worker_pool_id.setter
    def default_worker_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_worker_pool_id", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointDestinationArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter(name="dotNetCorePlatform")
    def dot_net_core_platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dot_net_core_platform")

    @dot_net_core_platform.setter
    def dot_net_core_platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot_net_core_platform", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="runningInContainer")
    def running_in_container(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running_in_container")

    @running_in_container.setter
    def running_in_container(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running_in_container", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter(name="serverCertificateThumbprint")
    def server_certificate_thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_thumbprint")

    @server_certificate_thumbprint.setter
    def server_certificate_thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_thumbprint", value)

    @property
    @pulumi.getter(name="skipTlsVerification")
    def skip_tls_verification(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_tls_verification")

    @skip_tls_verification.setter
    def skip_tls_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verification", value)

    @property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="swapIfPossible")
    def swap_if_possible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "swap_if_possible")

    @swap_if_possible.setter
    def swap_if_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "swap_if_possible", value)

    @property
    @pulumi.getter(name="tentacleVersionDetails")
    def tentacle_version_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']]]]:
        return pulumi.get(self, "tentacle_version_details")

    @tentacle_version_details.setter
    def tentacle_version_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs']]]]):
        pulumi.set(self, "tentacle_version_details", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="useCurrentInstanceCount")
    def use_current_instance_count(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_current_instance_count")

    @use_current_instance_count.setter
    def use_current_instance_count(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_current_instance_count", value)

    @property
    @pulumi.getter(name="webAppName")
    def web_app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_name")

    @web_app_name.setter
    def web_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_name", value)

    @property
    @pulumi.getter(name="webAppSlotName")
    def web_app_slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_app_slot_name")

    @web_app_slot_name.setter
    def web_app_slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_app_slot_name", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointAuthenticationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 admin_login: Optional[pulumi.Input[str]] = None,
                 assume_role: Optional[pulumi.Input[bool]] = None,
                 assume_role_external_id: Optional[pulumi.Input[str]] = None,
                 assume_role_session_duration: Optional[pulumi.Input[int]] = None,
                 assumed_role_arn: Optional[pulumi.Input[str]] = None,
                 assumed_role_session: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_resource_group: Optional[pulumi.Input[str]] = None,
                 impersonate_service_account: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 service_account_emails: Optional[pulumi.Input[str]] = None,
                 token_path: Optional[pulumi.Input[str]] = None,
                 use_instance_role: Optional[pulumi.Input[bool]] = None,
                 use_vm_service_account: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if admin_login is not None:
            pulumi.set(__self__, "admin_login", admin_login)
        if assume_role is not None:
            pulumi.set(__self__, "assume_role", assume_role)
        if assume_role_external_id is not None:
            pulumi.set(__self__, "assume_role_external_id", assume_role_external_id)
        if assume_role_session_duration is not None:
            pulumi.set(__self__, "assume_role_session_duration", assume_role_session_duration)
        if assumed_role_arn is not None:
            pulumi.set(__self__, "assumed_role_arn", assumed_role_arn)
        if assumed_role_session is not None:
            pulumi.set(__self__, "assumed_role_session", assumed_role_session)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_resource_group is not None:
            pulumi.set(__self__, "cluster_resource_group", cluster_resource_group)
        if impersonate_service_account is not None:
            pulumi.set(__self__, "impersonate_service_account", impersonate_service_account)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_account_emails is not None:
            pulumi.set(__self__, "service_account_emails", service_account_emails)
        if token_path is not None:
            pulumi.set(__self__, "token_path", token_path)
        if use_instance_role is not None:
            pulumi.set(__self__, "use_instance_role", use_instance_role)
        if use_vm_service_account is not None:
            pulumi.set(__self__, "use_vm_service_account", use_vm_service_account)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="adminLogin")
    def admin_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_login")

    @admin_login.setter
    def admin_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_login", value)

    @property
    @pulumi.getter(name="assumeRole")
    def assume_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "assume_role")

    @assume_role.setter
    def assume_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assume_role", value)

    @property
    @pulumi.getter(name="assumeRoleExternalId")
    def assume_role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_external_id")

    @assume_role_external_id.setter
    def assume_role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_external_id", value)

    @property
    @pulumi.getter(name="assumeRoleSessionDuration")
    def assume_role_session_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "assume_role_session_duration")

    @assume_role_session_duration.setter
    def assume_role_session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assume_role_session_duration", value)

    @property
    @pulumi.getter(name="assumedRoleArn")
    def assumed_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_arn")

    @assumed_role_arn.setter
    def assumed_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_arn", value)

    @property
    @pulumi.getter(name="assumedRoleSession")
    def assumed_role_session(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assumed_role_session")

    @assumed_role_session.setter
    def assumed_role_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumed_role_session", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterResourceGroup")
    def cluster_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_resource_group")

    @cluster_resource_group.setter
    def cluster_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_resource_group", value)

    @property
    @pulumi.getter(name="impersonateServiceAccount")
    def impersonate_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impersonate_service_account")

    @impersonate_service_account.setter
    def impersonate_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impersonate_service_account", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="serviceAccountEmails")
    def service_account_emails(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_emails")

    @service_account_emails.setter
    def service_account_emails(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_emails", value)

    @property
    @pulumi.getter(name="tokenPath")
    def token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_path")

    @token_path.setter
    def token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_path", value)

    @property
    @pulumi.getter(name="useInstanceRole")
    def use_instance_role(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_role")

    @use_instance_role.setter
    def use_instance_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_role", value)

    @property
    @pulumi.getter(name="useVmServiceAccount")
    def use_vm_service_account(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_vm_service_account")

    @use_vm_service_account.setter
    def use_vm_service_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vm_service_account", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointContainerArgs:
    def __init__(__self__, *,
                 feed_id: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        if feed_id is not None:
            pulumi.set(__self__, "feed_id", feed_id)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter(name="feedId")
    def feed_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "feed_id")

    @feed_id.setter
    def feed_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feed_id", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointDestinationArgs:
    def __init__(__self__, *,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 drop_folder_path: Optional[pulumi.Input[str]] = None):
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if drop_folder_path is not None:
            pulumi.set(__self__, "drop_folder_path", drop_folder_path)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dropFolderPath")
    def drop_folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_folder_path")

    @drop_folder_path.setter
    def drop_folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_folder_path", value)


@pulumi.input_type
class SshConnectionDeploymentTargetEndpointTentacleVersionDetailArgs:
    def __init__(__self__, *,
                 upgrade_locked: Optional[pulumi.Input[bool]] = None,
                 upgrade_required: Optional[pulumi.Input[bool]] = None,
                 upgrade_suggested: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if upgrade_locked is not None:
            pulumi.set(__self__, "upgrade_locked", upgrade_locked)
        if upgrade_required is not None:
            pulumi.set(__self__, "upgrade_required", upgrade_required)
        if upgrade_suggested is not None:
            pulumi.set(__self__, "upgrade_suggested", upgrade_suggested)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="upgradeLocked")
    def upgrade_locked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_locked")

    @upgrade_locked.setter
    def upgrade_locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_locked", value)

    @property
    @pulumi.getter(name="upgradeRequired")
    def upgrade_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_required")

    @upgrade_required.setter
    def upgrade_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_required", value)

    @property
    @pulumi.getter(name="upgradeSuggested")
    def upgrade_suggested(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upgrade_suggested")

    @upgrade_suggested.setter
    def upgrade_suggested(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_suggested", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class TeamExternalSecurityGroupArgs:
    def __init__(__self__, *,
                 display_id_and_name: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The unique ID for this resource.
        """
        if display_id_and_name is not None:
            pulumi.set(__self__, "display_id_and_name", display_id_and_name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayIdAndName")
    def display_id_and_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "display_id_and_name")

    @display_id_and_name.setter
    def display_id_and_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_id_and_name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class TeamUserRoleArgs:
    def __init__(__self__, *,
                 space_id: pulumi.Input[str],
                 user_role_id: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 project_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 tenant_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "user_role_id", user_role_id)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if project_group_ids is not None:
            pulumi.set(__self__, "project_group_ids", project_group_ids)
        if project_ids is not None:
            pulumi.set(__self__, "project_ids", project_ids)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if tenant_ids is not None:
            pulumi.set(__self__, "tenant_ids", tenant_ids)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="userRoleId")
    def user_role_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_role_id")

    @user_role_id.setter
    def user_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_role_id", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="projectGroupIds")
    def project_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_group_ids")

    @project_group_ids.setter
    def project_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_group_ids", value)

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "project_ids")

    @project_ids.setter
    def project_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "project_ids", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenant_ids")

    @tenant_ids.setter
    def tenant_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_ids", value)


@pulumi.input_type
class UserIdentityArgs:
    def __init__(__self__, *,
                 claims: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityClaimArgs']]]] = None,
                 provider: Optional[pulumi.Input[str]] = None):
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityClaimArgs']]]]:
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserIdentityClaimArgs']]]]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)


@pulumi.input_type
class UserIdentityClaimArgs:
    def __init__(__self__, *,
                 is_identifying_claim: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of this resource.
        """
        pulumi.set(__self__, "is_identifying_claim", is_identifying_claim)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isIdentifyingClaim")
    def is_identifying_claim(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_identifying_claim")

    @is_identifying_claim.setter
    def is_identifying_claim(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_identifying_claim", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


