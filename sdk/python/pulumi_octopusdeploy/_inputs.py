# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'EnvironmentJiraExtensionSettingArgs',
    'EnvironmentJiraServiceManagementExtensionSettingArgs',
    'EnvironmentServicenowExtensionSettingArgs',
    'LibraryVariableSetTemplateArgs',
    'LifecyclePhaseArgs',
    'LifecyclePhaseReleaseRetentionPolicyArgs',
    'LifecyclePhaseTentacleRetentionPolicyArgs',
    'LifecycleReleaseRetentionPolicyArgs',
    'LifecycleTentacleRetentionPolicyArgs',
    'ProjectAutoDeployReleaseOverrideArgs',
    'ProjectConnectivityPolicyArgs',
    'ProjectGitAnonymousPersistenceSettingArgs',
    'ProjectGitLibraryPersistenceSettingArgs',
    'ProjectGitUsernamePasswordPersistenceSettingArgs',
    'ProjectJiraServiceManagementExtensionSettingArgs',
    'ProjectReleaseCreationStrategyArgs',
    'ProjectReleaseCreationStrategyReleaseCreationPackageArgs',
    'ProjectServicenowExtensionSettingArgs',
    'ProjectTemplateArgs',
    'ProjectVersioningStrategyArgs',
    'ProjectVersioningStrategyDonorPackageArgs',
    'RunbookConnectivityPolicyArgs',
    'RunbookRetentionPolicyArgs',
    'ScriptModuleScriptArgs',
    'VariablePromptArgs',
    'VariablePromptDisplaySettingsArgs',
    'VariablePromptDisplaySettingsSelectOptionArgs',
    'VariableScopeArgs',
    'GetVariablesScopeArgs',
]

@pulumi.input_type
class EnvironmentJiraExtensionSettingArgs:
    def __init__(__self__, *,
                 environment_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] environment_type: The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, `"unmapped"`.
        """
        if environment_type is not None:
            pulumi.set(__self__, "environment_type", environment_type)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Jira environment type of this Octopus deployment environment. Valid values are `"development"`, `"production"`, `"staging"`, `"testing"`, `"unmapped"`.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_type", value)


@pulumi.input_type
class EnvironmentJiraServiceManagementExtensionSettingArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class EnvironmentServicenowExtensionSettingArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class LibraryVariableSetTemplateArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 display_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`
        :param pulumi.Input[str] default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] display_settings: The display settings for the parameter.
        :param pulumi.Input[str] help_text: The help presented alongside the parameter input.
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[str] label: The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods. Example: `ServerName`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[pulumi.Input[str]]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label shown beside the parameter when presented in the deployment process. Example: `Server name`.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class LifecyclePhaseArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 automatic_deployment_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_optional_phase: Optional[pulumi.Input[bool]] = None,
                 minimum_environments_before_promotion: Optional[pulumi.Input[int]] = None,
                 optional_deployment_targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 release_retention_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseReleaseRetentionPolicyArgs']]]] = None,
                 tentacle_retention_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseTentacleRetentionPolicyArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] automatic_deployment_targets: Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        :param pulumi.Input[str] id: The unique ID for this resource.
        :param pulumi.Input[bool] is_optional_phase: If false a release must be deployed to this phase before it can be deployed to the next phase.
        :param pulumi.Input[int] minimum_environments_before_promotion: The number of units required before a release can enter the next phase. If 0, all environments are required.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] optional_deployment_targets: Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        :param pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseReleaseRetentionPolicyArgs']]] release_retention_policies: Defines the retention policy for releases or tentacles.
        :param pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseTentacleRetentionPolicyArgs']]] tentacle_retention_policies: Defines the retention policy for releases or tentacles.
        """
        pulumi.set(__self__, "name", name)
        if automatic_deployment_targets is not None:
            pulumi.set(__self__, "automatic_deployment_targets", automatic_deployment_targets)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_optional_phase is not None:
            pulumi.set(__self__, "is_optional_phase", is_optional_phase)
        if minimum_environments_before_promotion is not None:
            pulumi.set(__self__, "minimum_environments_before_promotion", minimum_environments_before_promotion)
        if optional_deployment_targets is not None:
            pulumi.set(__self__, "optional_deployment_targets", optional_deployment_targets)
        if release_retention_policies is not None:
            pulumi.set(__self__, "release_retention_policies", release_retention_policies)
        if tentacle_retention_policies is not None:
            pulumi.set(__self__, "tentacle_retention_policies", tentacle_retention_policies)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="automaticDeploymentTargets")
    def automatic_deployment_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environment IDs in this phase that a release is automatically deployed to when it is eligible for this phase
        """
        return pulumi.get(self, "automatic_deployment_targets")

    @automatic_deployment_targets.setter
    def automatic_deployment_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "automatic_deployment_targets", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isOptionalPhase")
    def is_optional_phase(self) -> Optional[pulumi.Input[bool]]:
        """
        If false a release must be deployed to this phase before it can be deployed to the next phase.
        """
        return pulumi.get(self, "is_optional_phase")

    @is_optional_phase.setter
    def is_optional_phase(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_optional_phase", value)

    @property
    @pulumi.getter(name="minimumEnvironmentsBeforePromotion")
    def minimum_environments_before_promotion(self) -> Optional[pulumi.Input[int]]:
        """
        The number of units required before a release can enter the next phase. If 0, all environments are required.
        """
        return pulumi.get(self, "minimum_environments_before_promotion")

    @minimum_environments_before_promotion.setter
    def minimum_environments_before_promotion(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_environments_before_promotion", value)

    @property
    @pulumi.getter(name="optionalDeploymentTargets")
    def optional_deployment_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environment IDs in this phase that a release can be deployed to, but is not automatically deployed to
        """
        return pulumi.get(self, "optional_deployment_targets")

    @optional_deployment_targets.setter
    def optional_deployment_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "optional_deployment_targets", value)

    @property
    @pulumi.getter(name="releaseRetentionPolicies")
    def release_retention_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseReleaseRetentionPolicyArgs']]]]:
        """
        Defines the retention policy for releases or tentacles.
        """
        return pulumi.get(self, "release_retention_policies")

    @release_retention_policies.setter
    def release_retention_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseReleaseRetentionPolicyArgs']]]]):
        pulumi.set(self, "release_retention_policies", value)

    @property
    @pulumi.getter(name="tentacleRetentionPolicies")
    def tentacle_retention_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseTentacleRetentionPolicyArgs']]]]:
        """
        Defines the retention policy for releases or tentacles.
        """
        return pulumi.get(self, "tentacle_retention_policies")

    @tentacle_retention_policies.setter
    def tentacle_retention_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LifecyclePhaseTentacleRetentionPolicyArgs']]]]):
        pulumi.set(self, "tentacle_retention_policies", value)


@pulumi.input_type
class LifecyclePhaseReleaseRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class LifecyclePhaseTentacleRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class LifecycleReleaseRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class LifecycleTentacleRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is false.
        :param pulumi.Input[str] unit: The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days/releases to keep. The default value is 30. If 0 then all are kept.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is false.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of quantity to keep. Valid units are Days or Items. The default value is Days.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ProjectAutoDeployReleaseOverrideArgs:
    def __init__(__self__, *,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 release_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if release_id is not None:
            pulumi.set(__self__, "release_id", release_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="releaseId")
    def release_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release_id")

    @release_id.setter
    def release_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ProjectConnectivityPolicyArgs:
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 exclude_unhealthy_targets: Optional[pulumi.Input[bool]] = None,
                 skip_machine_behavior: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @exclude_unhealthy_targets.setter
    def exclude_unhealthy_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_unhealthy_targets", value)

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_machine_behavior")

    @skip_machine_behavior.setter
    def skip_machine_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_machine_behavior", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)


@pulumi.input_type
class ProjectGitAnonymousPersistenceSettingArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 base_path: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 protected_branches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] url: The URL associated with these version control settings.
        :param pulumi.Input[str] base_path: The base path associated with these version control settings.
        :param pulumi.Input[str] default_branch: The default branch associated with these version control settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[pulumi.Input[str]]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class ProjectGitLibraryPersistenceSettingArgs:
    def __init__(__self__, *,
                 git_credential_id: pulumi.Input[str],
                 url: pulumi.Input[str],
                 base_path: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 protected_branches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] url: The URL associated with these version control settings.
        :param pulumi.Input[str] base_path: The base path associated with these version control settings.
        :param pulumi.Input[str] default_branch: The default branch associated with these version control settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "git_credential_id", git_credential_id)
        pulumi.set(__self__, "url", url)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter(name="gitCredentialId")
    def git_credential_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "git_credential_id")

    @git_credential_id.setter
    def git_credential_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "git_credential_id", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[pulumi.Input[str]]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class ProjectGitUsernamePasswordPersistenceSettingArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 url: pulumi.Input[str],
                 username: pulumi.Input[str],
                 base_path: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 protected_branches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] password: The password for the Git credential
        :param pulumi.Input[str] url: The URL associated with these version control settings.
        :param pulumi.Input[str] username: The username for the Git credential.
        :param pulumi.Input[str] base_path: The base path associated with these version control settings.
        :param pulumi.Input[str] default_branch: The default branch associated with these version control settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_branches: A list of protected branch patterns.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if base_path is not None:
            pulumi.set(__self__, "base_path", base_path)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if protected_branches is not None:
            pulumi.set(__self__, "protected_branches", protected_branches)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password for the Git credential
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL associated with these version control settings.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username for the Git credential.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="basePath")
    def base_path(self) -> Optional[pulumi.Input[str]]:
        """
        The base path associated with these version control settings.
        """
        return pulumi.get(self, "base_path")

    @base_path.setter
    def base_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_path", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch associated with these version control settings.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="protectedBranches")
    def protected_branches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of protected branch patterns.
        """
        return pulumi.get(self, "protected_branches")

    @protected_branches.setter
    def protected_branches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_branches", value)


@pulumi.input_type
class ProjectJiraServiceManagementExtensionSettingArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 service_desk_project_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] connection_id: The connection identifier associated with the extension settings.
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        :param pulumi.Input[str] service_desk_project_name: The project name associated with this extension.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "service_desk_project_name", service_desk_project_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="serviceDeskProjectName")
    def service_desk_project_name(self) -> pulumi.Input[str]:
        """
        The project name associated with this extension.
        """
        return pulumi.get(self, "service_desk_project_name")

    @service_desk_project_name.setter
    def service_desk_project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_desk_project_name", value)


@pulumi.input_type
class ProjectReleaseCreationStrategyArgs:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 release_creation_package_step_id: Optional[pulumi.Input[str]] = None,
                 release_creation_packages: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectReleaseCreationStrategyReleaseCreationPackageArgs']]]] = None):
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if release_creation_package_step_id is not None:
            pulumi.set(__self__, "release_creation_package_step_id", release_creation_package_step_id)
        if release_creation_packages is not None:
            pulumi.set(__self__, "release_creation_packages", release_creation_packages)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="releaseCreationPackageStepId")
    def release_creation_package_step_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release_creation_package_step_id")

    @release_creation_package_step_id.setter
    def release_creation_package_step_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_creation_package_step_id", value)

    @property
    @pulumi.getter(name="releaseCreationPackages")
    def release_creation_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectReleaseCreationStrategyReleaseCreationPackageArgs']]]]:
        return pulumi.get(self, "release_creation_packages")

    @release_creation_packages.setter
    def release_creation_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectReleaseCreationStrategyReleaseCreationPackageArgs']]]]):
        pulumi.set(self, "release_creation_packages", value)


@pulumi.input_type
class ProjectReleaseCreationStrategyReleaseCreationPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[pulumi.Input[str]] = None,
                 package_reference: Optional[pulumi.Input[str]] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class ProjectServicenowExtensionSettingArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 is_state_automatically_transitioned: pulumi.Input[bool],
                 standard_change_template_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] connection_id: The connection identifier associated with the extension settings.
        :param pulumi.Input[bool] is_enabled: Specifies whether or not this extension is enabled for this project.
        :param pulumi.Input[bool] is_state_automatically_transitioned: Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        :param pulumi.Input[str] standard_change_template_name: The name of the standard change template associated with this extension. If provided, deployments will create a standard change based on the provided template, otherwise a normal change will be created.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_state_automatically_transitioned", is_state_automatically_transitioned)
        if standard_change_template_name is not None:
            pulumi.set(__self__, "standard_change_template_name", standard_change_template_name)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[str]:
        """
        The connection identifier associated with the extension settings.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension is enabled for this project.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isStateAutomaticallyTransitioned")
    def is_state_automatically_transitioned(self) -> pulumi.Input[bool]:
        """
        Specifies whether or not this extension will automatically transition the state of a deployment for this project.
        """
        return pulumi.get(self, "is_state_automatically_transitioned")

    @is_state_automatically_transitioned.setter
    def is_state_automatically_transitioned(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_state_automatically_transitioned", value)

    @property
    @pulumi.getter(name="standardChangeTemplateName")
    def standard_change_template_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the standard change template associated with this extension. If provided, deployments will create a standard change based on the provided template, otherwise a normal change will be created.
        """
        return pulumi.get(self, "standard_change_template_name")

    @standard_change_template_name.setter
    def standard_change_template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standard_change_template_name", value)


@pulumi.input_type
class ProjectTemplateArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_value: Optional[pulumi.Input[str]] = None,
                 display_settings: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 help_text: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods.
        :param pulumi.Input[str] default_value: A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] display_settings: The display settings for the parameter.
        :param pulumi.Input[str] help_text: The help presented alongside the parameter input.
        :param pulumi.Input[str] id: The ID of the template parameter.
        :param pulumi.Input[str] label: The label shown beside the parameter when presented in the deployment process.
        """
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if help_text is not None:
            pulumi.set(__self__, "help_text", help_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable set by the parameter. The name can contain letters, digits, dashes and periods.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        A default value for the parameter, if applicable. This can be a hard-coded value or a variable reference.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The display settings for the parameter.
        """
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="helpText")
    def help_text(self) -> Optional[pulumi.Input[str]]:
        """
        The help presented alongside the parameter input.
        """
        return pulumi.get(self, "help_text")

    @help_text.setter
    def help_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "help_text", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the template parameter.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label shown beside the parameter when presented in the deployment process.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProjectVersioningStrategyArgs:
    def __init__(__self__, *,
                 donor_package_step_id: Optional[pulumi.Input[str]] = None,
                 donor_packages: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyDonorPackageArgs']]]] = None,
                 template: Optional[pulumi.Input[str]] = None):
        if donor_package_step_id is not None:
            pulumi.set(__self__, "donor_package_step_id", donor_package_step_id)
        if donor_packages is not None:
            pulumi.set(__self__, "donor_packages", donor_packages)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="donorPackageStepId")
    def donor_package_step_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "donor_package_step_id")

    @donor_package_step_id.setter
    def donor_package_step_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "donor_package_step_id", value)

    @property
    @pulumi.getter(name="donorPackages")
    def donor_packages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyDonorPackageArgs']]]]:
        return pulumi.get(self, "donor_packages")

    @donor_packages.setter
    def donor_packages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectVersioningStrategyDonorPackageArgs']]]]):
        pulumi.set(self, "donor_packages", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class ProjectVersioningStrategyDonorPackageArgs:
    def __init__(__self__, *,
                 deployment_action: Optional[pulumi.Input[str]] = None,
                 package_reference: Optional[pulumi.Input[str]] = None):
        if deployment_action is not None:
            pulumi.set(__self__, "deployment_action", deployment_action)
        if package_reference is not None:
            pulumi.set(__self__, "package_reference", package_reference)

    @property
    @pulumi.getter(name="deploymentAction")
    def deployment_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_action")

    @deployment_action.setter
    def deployment_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_action", value)

    @property
    @pulumi.getter(name="packageReference")
    def package_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_reference")

    @package_reference.setter
    def package_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_reference", value)


@pulumi.input_type
class RunbookConnectivityPolicyArgs:
    def __init__(__self__, *,
                 allow_deployments_to_no_targets: Optional[pulumi.Input[bool]] = None,
                 exclude_unhealthy_targets: Optional[pulumi.Input[bool]] = None,
                 skip_machine_behavior: Optional[pulumi.Input[str]] = None,
                 target_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if allow_deployments_to_no_targets is not None:
            pulumi.set(__self__, "allow_deployments_to_no_targets", allow_deployments_to_no_targets)
        if exclude_unhealthy_targets is not None:
            pulumi.set(__self__, "exclude_unhealthy_targets", exclude_unhealthy_targets)
        if skip_machine_behavior is not None:
            pulumi.set(__self__, "skip_machine_behavior", skip_machine_behavior)
        if target_roles is not None:
            pulumi.set(__self__, "target_roles", target_roles)

    @property
    @pulumi.getter(name="allowDeploymentsToNoTargets")
    def allow_deployments_to_no_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deployments_to_no_targets")

    @allow_deployments_to_no_targets.setter
    def allow_deployments_to_no_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deployments_to_no_targets", value)

    @property
    @pulumi.getter(name="excludeUnhealthyTargets")
    def exclude_unhealthy_targets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_unhealthy_targets")

    @exclude_unhealthy_targets.setter
    def exclude_unhealthy_targets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_unhealthy_targets", value)

    @property
    @pulumi.getter(name="skipMachineBehavior")
    def skip_machine_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_machine_behavior")

    @skip_machine_behavior.setter
    def skip_machine_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_machine_behavior", value)

    @property
    @pulumi.getter(name="targetRoles")
    def target_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_roles")

    @target_roles.setter
    def target_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_roles", value)


@pulumi.input_type
class RunbookRetentionPolicyArgs:
    def __init__(__self__, *,
                 quantity_to_keep: Optional[pulumi.Input[int]] = None,
                 should_keep_forever: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] quantity_to_keep: How many runs to keep per environment.
        :param pulumi.Input[bool] should_keep_forever: Indicates if items should never be deleted. The default value is `false`.
        """
        if quantity_to_keep is not None:
            pulumi.set(__self__, "quantity_to_keep", quantity_to_keep)
        if should_keep_forever is not None:
            pulumi.set(__self__, "should_keep_forever", should_keep_forever)

    @property
    @pulumi.getter(name="quantityToKeep")
    def quantity_to_keep(self) -> Optional[pulumi.Input[int]]:
        """
        How many runs to keep per environment.
        """
        return pulumi.get(self, "quantity_to_keep")

    @quantity_to_keep.setter
    def quantity_to_keep(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_to_keep", value)

    @property
    @pulumi.getter(name="shouldKeepForever")
    def should_keep_forever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if items should never be deleted. The default value is `false`.
        """
        return pulumi.get(self, "should_keep_forever")

    @should_keep_forever.setter
    def should_keep_forever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_keep_forever", value)


@pulumi.input_type
class ScriptModuleScriptArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 syntax: pulumi.Input[str]):
        """
        :param pulumi.Input[str] body: The body of this script module.
        :param pulumi.Input[str] syntax: The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The body of this script module.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def syntax(self) -> pulumi.Input[str]:
        """
        The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.
        """
        return pulumi.get(self, "syntax")

    @syntax.setter
    def syntax(self, value: pulumi.Input[str]):
        pulumi.set(self, "syntax", value)


@pulumi.input_type
class VariablePromptArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_settings: Optional[pulumi.Input['VariablePromptDisplaySettingsArgs']] = None,
                 is_required: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The description of this variable prompt option.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_settings is not None:
            pulumi.set(__self__, "display_settings", display_settings)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this variable prompt option.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displaySettings")
    def display_settings(self) -> Optional[pulumi.Input['VariablePromptDisplaySettingsArgs']]:
        return pulumi.get(self, "display_settings")

    @display_settings.setter
    def display_settings(self, value: Optional[pulumi.Input['VariablePromptDisplaySettingsArgs']]):
        pulumi.set(self, "display_settings", value)

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_required")

    @is_required.setter
    def is_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class VariablePromptDisplaySettingsArgs:
    def __init__(__self__, *,
                 control_type: pulumi.Input[str],
                 select_options: Optional[pulumi.Input[Sequence[pulumi.Input['VariablePromptDisplaySettingsSelectOptionArgs']]]] = None):
        """
        :param pulumi.Input[str] control_type: The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
        :param pulumi.Input[Sequence[pulumi.Input['VariablePromptDisplaySettingsSelectOptionArgs']]] select_options: If the `control_type` is `Select`, then this value defines an option.
        """
        pulumi.set(__self__, "control_type", control_type)
        if select_options is not None:
            pulumi.set(__self__, "select_options", select_options)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> pulumi.Input[str]:
        """
        The type of control for rendering this prompted variable. Valid types are `SingleLineText`, `MultiLineText`, `Checkbox`, `Select`.
        """
        return pulumi.get(self, "control_type")

    @control_type.setter
    def control_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_type", value)

    @property
    @pulumi.getter(name="selectOptions")
    def select_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VariablePromptDisplaySettingsSelectOptionArgs']]]]:
        """
        If the `control_type` is `Select`, then this value defines an option.
        """
        return pulumi.get(self, "select_options")

    @select_options.setter
    def select_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VariablePromptDisplaySettingsSelectOptionArgs']]]]):
        pulumi.set(self, "select_options", value)


@pulumi.input_type
class VariablePromptDisplaySettingsSelectOptionArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] display_name: The display name for the select value
        :param pulumi.Input[str] value: The select value
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name for the select value
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The select value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VariableScopeArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 machines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: A list of actions that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channels: A list of channels that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environments: A list of environments that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] machines: A list of machines that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] processes: A list of processes that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: A list of roles that are scoped to this variable value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_tags: A list of tenant tags that are scoped to this variable value.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of actions that are scoped to this variable value.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of channels that are scoped to this variable value.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of environments that are scoped to this variable value.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def machines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of machines that are scoped to this variable value.
        """
        return pulumi.get(self, "machines")

    @machines.setter
    def machines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "machines", value)

    @property
    @pulumi.getter
    def processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes that are scoped to this variable value.
        """
        return pulumi.get(self, "processes")

    @processes.setter
    def processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "processes", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of roles that are scoped to this variable value.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tenant tags that are scoped to this variable value.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_tags", value)


@pulumi.input_type
class GetVariablesScopeArgs:
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 channels: Optional[Sequence[str]] = None,
                 environments: Optional[Sequence[str]] = None,
                 machines: Optional[Sequence[str]] = None,
                 processes: Optional[Sequence[str]] = None,
                 roles: Optional[Sequence[str]] = None,
                 tenant_tags: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] actions: A list of actions that are scoped to this variable value.
        :param Sequence[str] channels: A list of channels that are scoped to this variable value.
        :param Sequence[str] environments: A list of environments that are scoped to this variable value.
        :param Sequence[str] machines: A list of machines that are scoped to this variable value.
        :param Sequence[str] processes: A list of processes that are scoped to this variable value.
        :param Sequence[str] roles: A list of roles that are scoped to this variable value.
        :param Sequence[str] tenant_tags: A list of tenant tags that are scoped to this variable value.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if machines is not None:
            pulumi.set(__self__, "machines", machines)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if tenant_tags is not None:
            pulumi.set(__self__, "tenant_tags", tenant_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        """
        A list of actions that are scoped to this variable value.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[str]]:
        """
        A list of channels that are scoped to this variable value.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[str]]:
        """
        A list of environments that are scoped to this variable value.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "environments", value)

    @property
    @pulumi.getter
    def machines(self) -> Optional[Sequence[str]]:
        """
        A list of machines that are scoped to this variable value.
        """
        return pulumi.get(self, "machines")

    @machines.setter
    def machines(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "machines", value)

    @property
    @pulumi.getter
    def processes(self) -> Optional[Sequence[str]]:
        """
        A list of processes that are scoped to this variable value.
        """
        return pulumi.get(self, "processes")

    @processes.setter
    def processes(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "processes", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        A list of roles that are scoped to this variable value.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="tenantTags")
    def tenant_tags(self) -> Optional[Sequence[str]]:
        """
        A list of tenant tags that are scoped to this variable value.
        """
        return pulumi.get(self, "tenant_tags")

    @tenant_tags.setter
    def tenant_tags(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "tenant_tags", value)


