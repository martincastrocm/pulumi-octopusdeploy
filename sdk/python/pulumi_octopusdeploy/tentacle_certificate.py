# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TentacleCertificateArgs', 'TentacleCertificate']

@pulumi.input_type
class TentacleCertificateArgs:
    def __init__(__self__, *,
                 dependencies: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a TentacleCertificate resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)


@pulumi.input_type
class _TentacleCertificateState:
    def __init__(__self__, *,
                 base64: Optional[pulumi.Input[str]] = None,
                 dependencies: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TentacleCertificate resources.
        :param pulumi.Input[str] base64: The base64 encoded pfx certificate.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        :param pulumi.Input[str] thumbprint: The SHA1 sum of the certificate represented in hexadecimal.
        """
        if base64 is not None:
            pulumi.set(__self__, "base64", base64)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)

    @property
    @pulumi.getter
    def base64(self) -> Optional[pulumi.Input[str]]:
        """
        The base64 encoded pfx certificate.
        """
        return pulumi.get(self, "base64")

    @base64.setter
    def base64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base64", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        """
        The SHA1 sum of the certificate represented in hexadecimal.
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)


class TentacleCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dependencies: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Generates a X.509 self-signed certificate for use with a Octopus Deploy Tentacle.

        ## Octopus certificates

        The X.509 certificates generated are self-signed, 2048-bit private keys and intended for use [only between Octopus Server and Tentacle](https://octopus.com/docs/security/octopus-tentacle-communication#Octopus-Tentaclecommunication-Octopuscertificates) communications. There is an insightful discussion of [why Octopus uses self-signed certificates](https://octopus.com/blog/why-self-signed-certificates) by default.

        Instead of generating a new certificate through this resource you can use an existing certificate and simply reference the appropriate thumbprint when registering the target.

        ### State Persistence
        This resource that is generated will be stored in the state file and cannot be retrieved later from the external Octopus Server or Tentacle.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TentacleCertificateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Generates a X.509 self-signed certificate for use with a Octopus Deploy Tentacle.

        ## Octopus certificates

        The X.509 certificates generated are self-signed, 2048-bit private keys and intended for use [only between Octopus Server and Tentacle](https://octopus.com/docs/security/octopus-tentacle-communication#Octopus-Tentaclecommunication-Octopuscertificates) communications. There is an insightful discussion of [why Octopus uses self-signed certificates](https://octopus.com/blog/why-self-signed-certificates) by default.

        Instead of generating a new certificate through this resource you can use an existing certificate and simply reference the appropriate thumbprint when registering the target.

        ### State Persistence
        This resource that is generated will be stored in the state file and cannot be retrieved later from the external Octopus Server or Tentacle.

        :param str resource_name: The name of the resource.
        :param TentacleCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TentacleCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dependencies: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TentacleCertificateArgs.__new__(TentacleCertificateArgs)

            __props__.__dict__["dependencies"] = dependencies
            __props__.__dict__["base64"] = None
            __props__.__dict__["thumbprint"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["base64"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(TentacleCertificate, __self__).__init__(
            'octopusdeploy:index/tentacleCertificate:TentacleCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            base64: Optional[pulumi.Input[str]] = None,
            dependencies: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            thumbprint: Optional[pulumi.Input[str]] = None) -> 'TentacleCertificate':
        """
        Get an existing TentacleCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] base64: The base64 encoded pfx certificate.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] dependencies: Optional map of dependencies that when modified will trigger a re-creation of this resource.
        :param pulumi.Input[str] thumbprint: The SHA1 sum of the certificate represented in hexadecimal.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TentacleCertificateState.__new__(_TentacleCertificateState)

        __props__.__dict__["base64"] = base64
        __props__.__dict__["dependencies"] = dependencies
        __props__.__dict__["thumbprint"] = thumbprint
        return TentacleCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def base64(self) -> pulumi.Output[str]:
        """
        The base64 encoded pfx certificate.
        """
        return pulumi.get(self, "base64")

    @property
    @pulumi.getter
    def dependencies(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Optional map of dependencies that when modified will trigger a re-creation of this resource.
        """
        return pulumi.get(self, "dependencies")

    @property
    @pulumi.getter
    def thumbprint(self) -> pulumi.Output[str]:
        """
        The SHA1 sum of the certificate represented in hexadecimal.
        """
        return pulumi.get(self, "thumbprint")

